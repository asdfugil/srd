
xss@mini logs % lldb
(lldb) platform select remote-ios
  Platform: remote-ios
 Connected: no
  SDK Path: "/Users/xss/Library/Developer/Xcode/iOS DeviceSupport/15.4 (19E5209h) arm64e"
 SDK Roots: [ 0] "/Users/xss/Library/Developer/Xcode/iOS DeviceSupport/15.3 (19D49) arm64e"
 SDK Roots: [ 1] "/Users/xss/Library/Developer/Xcode/iOS DeviceSupport/15.3 (19D50) arm64e"
 SDK Roots: [ 2] "/Users/xss/Library/Developer/Xcode/iOS DeviceSupport/14.7.1 (18G82) arm64e"
 SDK Roots: [ 3] "/Users/xss/Library/Developer/Xcode/iOS DeviceSupport/15.4 (19E5209h) arm64e"
 SDK Roots: [ 4] "/Users/xss/Library/Developer/Xcode/iOS DeviceSupport/15.4 (19E5241a) arm64e"
 SDK Roots: [ 5] "/Users/xss/Library/Developer/Xcode/iOS DeviceSupport/15.4 (19E241) arm64e"
 SDK Roots: [ 6] "/Users/xss/Library/Developer/Xcode/iOS DeviceSupport/15.2.1 (19C63) arm64e"
 SDK Roots: [ 7] "/Users/xss/Library/Developer/Xcode/iOS DeviceSupport/15.4 (19E5225g) arm64e"
 SDK Roots: [ 8] "/Users/xss/Library/Developer/Xcode/iOS DeviceSupport/15.4 (19E5235a) arm64e"
 SDK Roots: [ 9] "/Users/xss/Library/Developer/Xcode/iOS DeviceSupport/14.8 (18H17) arm64e"
 SDK Roots: [10] "/Users/xss/Library/Developer/Xcode/iOS DeviceSupport/15.4 (19E5219e) arm64e"
 SDK Roots: [11] "/Users/xss/Library/Developer/Xcode/iOS DeviceSupport/15.3 (19D5026g) arm64e"
 SDK Roots: [12] "/Users/xss/Library/Developer/Xcode/iOS DeviceSupport/15.2 (19C56) arm64e"
(lldb) process connect connect://192.168.3.56:1921
Process 622 stopped
* thread #1, stop reason = signal SIGSTOP
    frame #0: 0x0000000102c42ae0 dyld`_dyld_start
dyld`_dyld_start:
->  0x102c42ae0 <+0>:  mov    x0, sp
    0x102c42ae4 <+4>:  and    sp, x0, #0xfffffffffffffff0
    0x102c42ae8 <+8>:  mov    x29, #0x0
    0x102c42aec <+12>: mov    x30, #0x0
Target 0: (hello) stopped.
(lldb) bt
* thread #1, stop reason = signal SIGSTOP
  * frame #0: 0x0000000102c42ae0 dyld`_dyld_start
(lldb) re re
General Purpose Registers:
        x0 = 0x0000000000000000
        x1 = 0x0000000000000000
        x2 = 0x0000000000000000
        x3 = 0x0000000000000000
        x4 = 0x0000000000000000
        x5 = 0x0000000000000000
        x6 = 0x0000000000000000
        x7 = 0x0000000000000000
        x8 = 0x0000000000000000
        x9 = 0x0000000000000000
       x10 = 0x0000000000000000
       x11 = 0x0000000000000000
       x12 = 0x0000000000000000
       x13 = 0x0000000000000000
       x14 = 0x0000000000000000
       x15 = 0x0000000000000000
       x16 = 0x0000000000000000
       x17 = 0x0000000000000000
       x18 = 0x0000000000000000
       x19 = 0x0000000000000000
       x20 = 0x0000000000000000
       x21 = 0x0000000000000000
       x22 = 0x0000000000000000
       x23 = 0x0000000000000000
       x24 = 0x0000000000000000
       x25 = 0x0000000000000000
       x26 = 0x0000000000000000
       x27 = 0x0000000000000000
       x28 = 0x0000000000000000
        fp = 0x0000000000000000
        lr = 0x0000000000000000
        sp = 0x000000016d3379b0
        pc = 0x0000000102c42ae0  dyld`_dyld_start
      cpsr = 0x00000000

(lldb) image dump sections
Dumping sections for 2 modules.
Sections for '/private/var/run/com.apple.security.cryptexd/mnt/com.example.cryptex.FWC8YD/usr/bin/hello(0x0000000102ac8000)' (arm64e):
  SectID     Type             Load Address                             Perm File Off.  File Size  Flags      Section Name
  ---------- ---------------- ---------------------------------------  ---- ---------- ---------- ---------- ----------------------------
  0x00000100 container        [0x0000000000000000-0x0000000100000000)* ---  0x00000000 0x00000000 0x00000000 hello.__PAGEZERO
  0x00000200 container        [0x0000000102ac8000-0x0000000102ad4000)  r-x  0x00000000 0x0000c000 0x00000000 hello.__TEXT
  0x00000001 code             [0x0000000102acf96c-0x0000000102acfdec)  r-x  0x0000796c 0x00000480 0x80000400 hello.__TEXT.__text
  0x00000002 code             [0x0000000102acfdec-0x0000000102acfebc)  r-x  0x00007dec 0x000000d0 0x80000408 hello.__TEXT.__auth_stubs
  0x00000003 regular          [0x0000000102acfebc-0x0000000102acfec0)  r-x  0x00007ebc 0x00000004 0x00000016 hello.__TEXT.__init_offsets
  0x00000004 regular          [0x0000000102acfec0-0x0000000102acff60)  r-x  0x00007ec0 0x000000a0 0x00000000 hello.__TEXT.__asan_cstring
  0x00000005 data-cstr        [0x0000000102acff60-0x0000000102acff8f)  r-x  0x00007f60 0x0000002f 0x00000002 hello.__TEXT.__cstring
  0x00000006 regular          [0x0000000102acff8f-0x0000000102acff97)  r-x  0x00007f8f 0x00000008 0x00000000 hello.__TEXT.__const
  0x00000007 compact-unwind   [0x0000000102acff98-0x0000000102acffe8)  r-x  0x00007f98 0x00000050 0x00000000 hello.__TEXT.__unwind_info
  0x00000008 data-cstr        [0x0000000102ad0000-0x0000000102ad001e)  r-x  0x00008000 0x0000001e 0x00000002 hello.__TEXT.__oslogstring
  0x00000300 container        [0x0000000102ad4000-0x0000000102ad8000)  rw-  0x0000c000 0x00004000 0x00000010 hello.__DATA_CONST
  0x00000009 data-ptrs        [0x0000000102ad4000-0x0000000102ad4068)  rw-  0x0000c000 0x00000068 0x00000006 hello.__DATA_CONST.__auth_got
  0x0000000a data-ptrs        [0x0000000102ad4068-0x0000000102ad4080)  rw-  0x0000c068 0x00000018 0x00000006 hello.__DATA_CONST.__got
  0x0000000b data-ptrs        [0x0000000102ad4080-0x0000000102ad4088)  rw-  0x0000c080 0x00000008 0x0000000a hello.__DATA_CONST.__mod_term_func
  0x0000000c regular          [0x0000000102ad4088-0x0000000102ad40b8)  rw-  0x0000c088 0x00000030 0x00000000 hello.__DATA_CONST.__const
  0x00000400 container        [0x0000000102ad8000-0x0000000102adc000)  rw-  0x00010000 0x00004000 0x00000000 hello.__DATA
  0x0000000d regular          [0x0000000102ad8000-0x0000000102ad80c0)  rw-  0x00010000 0x000000c0 0x00000000 hello.__DATA.__asan_globals
  0x0000000e regular          [0x0000000102ad80c0-0x0000000102ad80f0)  rw-  0x000100c0 0x00000030 0x00000000 hello.__DATA.__asan_liveness
  0x0000000f zero-fill        [0x0000000102ad80f0-0x0000000102ad80f8)  rw-  0x00000000 0x00000000 0x00000001 hello.__DATA.__common
  0x00000500 container        [0x0000000102adc000-0x0000000102ae4000)  r--  0x00014000 0x00005150 0x00000000 hello.__LINKEDIT
Sections for '/Users/xss/Library/Developer/Xcode/iOS DeviceSupport/15.4 (19E241) arm64e/Symbols/usr/lib/dyld' (arm64e):
  SectID     Type             Load Address                             Perm File Off.  File Size  Flags      Section Name
  ---------- ---------------- ---------------------------------------  ---- ---------- ---------- ---------- ----------------------------
  0x00000100 container        [0x0000000102c28000-0x0000000102c80000)  r-x  0x00000000 0x00058000 0x00000000 dyld.__TEXT
  0x00000001 code             [0x0000000102c29000-0x0000000102c763bc)  r-x  0x00001000 0x0004d3bc 0x80000400 dyld.__TEXT.__text
  0x00000002 regular          [0x0000000102c763c0-0x0000000102c772f0)  r-x  0x0004e3c0 0x00000f30 0x00000000 dyld.__TEXT.__const
  0x00000003 data-cstr        [0x0000000102c772f0-0x0000000102c7f85a)  r-x  0x0004f2f0 0x0000856a 0x00000002 dyld.__TEXT.__cstring
  0x00000004 compact-unwind   [0x0000000102c7f85c-0x0000000102c7fb70)  r-x  0x0005785c 0x00000314 0x00000000 dyld.__TEXT.__unwind_info
  0x00000200 container        [0x0000000102c80000-0x0000000102c94000)  rw-  0x00058000 0x00014000 0x00000010 dyld.__DATA_CONST
  0x00000005 regular          [0x0000000102c80000-0x0000000102c80070)  rw-  0x00058000 0x00000070 0x00000000 dyld.__DATA_CONST.__auth_ptr
  0x00000006 regular          [0x0000000102c80070-0x0000000102c83c98)  rw-  0x00058070 0x00003c28 0x00000000 dyld.__DATA_CONST.__const
  0x00000007 regular          [0x0000000102c83c98-0x0000000102c93c98)  rw-  0x0005bc98 0x00010000 0x00000000 dyld.__DATA_CONST.__bss
  0x00000300 container        [0x0000000102c94000-0x0000000102c98000)  rw-  0x0006c000 0x00004000 0x00000000 dyld.__DATA
  0x00000008 data             [0x0000000102c94000-0x0000000102c9413c)  rw-  0x0006c000 0x0000013c 0x00000000 dyld.__DATA.__data
  0x00000009 regular          [0x0000000102c94140-0x0000000102c942b0)  rw-  0x0006c140 0x00000170 0x00000000 dyld.__DATA.__all_image_info
  0x0000000a regular          [0x0000000102c942b0-0x0000000102c942f0)  rw-  0x0006c2b0 0x00000040 0x00000000 dyld.__DATA.__crash_info
  0x0000000b zero-fill        [0x0000000102c94300-0x0000000102c95cf8)  rw-  0x00000000 0x00000000 0x00000001 dyld.__DATA.__common
  0x0000000c zero-fill        [0x0000000102c95cf8-0x0000000102c961dc)  rw-  0x00000000 0x00000000 0x00000001 dyld.__DATA.__bss
  0x00000400 container        [0x0000000102c98000-0x0000000102cd0000)  r--  0x00070000 0x000356f0 0x00000000 dyld.__LINKEDIT
(lldb) image dump symtab
Dumping symbol table for 2 modules.
Symtab, num_symbols = 31:
               Debug symbol
               |Synthetic symbol
               ||Externally Visible
               |||
Index   UserID DSX Type            File Address/Value Load Address       Size               Flags      Name
------- ------ --- --------------- ------------------ ------------------ ------------------ ---------- ----------------------------------
[    0]      0     Code            0x0000000100007bd4 0x0000000102acfbd4 0x00000000000001c8 0x001e0080 __os_log_helper_16_0_1_4_0
[    1]      1     Code            0x0000000100007d9c 0x0000000102acfd9c 0x0000000000000034 0x000e0000 asan.module_ctor
[    2]      2     Code            0x0000000100007dd0 0x0000000102acfdd0 0x000000000000001c 0x000e0000 asan.module_dtor
[    3]      3     Data            0x0000000100007ec0 0x0000000102acfec0 0x0000000000000040 0x000e0000 .str
[    4]      4     Data            0x0000000100007f00 0x0000000102acff00 0x0000000000000040 0x000e0000 .str.1
[    5]      5     Data            0x0000000100007f40 0x0000000102acff40 0x0000000000000020 0x000e0000 .str.2
[    6]      6     Data            0x0000000100010000 0x0000000102ad8000 0x0000000000000040 0x000e0000 __asan_global_.str
[    7]      7     Data            0x0000000100010040 0x0000000102ad8040 0x0000000000000040 0x000e0000 __asan_global_.str.1
[    8]      8     Data            0x0000000100010080 0x0000000102ad8080 0x0000000000000040 0x000e0000 __asan_global_.str.2
[    9]      9     Data            0x00000001000100c0 0x0000000102ad80c0 0x0000000000000010 0x000e0000 __asan_binder_.str
[   10]     10     Data            0x00000001000100d0 0x0000000102ad80d0 0x0000000000000010 0x000e0000 __asan_binder_.str.1
[   11]     11     Data            0x00000001000100e0 0x0000000102ad80e0 0x0000000000000010 0x000e0000 __asan_binder_.str.2
[   12]     12     Data            0x00000001000100f0 0x0000000102ad80f0 0x0000000000000008 0x001e0000 ___asan_globals_registered
[   13]     13   X Data            0x0000000100000000 0x0000000102ac8000 0x000000000000796c 0x000f0010 _mh_execute_header
[   14]     14   X Code            0x000000010000796c 0x0000000102acf96c 0x0000000000000268 0x000f0000 main
[   15]     15     Trampoline      0x0000000100007dec 0x0000000102acfdec 0x0000000000000010 0x00010100 __asan_init
[   16]     16   X Undefined       0x0000000000000000                    0x0000000000000000 0x00010100 __asan_option_detect_stack_use_after_return
[   17]     17     Trampoline      0x0000000100007dfc 0x0000000102acfdfc 0x0000000000000010 0x00010100 __asan_register_image_globals
[   18]     18     Trampoline      0x0000000100007e0c 0x0000000102acfe0c 0x0000000000000010 0x00010100 __asan_report_store1
[   19]     19     Trampoline      0x0000000100007e1c 0x0000000102acfe1c 0x0000000000000010 0x00010100 __asan_report_store4
[   20]     20   X Undefined       0x0000000000000000                    0x0000000000000000 0x00010100 __asan_shadow_memory_dynamic_address
[   21]     21     Trampoline      0x0000000100007e2c 0x0000000102acfe2c 0x0000000000000010 0x00010100 __asan_stack_malloc_0
[   22]     22     Trampoline      0x0000000100007e3c 0x0000000102acfe3c 0x0000000000000010 0x00010100 __asan_unregister_image_globals
[   23]     23     Trampoline      0x0000000100007e4c 0x0000000102acfe4c 0x0000000000000010 0x00010100 __asan_version_mismatch_check_apple_clang_1316
[   24]     24     Trampoline      0x0000000100007e5c 0x0000000102acfe5c 0x0000000000000010 0x00010200 __stack_chk_fail
[   25]     25   X Undefined       0x0000000000000000                    0x0000000000000000 0x00010200 __stack_chk_guard
[   26]     26     Trampoline      0x0000000100007e6c 0x0000000102acfe6c 0x0000000000000010 0x00010200 _os_log_impl
[   27]     27     Trampoline      0x0000000100007e7c 0x0000000102acfe7c 0x0000000000000010 0x00010200 getpid
[   28]     28     Trampoline      0x0000000100007e8c 0x0000000102acfe8c 0x0000000000000010 0x00010200 os_log_create
[   29]     29     Trampoline      0x0000000100007e9c 0x0000000102acfe9c 0x0000000000000010 0x00010200 os_log_type_enabled
[   30]     30     Trampoline      0x0000000100007eac 0x0000000102acfeac 0x0000000000000010 0x00010200 printf


Symtab, file = /Users/xss/Library/Developer/Xcode/iOS DeviceSupport/15.4 (19E241) arm64e/Symbols/usr/lib/dyld, num_symbols = 2263:
               Debug symbol
               |Synthetic symbol
               ||Externally Visible
               |||
Index   UserID DSX Type            File Address/Value Load Address       Size               Flags      Name
------- ------ --- --------------- ------------------ ------------------ ------------------ ---------- ----------------------------------
[    0]      0     Code            0x0000000000001020 0x0000000102c29020 0x00000000000000a0 0x001e0000 strnlen
[    1]      1     Code            0x0000000000001020 0x0000000102c29020 0x00000000000000a0 0x001e0000 _platform_strnlen
[    2]      2     Code            0x00000000000010c0 0x0000000102c290c0 0x0000000000000060 0x001e0000 strlen
[    3]      3     Code            0x00000000000010c0 0x0000000102c290c0 0x0000000000000060 0x001e0000 _platform_strlen
[    4]      4     Code            0x0000000000001120 0x0000000102c29120 0x00000000000002dc 0x001e0000 objc::lookup8(unsigned char const*, unsigned long, unsigned long long)
[    5]      5     Code            0x00000000000013fc 0x0000000102c293fc 0x0000000000000080 0x001e0000 dyld4::APIs::dyld_get_active_platform()
[    6]      6     Code            0x000000000000147c 0x0000000102c2947c 0x000000000000028c 0x001e0000 dyld4::APIs::_dyld_for_each_objc_class(char const*, void (void*, bool, bool*) block_pointer)
[    7]      7     Code            0x0000000000001708 0x0000000102c29708 0x0000000000000028 0x001e0000 dyld4::PrebuiltLoaderSet::objcClassOpt() const
[    8]      8     Code            0x0000000000001730 0x0000000102c29730 0x00000000000000ec 0x001e0080 objc::ObjectHashTable::forEachObject(char const*, void (unsigned long long, unsigned short, bool&) block_pointer) const
[    9]      9     Code            0x000000000000181c 0x0000000102c2981c 0x0000000000000024 0x001e0000 _Block_object_dispose
[   10]     10     Code            0x0000000000001840 0x0000000102c29840 0x0000000000000100 0x001e0000 DyldSharedCache::mappedSize() const
[   11]     11     Code            0x0000000000001940 0x0000000102c29940 0x000000000000004c 0x001e0000 dyld4::APIs::dyld_program_sdk_at_least(dyld_build_version_t)
[   12]     12     Code            0x000000000000198c 0x0000000102c2998c 0x0000000000000024 0x001e0000 dyld3::MachOFile::basePlatform(dyld3::Platform)
[   13]     13     Code            0x00000000000019b0 0x0000000102c299b0 0x0000000000000010 0x001e0000 Diagnostics::Diagnostics(bool)
[   14]     14     Code            0x00000000000019c0 0x0000000102c299c0 0x0000000000000128 0x001e0000 dyld4::APIs::_dyld_get_objc_selector(char const*)
[   15]     15     Code            0x0000000000001ae8 0x0000000102c29ae8 0x00000000000000c8 0x001e0080 objc::StringHashTable::tryGetIndex(char const*) const
[   16]     16     Code            0x0000000000001bb0 0x0000000102c29bb0 0x000000000000006c 0x001e0000 dyld4::RuntimeState::inPermanentRange(unsigned long, unsigned long, unsigned char*, dyld4::Loader const**)
[   17]     17     Code            0x0000000000001c1c 0x0000000102c29c1c 0x00000000000001f4 0x001e0000 dyld4::ObjCClassOpt::forEachClass(char const*, dyld4::RuntimeState&, void (void*, bool, bool*) block_pointer) const
[   18]     18     Code            0x0000000000001e10 0x0000000102c29e10 0x0000000000000078 0x001e0000 dyld4::APIs::dyld_image_header_containing_address(void const*)
[   19]     19     Code            0x0000000000001e88 0x0000000102c29e88 0x0000000000000164 0x001e0000 dyld4::APIs::_dyld_is_memory_immutable(void const*, unsigned long)
[   20]     20     Code            0x0000000000001fec 0x0000000102c29fec 0x0000000000000124 0x001e0000 dyld4::APIs::dyld_sdk_at_least(mach_header const*, dyld_build_version_t)
[   21]     21     Code            0x0000000000002110 0x0000000102c2a110 0x0000000000000078 0x001e0000 dyld4::APIs::dyld_get_program_sdk_version()
[   22]     22     Code            0x0000000000002188 0x0000000102c2a188 0x0000000000000098 0x001e0000 dyld4::APIs::_dyld_objc_class_count()
[   23]     23     Code            0x0000000000002230 0x0000000102c2a230 0x0000000000000110 0x001e0000 strncmp
[   24]     24     Code            0x0000000000002230 0x0000000102c2a230 0x0000000000000110 0x001e0000 _platform_strncmp
[   25]     25     Code            0x0000000000002340 0x0000000102c2a340 0x000000000000005c 0x001e0000 dyld4::Loader::contains(dyld4::RuntimeState&, void const*, void const**, unsigned long long*, unsigned char*) const
[   26]     26     Code            0x000000000000239c 0x0000000102c2a39c 0x00000000000000a4 0x001e0000 dyld3::MachOFile::preferredLoadAddress() const
[   27]     27     Code            0x0000000000002440 0x0000000102c2a440 0x00000000000000c0 0x001e0000 dyld4::PrebuiltLoader::contains(dyld4::RuntimeState&, void const*, void const**, unsigned long long*, unsigned char*) const
[   28]     28     Code            0x0000000000002510 0x0000000102c2a510 0x00000000000000d8 0x001e0000 strcmp
[   29]     29     Code            0x0000000000002510 0x0000000102c2a510 0x00000000000000d8 0x001e0000 _platform_strcmp
[   30]     30     Code            0x00000000000025e8 0x0000000102c2a5e8 0x000000000000005c 0x001e0000 dyld4::Loader::loadAddress(dyld4::RuntimeState&) const
[   31]     31     Code            0x0000000000002644 0x0000000102c2a644 0x0000000000000060 0x001e0000 kdebug_is_enabled
[   32]     32     Code            0x00000000000026a4 0x0000000102c2a6a4 0x000000000000007c 0x001e0000 unsigned int SwiftHashTable::hash<SwiftTypeProtocolConformanceLocationKey>(SwiftTypeProtocolConformanceLocationKey const&, unsigned char const*) const
[   33]     33     Code            0x0000000000002720 0x0000000102c2a720 0x0000000000000024 0x001e0000 dyld4::PrebuiltLoader::loadAddress(dyld4::RuntimeState&) const
[   34]     34     Code            0x0000000000002744 0x0000000102c2a744 0x0000000000000048 0x001e0000 DyldSharedCache::getIndexedImageEntry(unsigned int, unsigned long long&, unsigned long long&) const
[   35]     35     Code            0x000000000000278c 0x0000000102c2a78c 0x0000000000000124 0x001e0000 dyld4::JustInTimeLoader::contains(dyld4::RuntimeState&, void const*, void const**, unsigned long long*, unsigned char*) const
[   36]     36     Code            0x00000000000028b0 0x0000000102c2a8b0 0x00000000000001e8 0x001e0000 dyld4::APIs::_dyld_find_protocol_conformance(void const*, void const*, void const*) const
[   37]     37     Code            0x0000000000002a98 0x0000000102c2aa98 0x0000000000000158 0x001e0000 dyld4::RuntimeState::_instantiateTLVs(unsigned long)
[   38]     38     Code            0x0000000000002bf0 0x0000000102c2abf0 0x0000000000000018 0x001e0000 __chkstk_darwin
[   39]     39     Code            0x0000000000002c08 0x0000000102c2ac08 0x00000000000004a4 0x001e0000 dyld4::RuntimeState::initializeClosureMode()
[   40]     40     Code            0x00000000000030ac 0x0000000102c2b0ac 0x0000000000000050 0x001e0000 dyld4::APIs::dyld_process_is_restricted()
[   41]     41     Code            0x00000000000030fc 0x0000000102c2b0fc 0x000000000000002c 0x001e0000 dyld4::SyscallDelegate::getGradedArchs(char const*, bool) const
[   42]     42     Code            0x0000000000003128 0x0000000102c2b128 0x00000000000000ac 0x001e0000 dyld4::notifyMonitoringDyldSharedCacheMap()
[   43]     43     Code            0x00000000000031d4 0x0000000102c2b1d4 0x000000000000002c 0x001e0000 dyld4::SyscallDelegate::DyldCommPage::DyldCommPage()
[   44]     44     Code            0x0000000000003200 0x0000000102c2b200 0x0000000000000088 0x001e0000 dyld3::MachOFile::hasChainedFixups() const
[   45]     45     Code            0x0000000000003288 0x0000000102c2b288 0x000000000000002c 0x001e0000 __thread_selfid
[   46]     46     Code            0x00000000000032b4 0x0000000102c2b2b4 0x00000000000002c0 0x001e0000 dyld3::MachOAnalyzer::withChainStarts(Diagnostics&, unsigned long long, void (dyld_chained_starts_in_image const*) block_pointer) const
[   47]     47     Code            0x0000000000003574 0x0000000102c2b574 0x00000000000000a0 0x001e0000 dyld3::MachOLoaded::getLinkEditPointers(Diagnostics&, dyld3::MachOLoaded::LinkEditInfo&) const
[   48]     48     Code            0x0000000000003614 0x0000000102c2b614 0x000000000000018c 0x001e0000 dyld3::kdebug_trace_dyld_marker(unsigned int, dyld3::kt_arg, dyld3::kt_arg, dyld3::kt_arg, dyld3::kt_arg)
[   49]     49     Code            0x00000000000037a0 0x0000000102c2b7a0 0x0000000000000050 0x001e0000 dyld4::ProcessConfig::PathOverrides::dontUsePrebuiltForApp() const
[   50]     50     Code            0x00000000000037f0 0x0000000102c2b7f0 0x0000000000000268 0x001e0000 dyld3::MachOLoaded::trieWalk(Diagnostics&, unsigned char const*, unsigned char const*, char const*)
[   51]     51     Code            0x0000000000003a58 0x0000000102c2ba58 0x000000000000007c 0x001e0000 dyld4::JustInTimeLoader::makeLaunchLoader(Diagnostics&, dyld4::RuntimeState&, dyld3::MachOAnalyzer const*, char const*)
[   52]     52     Code            0x0000000000003ad4 0x0000000102c2bad4 0x000000000000000c 0x001e0000 dyld4::Loader::InitialOptions::InitialOptions()
[   53]     53     Code            0x0000000000003ae0 0x0000000102c2bae0 0x0000000000000060 0x001e0000 dyld4::Loader::LoaderRef::loader(dyld4::RuntimeState const&) const
[   54]     54     Code            0x0000000000003b40 0x0000000102c2bb40 0x0000000000000008 0x001e0000 dyld4::JustInTimeLoader::loadAddress(dyld4::RuntimeState&) const
[   55]     55     Code            0x0000000000003b48 0x0000000102c2bb48 0x00000000000000d4 0x001e0000 dyld4::RuntimeState::_finalizeListTLV(void*)
[   56]     56     Code            0x0000000000003c1c 0x0000000102c2bc1c 0x00000000000000d0 0x001e0000 dyld4::RuntimeState::withTLVLock(void () block_pointer)
[   57]     57     Code            0x0000000000003cec 0x0000000102c2bcec 0x0000000000000024 0x001e0000 dyld4::PrebuiltLoader::BindTargetRef::makeAbsolute(unsigned long long)
[   58]     58     Code            0x0000000000003d10 0x0000000102c2bd10 0x000000000000005c 0x001e0080 unsigned int SwiftHashTable::getPotentialTarget<SwiftTypeProtocolConformanceLocationKey, SwiftTypeProtocolConformanceLocationKey>(SwiftTypeProtocolConformanceLocationKey const&, unsigned char const*) const
[   59]     59     Code            0x0000000000003d6c 0x0000000102c2bd6c 0x000000000000007c 0x001e0000 unsigned int SwiftHashTable::hash<SwiftMetadataProtocolConformanceLocationKey>(SwiftMetadataProtocolConformanceLocationKey const&, unsigned char const*) const
[   60]     60     Code            0x0000000000003de8 0x0000000102c2bde8 0x00000000000000b0 0x001e0000 dyld3::MachOLoaded::findSectionContent(char const*, char const*, unsigned long long&, bool) const
[   61]     61     Code            0x0000000000003e98 0x0000000102c2be98 0x000000000000006c 0x001e0000 DyldSharedCache::getCanonicalPath(char const*) const
[   62]     62     Code            0x0000000000003f04 0x0000000102c2bf04 0x00000000000000c4 0x001e0000 dyld4::RuntimeState::findPrebuiltLoader(char const*) const
[   63]     63     Code            0x0000000000003fc8 0x0000000102c2bfc8 0x0000000000000090 0x000e0000 invocation function for block in dyld4::APIs::_dyld_for_each_objc_class(char const*, void (void*, bool, bool*) block_pointer)
[   64]     64     Code            0x0000000000004058 0x0000000102c2c058 0x0000000000000388 0x001e0000 dyld4::RuntimeState::notifyLoad(dyld3::Array<dyld4::Loader const*> const&)
[   65]     65     Code            0x00000000000043e0 0x0000000102c2c3e0 0x00000000000002c8 0x001e0000 memmove
[   66]     66     Code            0x00000000000043e0 0x0000000102c2c3e0 0x00000000000002c8 0x001e0000 memcpy
[   67]     67     Code            0x00000000000043e0 0x0000000102c2c3e0 0x00000000000002c8 0x001e0000 _platform_memmove
[   68]     68     Code            0x00000000000046a8 0x0000000102c2c6a8 0x00000000000000c8 0x001e0000 dyld4::RuntimeState::withLoadersReadLock(void () block_pointer)
[   69]     69     Code            0x0000000000004770 0x0000000102c2c770 0x0000000000000008 0x001e0000 dyld4::PrebuiltLoader::hiddenFromFlat(bool) const
[   70]     70     Code            0x0000000000004778 0x0000000102c2c778 0x0000000000000038 0x001e0000 dyld4::RuntimeState::appLoadAddress(unsigned short)
[   71]     71     Code            0x00000000000047b0 0x0000000102c2c7b0 0x0000000000000044 0x001e0000 dyld4::RuntimeState::cachedDylibLoadAddress(unsigned short)
[   72]     72     Code            0x00000000000047f4 0x0000000102c2c7f4 0x0000000000000048 0x001e0000 dyld4::PrebuiltLoader::recordedCdHashIs(unsigned char const*) const
[   73]     73     Code            0x000000000000483c 0x0000000102c2c83c 0x00000000000000cc 0x001e0000 dyld3::MachOLoaded::getSlide() const
[   74]     74     Code            0x0000000000004908 0x0000000102c2c908 0x000000000000003c 0x001e0000 dyld4::APIs::_dyld_is_objc_constant(DyldObjCConstantKind, void const*)
[   75]     75     Code            0x0000000000004944 0x0000000102c2c944 0x0000000000000108 0x001e0000 dyld3::MachOFile::forEachSection(void (dyld3::MachOFile::SectionInfo const&, bool, bool&) block_pointer) const
[   76]     76     Code            0x0000000000004a4c 0x0000000102c2ca4c 0x0000000000000038 0x001e0000 dyld3::ScopedTimer::startTimer()
[   77]     77     Code            0x0000000000004a84 0x0000000102c2ca84 0x000000000000003c 0x001e0000 dyld4::ProcessConfig::DyldCache::indexOfPath(char const*, unsigned int&) const
[   78]     78     Code            0x0000000000004ac0 0x0000000102c2cac0 0x0000000000000004 0x001e0000 dyld4::APIs::_tlv_atexit(void (*)(void*), void*)
[   79]     79     Code            0x0000000000004ac4 0x0000000102c2cac4 0x0000000000000084 0x001e0000 dyld3::MachOFile::read_uleb128(Diagnostics&, unsigned char const*&, unsigned char const*)
[   80]     80     Code            0x0000000000004b48 0x0000000102c2cb48 0x000000000000006c 0x001e0000 dyld4::RuntimeState::inPrebuiltLoader(void const*, unsigned long) const
[   81]     81     Code            0x0000000000004bb4 0x0000000102c2cbb4 0x00000000000000f4 0x001e0000 dyld3::MachOFile::getUuid(unsigned char*) const
[   82]     82     Code            0x0000000000004ca8 0x0000000102c2cca8 0x0000000000000014 0x001e0000 dyld4::PrebuiltLoaderSet::objcProtocolOpt() const
[   83]     83     Code            0x0000000000004cbc 0x0000000102c2ccbc 0x0000000000000008 0x001e0000 dyld4::PrebuiltLoader::representsCachedDylibIndex(unsigned short) const
[   84]     84     Code            0x0000000000004cc4 0x0000000102c2ccc4 0x0000000000000108 0x001e0000 pthread_mutex_lock
[   85]     85     Code            0x0000000000004dcc 0x0000000102c2cdcc 0x0000000000000378 0x001e0000 dyld3::MachOLoaded::findClosestSymbol(unsigned long long, char const**, unsigned long long*) const
[   86]     86     Code            0x0000000000005144 0x0000000102c2d144 0x000000000000028c 0x001e0000 dyld4::APIs::_dyld_for_each_objc_protocol(char const*, void (void*, bool, bool*) block_pointer)
[   87]     87     Code            0x00000000000053d0 0x0000000102c2d3d0 0x0000000000000018 0x001e0000 dyld4::Loader::hasMagic() const
[   88]     88     Code            0x00000000000053e8 0x0000000102c2d3e8 0x0000000000000014 0x001e0000 dyld4::PrebuiltLoaderSet::objcSelectorOpt() const
[   89]     89     Code            0x00000000000053fc 0x0000000102c2d3fc 0x00000000000000c4 0x001e0000 dyld4::PrebuiltLoader::dependent(dyld4::RuntimeState const&, unsigned int, dyld4::Loader::DependentKind*) const
[   90]     90     Code            0x00000000000054c0 0x0000000102c2d4c0 0x0000000000000034 0x001e0000 dyld3::MachOFile::hasMachOMagic() const
[   91]     91     Code            0x00000000000054f4 0x0000000102c2d4f4 0x000000000000005c 0x001e0080 unsigned int SwiftHashTable::getPotentialTarget<SwiftMetadataProtocolConformanceLocationKey, SwiftMetadataProtocolConformanceLocationKey>(SwiftMetadataProtocolConformanceLocationKey const&, unsigned char const*) const
[   92]     92     Code            0x0000000000005550 0x0000000102c2d550 0x0000000000000030 0x001e0000 stat64
[   93]     93     Code            0x0000000000005550 0x0000000102c2d550 0x0000000000000030 0x001e0000 stat
[   94]     94     Code            0x0000000000005590 0x0000000102c2d590 0x0000000000000080 0x001e0000 memcmp
[   95]     95     Code            0x0000000000005590 0x0000000102c2d590 0x0000000000000080 0x001e0000 bcmp
[   96]     96     Code            0x0000000000005590 0x0000000102c2d590 0x0000000000000080 0x001e0000 _platform_memcmp
[   97]     97     Code            0x0000000000005610 0x0000000102c2d610 0x0000000000000140 0x001e0000 dyld3::MachOFile::forEachLoadCommand(Diagnostics&, void (load_command const*, bool&) block_pointer) const
[   98]     98     Code            0x0000000000005750 0x0000000102c2d750 0x0000000000000180 0x001e0000 dyld3::MachOAnalyzer::neverUnload() const
[   99]     99     Code            0x00000000000058d0 0x0000000102c2d8d0 0x00000000000000dc 0x001e0000 dyld4::notifyMonitoringDyld(bool, unsigned int, mach_header const**, char const**)
[  100]    100     Code            0x00000000000059ac 0x0000000102c2d9ac 0x00000000000000c0 0x001e0000 dyld4::SyscallDelegate::withReadOnlyMappedFile(Diagnostics&, char const*, bool, void (void const*, unsigned long, bool, dyld4::FileID const&, char const*) block_pointer) const
[  101]    101     Code            0x0000000000005a6c 0x0000000102c2da6c 0x0000000000000098 0x001e0000 dyld4::RuntimeState::addNotifyAddFunc(dyld4::Loader const*, void (*)(mach_header const*, long))
[  102]    102     Code            0x0000000000005b04 0x0000000102c2db04 0x000000000000004c 0x001e0000 dyld4::APIs::dyld_shared_cache_some_image_overridden()
[  103]    103     Code            0x0000000000005b50 0x0000000102c2db50 0x00000000000000f8 0x001e0000 dyld4::addImagesToAllImages(dyld4::Allocator&, unsigned int, dyld_image_info const*)
[  104]    104     Code            0x0000000000005c48 0x0000000102c2dc48 0x0000000000000058 0x001e0000 DyldSharedCache::inDyldCache(DyldSharedCache const*, dyld3::MachOFile const*)
[  105]    105     Code            0x0000000000005ca0 0x0000000102c2dca0 0x0000000000000028 0x001e0000 dyld4::PrebuiltLoaderSet::contains(void const*, unsigned long) const
[  106]    106     Code            0x0000000000005cc8 0x0000000102c2dcc8 0x0000000000000078 0x001e0000 unsigned int SwiftHashTable::hash<SwiftForeignTypeProtocolConformanceLookupKey>(SwiftForeignTypeProtocolConformanceLookupKey const&, unsigned char const*) const
[  107]    107     Code            0x0000000000005d40 0x0000000102c2dd40 0x00000000000000dc 0x001e0000 dyld4::RuntimeState::exitTLV()
[  108]    108     Code            0x0000000000005e1c 0x0000000102c2de1c 0x000000000000002c 0x001e0000 DyldSharedCache::getUUID(unsigned char*) const
[  109]    109     Code            0x0000000000005e48 0x0000000102c2de48 0x0000000000000070 0x001e0000 dyld4::APIs::validLoader(dyld4::Loader const*)
[  110]    110     Code            0x0000000000005eb8 0x0000000102c2deb8 0x00000000000000c0 0x001e0000 dyld4::RuntimeState::notifyObjCInit(dyld4::Loader const*)
[  111]    111     Code            0x0000000000005f78 0x0000000102c2df78 0x0000000000000060 0x001e0000 dyld3::MachOAnalyzer::makeVMAddrConverter(bool) const
[  112]    112     Code            0x0000000000005fd8 0x0000000102c2dfd8 0x0000000000000148 0x001e0000 dyld4::RuntimeState::addTLVTerminationFunc(void (*)(void*), void*)
[  113]    113     Code            0x0000000000006140 0x0000000102c2e140 0x0000000000000078 0x001e0000 strchr
[  114]    114     Code            0x0000000000006140 0x0000000102c2e140 0x0000000000000078 0x001e0000 _platform_strchr
[  115]    115     Code            0x00000000000061b8 0x0000000102c2e1b8 0x0000000000000060 0x001e0000 dyld4::PrebuiltLoader::runInitializers(dyld4::RuntimeState&) const
[  116]    116     Code            0x0000000000006218 0x0000000102c2e218 0x0000000000000064 0x001e0000 dyld4::PrebuiltLoader::beginInitializers(dyld4::RuntimeState&)
[  117]    117     Code            0x000000000000627c 0x0000000102c2e27c 0x0000000000000010 0x001e0000 dyld3::MachOFile::isDylib() const
[  118]    118     Code            0x000000000000628c 0x0000000102c2e28c 0x0000000000000038 0x001e0000 dyld3::ScopedTimer::endTimer()
[  119]    119     Code            0x00000000000062c4 0x0000000102c2e2c4 0x0000000000000004 0x001e0000 dyld4::APIs::_tlv_exit()
[  120]    120     Code            0x00000000000062c8 0x0000000102c2e2c8 0x00000000000003b8 0x000e0000 invocation function for block in dyld3::MachOFile::forEachSection(void (dyld3::MachOFile::SectionInfo const&, bool, bool&) block_pointer) const
[  121]    121     Code            0x0000000000006680 0x0000000102c2e680 0x0000000000000060 0x001e0000 bzero
[  122]    122     Code            0x0000000000006680 0x0000000102c2e680 0x0000000000000060 0x001e0000 _platform_bzero
[  123]    123     Code            0x0000000000006680 0x0000000102c2e680 0x0000000000000060 0x001e0000 __bzero
[  124]    124     Code            0x00000000000066e0 0x0000000102c2e6e0 0x0000000000000110 0x001e0000 memset
[  125]    125     Code            0x00000000000066e0 0x0000000102c2e6e0 0x0000000000000110 0x001e0000 _platform_memset
[  126]    126     Code            0x00000000000067f0 0x0000000102c2e7f0 0x0000000000000070 0x001e0000 dyld4::APIs::_dyld_shared_cache_contains_path(char const*)
[  127]    127     Code            0x0000000000006860 0x0000000102c2e860 0x0000000000000110 0x001e0000 DyldSharedCache::hasImagePath(char const*, unsigned int&) const
[  128]    128     Code            0x0000000000006970 0x0000000102c2e970 0x00000000000001d4 0x000e0000 invocation function for block in dyld4::RuntimeState::setObjCNotifiers(void (*)(unsigned int, char const* const*, mach_header const* const*), void (*)(char const*, mach_header const*), void (*)(char const*, mach_header const*))
[  129]    129     Code            0x0000000000006b44 0x0000000102c2eb44 0x0000000000000014 0x001e0000 dyld4::PrebuiltLoader::path() const
[  130]    130     Code            0x0000000000006b58 0x0000000102c2eb58 0x0000000000000038 0x001e0080 objc::objc_headeropt_rw_t<unsigned long>::isLoaded(unsigned int) const
[  131]    131     Code            0x0000000000006b90 0x0000000102c2eb90 0x000000000000002c 0x001e0000 close
[  132]    132     Code            0x0000000000006bbc 0x0000000102c2ebbc 0x00000000000000a8 0x001e0000 DyldSharedCache::forEachImageTextSegment(void (unsigned long long, unsigned long long, unsigned char const*, char const*, bool&) block_pointer) const
[  133]    133     Code            0x0000000000006c64 0x0000000102c2ec64 0x0000000000000144 0x001e0000 dyld4::RuntimeState::add(dyld4::Loader const*)
[  134]    134     Code            0x0000000000006da8 0x0000000102c2eda8 0x0000000000000084 0x001e0000 dyld4::Loader::path() const
[  135]    135     Code            0x0000000000006e2c 0x0000000102c2ee2c 0x0000000000000080 0x001e0000 dyld4::APIs::_dyld_image_count()
[  136]    136     Code            0x0000000000006eac 0x0000000102c2eeac 0x00000000000000f4 0x001e0080 unsigned int SwiftHashTable::getIndex<SwiftTypeProtocolConformanceLocationKey, SwiftTypeProtocolConformanceLocationKey>(SwiftTypeProtocolConformanceLocationKey const&, unsigned char const*) const
[  137]    137     Code            0x0000000000006fa0 0x0000000102c2efa0 0x0000000000000280 0x001e0000 dyld4::APIs::dladdr(void const*, dl_info*)
[  138]    138     Code            0x0000000000007220 0x0000000102c2f220 0x0000000000000028 0x001e0000 Diagnostics::assertNoError() const
[  139]    139     Code            0x0000000000007248 0x0000000102c2f248 0x0000000000000034 0x001e0000 dyld4::APIs::dlopen(char const*, int)
[  140]    140     Code            0x000000000000727c 0x0000000102c2f27c 0x0000000000000084 0x001e0000 mach_absolute_time
[  141]    141     Code            0x0000000000007300 0x0000000102c2f300 0x000000000000000c 0x001e0000 mach_absolute_time_kernel
[  142]    142     Code            0x000000000000730c 0x0000000102c2f30c 0x0000000000000044 0x001e0000 mach_continuous_time_kernel
[  143]    143     Code            0x0000000000007350 0x0000000102c2f350 0x000000000000012c 0x001e0000 dyld4::APIs::_dyld_find_foreign_type_protocol_conformance(void const*, char const*, unsigned long) const
[  144]    144     Code            0x000000000000747c 0x0000000102c2f47c 0x0000000000000034 0x001e0000 dyld4::ProcessConfig::canonicalDylibPathInCache(char const*) const
[  145]    145     Code            0x00000000000074b0 0x0000000102c2f4b0 0x000000000000011c 0x001e0000 dyld4::APIs::_dyld_find_unwind_sections(void*, dyld_unwind_sections*)
[  146]    146     Code            0x00000000000075cc 0x0000000102c2f5cc 0x0000000000000030 0x000e0000 invocation function for block in dyld4::APIs::findImageMappedAt(void const*, dyld3::MachOLoaded const**, bool*, char const**, void const**, unsigned long long*, unsigned char*)
[  147]    147     Code            0x00000000000075fc 0x0000000102c2f5fc 0x00000000000001d8 0x001e0000 dyld4::RuntimeState::notifyDebuggerLoad(dyld3::Array<dyld4::Loader const*> const&)
[  148]    148     Code            0x00000000000077d4 0x0000000102c2f7d4 0x0000000000000634 0x001e0000 dyld4::APIs::dlsym(void*, char const*)
[  149]    149     Code            0x0000000000007e08 0x0000000102c2fe08 0x0000000000000048 0x001e0000 strrchr
[  150]    150     Code            0x0000000000007e50 0x0000000102c2fe50 0x00000000000006d4 0x000e0000 invocation function for block in dyld4::APIs::dlopen_from(char const*, int, void*)
[  151]    151     Code            0x0000000000008524 0x0000000102c30524 0x000000000000003c 0x000e0000 invocation function for block in dyld4::APIs::_dyld_is_memory_immutable(void const*, unsigned long)
[  152]    152     Code            0x0000000000008560 0x0000000102c30560 0x000000000000002c 0x001e0000 mprotect
[  153]    153     Code            0x0000000000008560 0x0000000102c30560 0x000000000000002c 0x001e0000 __mprotect
[  154]    154     Code            0x000000000000858c 0x0000000102c3058c 0x0000000000000020 0x001e0000 bool SwiftHashTable::equal<SwiftTypeProtocolConformanceLocationKey, SwiftTypeProtocolConformanceLocationKey>(SwiftTypeProtocolConformanceLocationKey const&, SwiftTypeProtocolConformanceLocationKey const&, unsigned char const*) const
[  155]    155     Code            0x00000000000085ac 0x0000000102c305ac 0x0000000000000044 0x001e0000 dyld4::DyldCacheDataConstLazyScopedWriter::~DyldCacheDataConstLazyScopedWriter()
[  156]    156     Code            0x00000000000085f0 0x0000000102c305f0 0x00000000000001a0 0x001e0000 dyld3::MachOLoaded::forEachGlobalSymbol(Diagnostics&, void (char const*, unsigned long long, unsigned char, unsigned char, unsigned short, bool&) block_pointer) const
[  157]    157     Code            0x0000000000008790 0x0000000102c30790 0x00000000000000c4 0x001e0000 dyld4::APIs::getSdkVersion(mach_header const*)
[  158]    158     Code            0x0000000000008854 0x0000000102c30854 0x0000000000000014 0x001e0000 dyld4::SyscallDelegate::dtraceUserProbesEnabled() const
[  159]    159     Code            0x0000000000008868 0x0000000102c30868 0x0000000000000004 0x001e0000 strlcpy
[  160]    160     Code            0x000000000000886c 0x0000000102c3086c 0x00000000000000b8 0x000e0000 invocation function for block in dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&) const
[  161]    161     Code            0x0000000000008924 0x0000000102c30924 0x0000000000000020 0x001e0000 dyld3::MachOFile::pointerSize() const
[  162]    162     Code            0x0000000000008944 0x0000000102c30944 0x0000000000000388 0x001e0000 dyld3::MachOAnalyzer::forEachChainedFixupTarget(Diagnostics&, void (int, char const*, unsigned long long, bool, bool&) block_pointer) const
[  163]    163     Code            0x0000000000008ccc 0x0000000102c30ccc 0x0000000000000080 0x001e0000 dyld4::SyscallDelegate::fileExists(char const*, dyld4::FileID*, bool*) const
[  164]    164     Code            0x0000000000008d4c 0x0000000102c30d4c 0x00000000000000a0 0x001e0080 dyld4::ObjCStringTable::getIndex(char const*) const
[  165]    165     Code            0x0000000000008dec 0x0000000102c30dec 0x0000000000000010 0x001e0000 Diagnostics::hasError() const
[  166]    166     Code            0x0000000000008dfc 0x0000000102c30dfc 0x0000000000000298 0x001e0000 dyld4::PrebuiltObjC::forEachSelectorReferenceToUnique(dyld4::RuntimeState&, dyld3::MachOAnalyzer const*, unsigned long long, dyld4::ObjCBinaryInfo const&, dyld3::MachOAnalyzer::VMAddrConverter const&, void (unsigned long long, unsigned long long) block_pointer)
[  167]    167     Code            0x0000000000009094 0x0000000102c31094 0x000000000000001c 0x001e0000 dyld4::PrebuiltLoader::getExportsTrie(unsigned long long&, unsigned int&) const
[  168]    168     Code            0x00000000000090b0 0x0000000102c310b0 0x0000000000000490 0x001e0000 dyld4::Loader::hasExportedSymbol(Diagnostics&, dyld4::RuntimeState&, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array<dyld4::Loader const*>*) const
[  169]    169     Code            0x0000000000009540 0x0000000102c31540 0x00000000000000a0 0x001e0000 dyld3::MachOAnalyzer::VMAddrConverter::convertToVMAddr(unsigned long long) const
[  170]    170     Code            0x00000000000095e0 0x0000000102c315e0 0x00000000000000dc 0x001e0000 dyld4::notifyMonitoringDyldMain()
[  171]    171     Code            0x00000000000096bc 0x0000000102c316bc 0x0000000000000348 0x001e0000 dyld4::APIs::findImageMappedAt(void const*, dyld3::MachOLoaded const**, bool*, char const**, void const**, unsigned long long*, unsigned char*)
[  172]    172     Code            0x0000000000009a04 0x0000000102c31a04 0x000000000000007c 0x001e0000 dyld4::APIs::_dyld_get_image_uuid(mach_header const*, unsigned char*)
[  173]    173     Code            0x0000000000009a80 0x0000000102c31a80 0x000000000000007c 0x001e0000 dyld4::Loader::hiddenFromFlat(bool) const
[  174]    174     Code            0x0000000000009afc 0x0000000102c31afc 0x0000000000000394 0x001e0000 dyld4::APIs::dlopen_from(char const*, int, void*)
[  175]    175     Code            0x0000000000009e90 0x0000000102c31e90 0x0000000000000010 0x001e0000 dyld4::SyscallDelegate::mprotect(void*, unsigned long, int) const
[  176]    176     Code            0x0000000000009ea0 0x0000000102c31ea0 0x00000000000000f0 0x001e0000 dyld3::MachOFile::forEachSegment(void (dyld3::MachOFile::SegmentInfo const&, bool&) block_pointer) const
[  177]    177     Code            0x0000000000009f90 0x0000000102c31f90 0x0000000000000090 0x000e0000 invocation function for block in dyld4::APIs::_dyld_for_each_objc_protocol(char const*, void (void*, bool, bool*) block_pointer)
[  178]    178     Code            0x000000000000a020 0x0000000102c32020 0x0000000000000024 0x001e0000 cerror_nocancel
[  179]    179     Code            0x000000000000a044 0x0000000102c32044 0x0000000000000034 0x001e0000 dyld3::MachOAnalyzer::chainStartsOffset() const
[  180]    180     Code            0x000000000000a078 0x0000000102c32078 0x00000000000000d8 0x001e0080 dyld4::Vector<dyld4::RuntimeState::TLV_Info>::reserve(unsigned long)
[  181]    181     Code            0x000000000000a150 0x0000000102c32150 0x0000000000000040 0x001e0000 vm_allocate
[  182]    182     Code            0x000000000000a190 0x0000000102c32190 0x0000000000000200 0x001e0000 dyld3::MachOFile::forEachDependentDylib(void (char const*, bool, bool, bool, unsigned int, unsigned int, bool&) block_pointer) const
[  183]    183     Code            0x000000000000a390 0x0000000102c32390 0x0000000000000084 0x001e0000 dyld4::APIs::_dyld_get_shared_cache_uuid(unsigned char*)
[  184]    184     Code            0x000000000000a414 0x0000000102c32414 0x0000000000000098 0x001e0000 dyld4::APIs::_dyld_get_image_slide(mach_header const*)
[  185]    185     Code            0x000000000000a4ac 0x0000000102c324ac 0x00000000000000f0 0x001e0000 dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&, dyld3::Array<dyld4::Loader const*>&) const
[  186]    186     Code            0x000000000000a59c 0x0000000102c3259c 0x00000000000000d8 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::forEachThreadLocalVariable(Diagnostics&, void (dyld3::MachOAnalyzer::TLV_Thunk&) block_pointer) const
[  187]    187     Code            0x000000000000a674 0x0000000102c32674 0x0000000000000034 0x001e0000 Diagnostics::~Diagnostics()
[  188]    188     Code            0x000000000000a6a8 0x0000000102c326a8 0x0000000000000018 0x000e0000 invocation function for block in dyld4::PrebuiltObjC::forEachSelectorReferenceToUnique(dyld4::RuntimeState&, dyld3::MachOAnalyzer const*, unsigned long long, dyld4::ObjCBinaryInfo const&, dyld3::MachOAnalyzer::VMAddrConverter const&, void (unsigned long long, unsigned long long) block_pointer)
[  189]    189     Code            0x000000000000a6c0 0x0000000102c326c0 0x0000000000000098 0x001e0000 dyld4::PrebuiltLoader::BindTargetRef::value(dyld4::RuntimeState&) const
[  190]    190     Code            0x000000000000a758 0x0000000102c32758 0x00000000000000a4 0x001e0000 dyld4::APIs::_dyld_objc_notify_register(void (*)(unsigned int, char const* const*, mach_header const* const*), void (*)(char const*, mach_header const*), void (*)(char const*, mach_header const*))
[  191]    191     Code            0x000000000000a7fc 0x0000000102c327fc 0x00000000000000f8 0x001e0080 dyld3::OverflowSafeArray<dyld4::PrebuiltLoader::BindTargetRef, 4294967295ul>::push_back(dyld4::PrebuiltLoader::BindTargetRef const&)
[  192]    192     Code            0x000000000000a8f4 0x0000000102c328f4 0x00000000000000d8 0x001e0000 dyld4::APIs::_dyld_get_image_header(unsigned int)
[  193]    193     Code            0x000000000000a9cc 0x0000000102c329cc 0x00000000000002ec 0x001e0000 dyld4::SyscallDelegate::mapFileReadOnly(Diagnostics&, char const*, unsigned long*, dyld4::FileID*, bool*, char*) const
[  194]    194     Code            0x000000000000acb8 0x0000000102c32cb8 0x00000000000000cc 0x000e0000 invocation function for block in dyld4::APIs::dlsym(void*, char const*)
[  195]    195     Code            0x000000000000ad84 0x0000000102c32d84 0x0000000000000014 0x001e0000 dyld4::JustInTimeLoader::path() const
[  196]    196     Code            0x000000000000ad98 0x0000000102c32d98 0x00000000000003ec 0x000e0000 invocation function for block in dyld4::RuntimeState::notifyLoad(dyld3::Array<dyld4::Loader const*> const&)
[  197]    197     Code            0x000000000000b184 0x0000000102c33184 0x0000000000000048 0x001e0000 dyld4::APIs::_dyld_get_prog_image_header()
[  198]    198     Code            0x000000000000b1cc 0x0000000102c331cc 0x0000000000000010 0x001e0000 Diagnostics::noError() const
[  199]    199     Code            0x000000000000b1dc 0x0000000102c331dc 0x00000000000000ec 0x001e0000 dyld4::RuntimeState::initialize()
[  200]    200     Code            0x000000000000b2c8 0x0000000102c332c8 0x00000000000001b4 0x001e0000 dyld4::PrebuiltLoaderSet::logDuplicateObjCClasses(dyld4::RuntimeState&) const
[  201]    201     Code            0x000000000000b47c 0x0000000102c3347c 0x0000000000000398 0x001e0000 dyld4::ProcessConfig::PathOverrides::forEachPathVariant(char const*, dyld3::Platform, bool, bool&, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&) block_pointer) const
[  202]    202     Code            0x000000000000b814 0x0000000102c33814 0x0000000000000058 0x000e0000 invocation function for block in dyld4::RuntimeState::setUpTLVs(dyld3::MachOAnalyzer const*)
[  203]    203     Code            0x000000000000b86c 0x0000000102c3386c 0x0000000000000124 0x001e0000 objc::PerfectHash::make_perfect(dyld3::OverflowSafeArray<char const*, 4294967295ul> const&, objc::PerfectHash&)
[  204]    204     Code            0x000000000000b990 0x0000000102c33990 0x00000000000000d8 0x001e0000 dyld4::APIs::forEachImageVersion(mach_header const*, void (unsigned int, unsigned int, unsigned int) block_pointer)
[  205]    205     Code            0x000000000000ba68 0x0000000102c33a68 0x00000000000000f4 0x000e0000 invocation function for block in dyld4::APIs::_dyld_register_func_for_add_image(void (*)(mach_header const*, long))
[  206]    206     Code            0x000000000000bb5c 0x0000000102c33b5c 0x0000000000000114 0x001e0000 dyld3::MachOAnalyzer::forEachObjCSelectorReference(unsigned long long, unsigned long long, dyld3::MachOAnalyzer::VMAddrConverter const&, void (unsigned long long, unsigned long long, bool&) block_pointer) const
[  207]    207     Code            0x000000000000bc70 0x0000000102c33c70 0x00000000000000d8 0x001e0000 dyld4::Reaper::garbageCollect()
[  208]    208     Code            0x000000000000bd48 0x0000000102c33d48 0x0000000000000248 0x001e0080 std::__1::__murmur2_or_cityhash<unsigned long, 64ul>::operator()(void const*, unsigned long)
[  209]    209     Code            0x000000000000bf90 0x0000000102c33f90 0x00000000000000b8 0x000e0000 invocation function for block in dyld4::APIs::findImageContaining(void*)
[  210]    210     Code            0x000000000000c048 0x0000000102c34048 0x0000000000000080 0x001e0000 dyld4::APIs::dyld_image_path_containing_address(void const*)
[  211]    211     Code            0x000000000000c0c8 0x0000000102c340c8 0x0000000000000224 0x001e0000 dyld4::PrebuiltLoader::map(Diagnostics&, dyld4::RuntimeState&, dyld4::Loader::LoadOptions const&) const
[  212]    212     Code            0x000000000000c2ec 0x0000000102c342ec 0x0000000000000400 0x001e0000 dyld4::PrebuiltLoader::applyFixups(Diagnostics&, dyld4::RuntimeState&, dyld4::DyldCacheDataConstLazyScopedWriter&, bool) const
[  213]    213     Code            0x000000000000c6ec 0x0000000102c346ec 0x0000000000000064 0x001e0000 dyld4::PrebuiltLoader::matchesPath(char const*) const
[  214]    214     Code            0x000000000000c750 0x0000000102c34750 0x0000000000000c3c 0x001e0000 dyld4::PrebuiltObjC::make(Diagnostics&, dyld4::RuntimeState&)
[  215]    215     Code            0x000000000000d38c 0x0000000102c3538c 0x000000000000005c 0x000e0000 invocation function for block in dyld3::MachOFile::preferredLoadAddress() const
[  216]    216     Code            0x000000000000d3e8 0x0000000102c353e8 0x00000000000000f4 0x001e0000 dyld4::RuntimeState::rebindMissingFlatLazySymbols(dyld3::Array<dyld4::Loader const*> const&)
[  217]    217     Code            0x000000000000d4dc 0x0000000102c354dc 0x0000000000000050 0x000e0000 invocation function for block in dyld4::Loader::applyFixupsGeneric(Diagnostics&, dyld4::RuntimeState&, dyld3::Array<void const*> const&, dyld3::Array<void const*> const&, bool, dyld3::Array<dyld4::Loader::MissingFlatLazySymbol> const&) const
[  218]    218     Code            0x000000000000d52c 0x0000000102c3552c 0x00000000000000d0 0x001e0000 dyld4::RuntimeState::withNotifiersReadLock(void () block_pointer)
[  219]    219     Code            0x000000000000d5fc 0x0000000102c355fc 0x0000000000000060 0x001e0000 dyld3::stat(char const*, stat*)
[  220]    220     Code            0x000000000000d65c 0x0000000102c3565c 0x0000000000000068 0x001e0000 dyld4::Allocator::malloc(unsigned long)
[  221]    221     Code            0x000000000000d6c4 0x0000000102c356c4 0x0000000000000120 0x001e0000 dyld4::APIs::_dyld_register_for_bulk_image_loads(void (*)(unsigned int, mach_header const**, char const**))
[  222]    222     Code            0x000000000000d7e4 0x0000000102c357e4 0x0000000000000080 0x000e0000 invocation function for block in dyld4::APIs::_dyld_is_memory_immutable(void const*, unsigned long)
[  223]    223     Code            0x000000000000d864 0x0000000102c35864 0x0000000000000250 0x000e0000 invocation function for block in dyld4::JustInTimeLoader::makeJustInTimeLoaderDisk(Diagnostics&, dyld4::RuntimeState&, char const*, dyld4::Loader::LoadOptions const&, bool, unsigned int)
[  224]    224     Code            0x000000000000dab4 0x0000000102c35ab4 0x00000000000000e8 0x001e0000 dyld4::APIs::_dyld_get_image_name(unsigned int)
[  225]    225     Code            0x000000000000db9c 0x0000000102c35b9c 0x0000000000000128 0x001e0000 dyld4::APIs::_dyld_images_for_addresses(unsigned int, void const**, dyld_image_uuid_offset*)
[  226]    226     Code            0x000000000000dcc4 0x0000000102c35cc4 0x00000000000000a4 0x001e0000 dyld3::MachOAnalyzer::hasObjC() const
[  227]    227     Code            0x000000000000dd68 0x0000000102c35d68 0x0000000000000330 0x001e0000 dyld4::PrebuiltLoader::isValid(dyld4::RuntimeState const&) const
[  228]    228     Code            0x000000000000e098 0x0000000102c36098 0x00000000000002d8 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::forEachIndirectPointer(Diagnostics&, bool, void (unsigned long long, bool, int, char const*, bool, bool, bool, bool&) block_pointer) const
[  229]    229     Code            0x000000000000e370 0x0000000102c36370 0x00000000000000e4 0x001e0000 dyld3::MachOFile::getDylibInstallName(char const**, unsigned int*, unsigned int*) const
[  230]    230     Code            0x000000000000e454 0x0000000102c36454 0x00000000000000c4 0x001e0000 dyld3::MachOFile::isMachO(Diagnostics&, unsigned long long) const
[  231]    231     Code            0x000000000000e518 0x0000000102c36518 0x0000000000000018 0x001e0000 dyld4::JustInTimeLoader::hiddenFromFlat(bool) const
[  232]    232     Code            0x000000000000e530 0x0000000102c36530 0x0000000000000084 0x001e0000 dyld3::MachOLoaded::fixupAllChainedFixups(Diagnostics&, dyld_chained_starts_in_image const*, unsigned long, dyld3::Array<void const*>, void (void*, void*) block_pointer) const
[  233]    233     Code            0x000000000000e5b4 0x0000000102c365b4 0x00000000000002ac 0x001e0000 dyld3::MachOAnalyzer::forEachObjCMethod(unsigned long long, dyld3::MachOAnalyzer::VMAddrConverter const&, unsigned long long, void (unsigned long long, dyld3::MachOAnalyzer::ObjCMethod const&, bool&) block_pointer) const
[  234]    234     Code            0x000000000000e860 0x0000000102c36860 0x0000000000000234 0x000e0000 _pthread_terminate
[  235]    235     Code            0x000000000000ea94 0x0000000102c36a94 0x0000000000000004 0x001e0000 dyld4::Loader::InitialOptions::InitialOptions(dyld4::Loader const&)
[  236]    236     Code            0x000000000000ea98 0x0000000102c36a98 0x0000000000000034 0x001e0000 open
[  237]    237     Code            0x000000000000eacc 0x0000000102c36acc 0x0000000000000070 0x001e0000 dyld4::JustInTimeLoader::matchesPath(char const*) const
[  238]    238     Code            0x000000000000eb3c 0x0000000102c36b3c 0x000000000000000c 0x001e0000 dyld3::MachOFile::inDyldCache() const
[  239]    239     Code            0x000000000000eb48 0x0000000102c36b48 0x0000000000000008 0x001e0000 dyld4::PrebuiltLoader::dependentCount() const
[  240]    240     Code            0x000000000000eb50 0x0000000102c36b50 0x000000000000002c 0x001e0000 __open
[  241]    241     Code            0x000000000000eb7c 0x0000000102c36b7c 0x00000000000000c8 0x001e0000 dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&) const
[  242]    242     Code            0x000000000000ec44 0x0000000102c36c44 0x00000000000000b4 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::objcImageInfo() const
[  243]    243     Code            0x000000000000ecf8 0x0000000102c36cf8 0x0000000000000088 0x001e0000 dyld4::Loader::makeSegmentsReadOnly(dyld4::RuntimeState&) const
[  244]    244     Code            0x000000000000ed80 0x0000000102c36d80 0x0000000000000110 0x001e0000 open_with_subsystem
[  245]    245     Code            0x000000000000ee90 0x0000000102c36e90 0x00000000000000c8 0x001e0080 unsigned int SwiftHashTable::getIndex<SwiftMetadataProtocolConformanceLocationKey, SwiftMetadataProtocolConformanceLocationKey>(SwiftMetadataProtocolConformanceLocationKey const&, unsigned char const*) const
[  246]    246     Code            0x000000000000ef58 0x0000000102c36f58 0x0000000000000378 0x001e0000 dyld3::MachOFile::compatibleSlice(Diagnostics&, void const*, unsigned long, char const*, dyld3::Platform, bool, dyld3::GradedArchs const&)
[  247]    247     Code            0x000000000000f2d0 0x0000000102c372d0 0x000000000000000c 0x001e0000 dyld3::MachOFile::hasThreadLocalVariables() const
[  248]    248     Code            0x000000000000f2dc 0x0000000102c372dc 0x00000000000006cc 0x000e0000 invocation function for block in dyld4::Loader::getLoader(Diagnostics&, dyld4::RuntimeState&, char const*, dyld4::Loader::LoadOptions const&)
[  249]    249     Code            0x000000000000f9a8 0x0000000102c379a8 0x0000000000000014 0x001e0000 unsigned char SwiftHashTable::checkbyte<SwiftTypeProtocolConformanceLocationKey>(SwiftTypeProtocolConformanceLocationKey const&, unsigned char const*) const
[  250]    250     Code            0x000000000000f9bc 0x0000000102c379bc 0x0000000000000568 0x001e0000 dyld4::Loader::getLoader(Diagnostics&, dyld4::RuntimeState&, char const*, dyld4::Loader::LoadOptions const&)
[  251]    251     Code            0x000000000000ff24 0x0000000102c37f24 0x00000000000000bc 0x000e0000 invocation function for block in dyld3::MachOLoaded::findSectionContent(char const*, char const*, unsigned long long&, bool) const
[  252]    252     Code            0x000000000000ffe0 0x0000000102c37fe0 0x0000000000000038 0x001e0000 dyld4::SyscallDelegate::fsgetpath(char*, unsigned long, unsigned long long, unsigned long long) const
[  253]    253     Code            0x0000000000010018 0x0000000102c38018 0x000000000000011c 0x001e0000 dyld3::MachOLoaded::getLinkEditLoadCommands(Diagnostics&, dyld3::MachOLoaded::LinkEditInfo&) const
[  254]    254     Code            0x0000000000010134 0x0000000102c38134 0x000000000000008c 0x001e0000 dyld3::open(char const*, int, int)
[  255]    255     Code            0x00000000000101c0 0x0000000102c381c0 0x00000000000000a0 0x001e0000 dyld3::MachOAnalyzer::forEachRPath(void (char const*, bool&) block_pointer) const
[  256]    256     Code            0x0000000000010260 0x0000000102c38260 0x0000000000000064 0x001e0000 dyld4::PrebuiltLoaderSet::findLoader(char const*) const
[  257]    257     Code            0x00000000000102c4 0x0000000102c382c4 0x0000000000000064 0x001e0000 dyld4::RuntimeState::decWritable()
[  258]    258     Code            0x0000000000010328 0x0000000102c38328 0x00000000000000c0 0x000e0000 invocation function for block in dyld4::optimizeObjCSelectors(dyld4::RuntimeState&, objc::SelectorHashTable const*, dyld3::Map<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString> const&, dyld4::PrebuiltObjC::ObjCOptimizerImage&)
[  259]    259     Code            0x00000000000103e8 0x0000000102c383e8 0x00000000000000d4 0x000e0000 dyld4::nameMatch(char const*, char const*)
[  260]    260     Code            0x00000000000104bc 0x0000000102c384bc 0x00000000000000d8 0x001e0000 dyld3::MachOLoaded::dependentDylibCount(bool*) const
[  261]    261     Code            0x0000000000010594 0x0000000102c38594 0x00000000000000ac 0x001e0000 dyld4::Loader::logLoad(dyld4::RuntimeState&, dyld3::MachOLoaded const*, char const*)
[  262]    262     Code            0x0000000000010640 0x0000000102c38640 0x0000000000000030 0x001e0000 Diagnostics::clearError()
[  263]    263     Code            0x0000000000010670 0x0000000102c38670 0x00000000000000c0 0x001e0080 std::__1::__murmur2_or_cityhash<unsigned long, 64ul>::__hash_len_33_to_64(char const*, unsigned long)
[  264]    264     Code            0x0000000000010730 0x0000000102c38730 0x0000000000000148 0x001e0000 dyld4::Loader::runInitializersBottomUpPlusUpwardLinks(dyld4::RuntimeState&) const
[  265]    265     Code            0x0000000000010878 0x0000000102c38878 0x000000000000006c 0x001e0000 dyld4::APIs::bootstrap(dyld4::ProcessConfig const&, dyld4::RuntimeLocks&)
[  266]    266     Code            0x00000000000108e4 0x0000000102c388e4 0x00000000000000d4 0x000e0000 invocation function for block in dyld4::JustInTimeLoader::forEachBindTarget(Diagnostics&, dyld4::RuntimeState&, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&, bool&) block_pointer, void (dyld4::Loader::ResolvedSymbol const&, bool&) block_pointer) const
[  267]    267     Code            0x00000000000109b8 0x0000000102c389b8 0x0000000000000068 0x001e0000 dyld4::Loader::matchesPath(char const*) const
[  268]    268     Code            0x0000000000010a20 0x0000000102c38a20 0x0000000000001480 0x001e0000 AccelerateCrypto_SHA512_compress
[  269]    269     Code            0x0000000000011ea0 0x0000000102c39ea0 0x0000000000000064 0x001e0000 dyld4::APIs::_dyld_shared_cache_real_path(char const*)
[  270]    270     Code            0x0000000000011f04 0x0000000102c39f04 0x0000000000000260 0x001e0000 dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&, dyld3::MachOAnalyzer::VMAddrConverter const&, void (unsigned int) block_pointer, void const*) const
[  271]    271     Code            0x0000000000012164 0x0000000102c3a164 0x000000000000002c 0x001e0000 __proc_info
[  272]    272     Code            0x0000000000012190 0x0000000102c3a190 0x00000000000000d8 0x001e0080 dyld3::OverflowSafeArray<unsigned long, 4294967295ul>::reserve(unsigned long)
[  273]    273     Code            0x0000000000012268 0x0000000102c3a268 0x00000000000005b0 0x001e0000 dyld4::Loader::resolveSymbol(Diagnostics&, dyld4::RuntimeState&, int, char const*, bool, bool, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&) block_pointer, bool) const
[  274]    274     Code            0x0000000000012818 0x0000000102c3a818 0x000000000000002c 0x001e0000 dyld4::SyscallDelegate::fcntl(int, int, void*) const
[  275]    275     Code            0x0000000000012844 0x0000000102c3a844 0x00000000000000ac 0x001e0000 dyld4::PrebuiltLoader::invalidateShallow(dyld4::RuntimeState const&) const
[  276]    276     Code            0x00000000000128f0 0x0000000102c3a8f0 0x00000000000000a0 0x001e0000 DyldSharedCache::findMachHeaderImageIndex(mach_header const*, unsigned int&) const
[  277]    277     Code            0x0000000000012990 0x0000000102c3a990 0x0000000000000038 0x001e0000 mach_init
[  278]    278     Code            0x00000000000129c8 0x0000000102c3a9c8 0x000000000000000c 0x001e0000 dyld3::MachOFile::maskedCpuSubtype() const
[  279]    279     Code            0x00000000000129d4 0x0000000102c3a9d4 0x0000000000000234 0x000e0000 invocation function for block in dyld3::MachOFile::forEachSegment(void (dyld3::MachOFile::SegmentInfo const&, bool&) block_pointer) const
[  280]    280     Code            0x0000000000012c08 0x0000000102c3ac08 0x0000000000000198 0x000e0000 invocation function for block in dyld4::APIs::_dyld_register_for_bulk_image_loads(void (*)(unsigned int, mach_header const**, char const**))
[  281]    281     Code            0x0000000000012da0 0x0000000102c3ada0 0x0000000000000004 0x001e0000 dyld4::ProcessConfig::fileExists(char const*, dyld4::FileID*, bool*) const
[  282]    282     Code            0x0000000000012da4 0x0000000102c3ada4 0x000000000000002c 0x001e0000 __mmap
[  283]    283     Code            0x0000000000012dd0 0x0000000102c3add0 0x000000000000001c 0x001e0000 dyld4::SyscallDelegate::mmap(void*, unsigned long, int, int, int, unsigned long) const
[  284]    284     Code            0x0000000000012dec 0x0000000102c3adec 0x00000000000000e8 0x000e0000 invocation function for block in dyld4::ProcessConfig::PathOverrides::forEachPathVariant(char const*, dyld3::Platform, bool, bool&, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&) block_pointer) const
[  285]    285     Code            0x0000000000012ed4 0x0000000102c3aed4 0x0000000000000184 0x001e0000 dyld3::MachOAnalyzer::hasInitializer(Diagnostics&) const
[  286]    286     Code            0x0000000000013058 0x0000000102c3b058 0x0000000000000064 0x001e0000 dyld4::RuntimeState::incWritable()
[  287]    287     Code            0x00000000000130bc 0x0000000102c3b0bc 0x000000000000002c 0x001e0000 __fcntl
[  288]    288     Code            0x00000000000130e8 0x0000000102c3b0e8 0x0000000000000050 0x001e0000 dyld3::MachOFile::archName() const
[  289]    289     Code            0x0000000000013138 0x0000000102c3b138 0x000000000000015c 0x001e0000 dyld4::JustInTimeLoader::makeJustInTimeLoaderDyldCache(Diagnostics&, dyld4::RuntimeState&, char const*, dyld4::Loader::LoadOptions const&, unsigned int)
[  290]    290     Code            0x0000000000013294 0x0000000102c3b294 0x0000000000000034 0x001e0000 dyld3::MachOAnalyzer::mappedSize() const
[  291]    291     Code            0x00000000000132c8 0x0000000102c3b2c8 0x00000000000001c0 0x001e0000 dyld4::PrebuiltLoader::loadDependents(Diagnostics&, dyld4::RuntimeState&, dyld4::Loader::LoadOptions const&)
[  292]    292     Code            0x0000000000013488 0x0000000102c3b488 0x0000000000000064 0x000e0000 invocation function for block in dyld4::APIs::_dyld_visit_objc_classes(void (void const*) block_pointer)
[  293]    293     Code            0x00000000000134ec 0x0000000102c3b4ec 0x0000000000000004 0x001e0000 dyld4::JustInTimeLoader::runInitializers(dyld4::RuntimeState&) const
[  294]    294     Code            0x00000000000134f0 0x0000000102c3b4f0 0x00000000000000b0 0x000e0000 invocation function for block in dyld4::PrebuiltLoader::applyObjCFixups(dyld4::RuntimeState&) const
[  295]    295     Code            0x00000000000135a0 0x0000000102c3b5a0 0x00000000000000a4 0x001e0000 dyld3::MachOAnalyzer::hasObjCMessageReferences() const
[  296]    296     Code            0x0000000000013644 0x0000000102c3b644 0x000000000000006c 0x001e0000 dyld4::Allocator::writeProtect(bool) const
[  297]    297     Code            0x00000000000136b0 0x0000000102c3b6b0 0x0000000000000150 0x001e0000 dyld4::SyscallDelegate::realpath(char const*, char*) const
[  298]    298     Code            0x0000000000013800 0x0000000102c3b800 0x0000000000000038 0x001e0000 dyld4::RuntimeState::setAppLoadAddress(unsigned short, dyld3::MachOLoaded const*)
[  299]    299     Code            0x0000000000013838 0x0000000102c3b838 0x0000000000000148 0x001e0080 dyld3::Map<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString>::Map()
[  300]    300     Code            0x0000000000013980 0x0000000102c3b980 0x0000000000000150 0x001e0080 dyld4::RemoteNotificationResponder::sendMessage(int, unsigned int, mach_msg_header_t*)
[  301]    301     Code            0x0000000000013ad0 0x0000000102c3bad0 0x0000000000000018 0x001e0000 dyld3::MachOAnalyzer::objcMethodListIsRelative(unsigned long long) const
[  302]    302     Code            0x0000000000013ae8 0x0000000102c3bae8 0x000000000000040c 0x000e0000 dyld4::writeClassOrProtocolHashTable(dyld4::RuntimeState&, bool, dyld3::Array<dyld4::PrebuiltObjC::ObjCOptimizerImage>&, dyld3::OverflowSafeArray<unsigned char, 4294967295ul>&, dyld3::Map<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString> const&)
[  303]    303     Code            0x0000000000013ef4 0x0000000102c3bef4 0x00000000000000e8 0x001e0000 dyld4::ProcessConfig::PathOverrides::setString(dyld4::ProcessConfig::Process const&, char const*&, char const*)
[  304]    304     Code            0x0000000000013fdc 0x0000000102c3bfdc 0x000000000000002c 0x001e0000 __sandbox_ms
[  305]    305     Code            0x0000000000013fdc 0x0000000102c3bfdc 0x000000000000002c 0x001e0000 __mac_syscall
[  306]    306     Code            0x0000000000014008 0x0000000102c3c008 0x0000000000000060 0x000e0000 invocation function for block in dyld4::RuntimeState::_instantiateTLVs(unsigned long)
[  307]    307     Code            0x0000000000014068 0x0000000102c3c068 0x0000000000000160 0x001e0000 dyld4::Allocator::returnSpace(dyld4::Allocator::Buffer, bool, bool)
[  308]    308     Code            0x00000000000141c8 0x0000000102c3c1c8 0x0000000000000028 0x000e0000 dyld3::Map<char const*, dyld4::WeakDefMapValue, dyld3::HashCString, dyld3::EqualCString>::find(char const* const&) (.cold.2)
[  309]    309     Code            0x00000000000141f0 0x0000000102c3c1f0 0x000000000000002c 0x001e0000 fsgetpath
[  310]    310     Code            0x000000000001421c 0x0000000102c3c21c 0x00000000000001a8 0x001e0000 dyld3::MachOLoaded::walkChain(Diagnostics&, dyld3::MachOLoaded::ChainedFixupPointerOnDisk*, unsigned short, bool, unsigned int, void (dyld3::MachOLoaded::ChainedFixupPointerOnDisk*, bool&) block_pointer) const
[  311]    311     Code            0x00000000000143c4 0x0000000102c3c3c4 0x00000000000000cc 0x001e0000 dyld4::APIs::_dyld_launch_mode()
[  312]    312     Code            0x0000000000014490 0x0000000102c3c490 0x0000000000000400 0x001e0000 dyld4::JustInTimeLoader::applyFixups(Diagnostics&, dyld4::RuntimeState&, dyld4::DyldCacheDataConstLazyScopedWriter&, bool) const
[  313]    313     Code            0x0000000000014890 0x0000000102c3c890 0x00000000000000ec 0x001e0000 dyld3::MachOFile::loadableIntoProcess(dyld3::Platform, char const*) const
[  314]    314     Code            0x000000000001497c 0x0000000102c3c97c 0x0000000000000188 0x001e0000 dyld4::APIs::setErrorString(char const*, ...)
[  315]    315     Code            0x0000000000014b04 0x0000000102c3cb04 0x00000000000000f4 0x001e0000 dyld3::MachOAnalyzer::inCodeSection(unsigned int) const
[  316]    316     Code            0x0000000000014bf8 0x0000000102c3cbf8 0x00000000000002c8 0x001e0000 dyld4::Loader::applyFixupsGeneric(Diagnostics&, dyld4::RuntimeState&, dyld3::Array<void const*> const&, dyld3::Array<void const*> const&, bool, dyld3::Array<dyld4::Loader::MissingFlatLazySymbol> const&) const
[  317]    317     Code            0x0000000000014ec0 0x0000000102c3cec0 0x0000000000000080 0x001e0000 dyld4::RuntimeState::addNotifyBulkLoadImage(dyld4::Loader const*, void (*)(unsigned int, mach_header const**, char const**))
[  318]    318     Code            0x0000000000014f40 0x0000000102c3cf40 0x00000000000000c8 0x001e0000 dyld3::MachOFile::forEachSupportedPlatform(void (dyld3::Platform, unsigned int, unsigned int) block_pointer) const
[  319]    319     Code            0x0000000000015008 0x0000000102c3d008 0x000000000000015c 0x001e0000 dyld4::ProcessConfig::PathOverrides::forEachInColonList(char const*, char const*, void (char const*, bool&) block_pointer)
[  320]    320     Code            0x0000000000015164 0x0000000102c3d164 0x00000000000000e8 0x001e0000 stat_with_subsystem
[  321]    321     Code            0x000000000001524c 0x0000000102c3d24c 0x0000000000000194 0x001e0080 objc::ObjectHashTable::forEachObject(void (unsigned int, char const*, dyld3::Array<unsigned long long> const&) block_pointer) const
[  322]    322     Code            0x00000000000153e0 0x0000000102c3d3e0 0x00000000000000f0 0x000e0000 invocation function for block in dyld4::SyscallDelegate::getDylibInfo(char const*, dyld3::Platform, dyld3::GradedArchs const&, unsigned int&, char*) const
[  323]    323     Code            0x00000000000154d0 0x0000000102c3d4d0 0x00000000000000c0 0x001e0080 dyld4::Vector<void (*)(unsigned int, mach_header const**, char const**)>::reserve(unsigned long)
[  324]    324     Code            0x0000000000015590 0x0000000102c3d590 0x00000000000000bc 0x001e0000 dyld3::MachOAnalyzer::getEntry(unsigned long long&, bool&) const
[  325]    325     Code            0x000000000001564c 0x0000000102c3d64c 0x0000000000000438 0x001e0000 dyld4::PrebuiltLoader::applyObjCFixups(dyld4::RuntimeState&) const
[  326]    326     Code            0x0000000000015a84 0x0000000102c3da84 0x000000000000007c 0x000e0000 invocation function for block in dyld4::Loader::makeSegmentsReadOnly(dyld4::RuntimeState&) const
[  327]    327     Code            0x0000000000015b00 0x0000000102c3db00 0x00000000000000a4 0x001e0000 dyld4::RuntimeState::setObjCNotifiers(void (*)(unsigned int, char const* const*, mach_header const* const*), void (*)(char const*, mach_header const*), void (*)(char const*, mach_header const*))
[  328]    328     Code            0x0000000000015ba4 0x0000000102c3dba4 0x0000000000000008 0x001e0000 dyld4::APIs::_libdyld_initialize(dyld4::LibSystemHelpers const*)
[  329]    329     Code            0x0000000000015bac 0x0000000102c3dbac 0x000000000000015c 0x000e0000 invocation function for block in dyld4::Loader::forEachPath(Diagnostics&, dyld4::RuntimeState&, char const*, dyld4::Loader::LoadOptions const&, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&) block_pointer)
[  330]    330     Code            0x0000000000015d08 0x0000000102c3dd08 0x0000000000000670 0x001e0000 dyld3::loadDyldCache(dyld3::SharedCacheOptions const&, dyld3::SharedCacheLoadInfo*)
[  331]    331     Code            0x0000000000016378 0x0000000102c3e378 0x00000000000000b8 0x001e0000 dyld4::Loader::makeDyldCacheLoader(Diagnostics&, dyld4::RuntimeState&, char const*, dyld4::Loader::LoadOptions const&, unsigned int)
[  332]    332     Code            0x0000000000016430 0x0000000102c3e430 0x0000000000000124 0x000e0000 invocation function for block in dyld4::PrebuiltLoader::invalidateInIsolation(dyld4::RuntimeState const&) const
[  333]    333     Code            0x0000000000016554 0x0000000102c3e554 0x0000000000000104 0x001e0000 dyld4::APIs::mapFromVersionSet(dyld_build_version_t)
[  334]    334     Code            0x0000000000016658 0x0000000102c3e658 0x00000000000000e0 0x001e0080 dyld3::OverflowSafeArray<dyld4::RuntimeState::HiddenCacheAddr, 4294967295ul>::push_back(dyld4::RuntimeState::HiddenCacheAddr const&)
[  335]    335     Code            0x0000000000016738 0x0000000102c3e738 0x0000000000000090 0x001e0000 dyld4::SyscallDelegate::getDyldCache(dyld3::SharedCacheOptions const&, dyld3::SharedCacheLoadInfo&) const
[  336]    336     Code            0x00000000000167c8 0x0000000102c3e7c8 0x00000000000000f0 0x001e0080 dyld4::Vector<dyld4::Loader const*>::reserve(unsigned long)
[  337]    337     Code            0x00000000000168b8 0x0000000102c3e8b8 0x00000000000000ec 0x001e0000 dyld4::APIs::NSVersionOfLinkTimeLibrary(char const*)
[  338]    338     Code            0x00000000000169a4 0x0000000102c3e9a4 0x00000000000001d4 0x001e0000 dyld4::RuntimeState::setUpLogging()
[  339]    339     Code            0x0000000000016b78 0x0000000102c3eb78 0x0000000000000080 0x001e0000 dyld4::APIs::_dyld_get_shared_cache_range(unsigned long*)
[  340]    340     Code            0x0000000000016bf8 0x0000000102c3ebf8 0x00000000000000d8 0x001e0000 dyld4::RuntimeState::withLoadersWriteLock(void () block_pointer)
[  341]    341     Code            0x0000000000016cd0 0x0000000102c3ecd0 0x000000000000000c 0x001e0000 _kernelrpc_mach_vm_allocate_trap
[  342]    342     Code            0x0000000000016cdc 0x0000000102c3ecdc 0x000000000000000c 0x001e0000 _kernelrpc_mach_vm_purgable_control_trap
[  343]    343     Code            0x0000000000016ce8 0x0000000102c3ece8 0x000000000000000c 0x001e0000 _kernelrpc_mach_vm_deallocate_trap
[  344]    344     Code            0x0000000000016cf4 0x0000000102c3ecf4 0x000000000000000c 0x001e0000 task_dyld_process_info_notify_get
[  345]    345     Code            0x0000000000016d00 0x0000000102c3ed00 0x000000000000000c 0x001e0000 _kernelrpc_mach_vm_protect_trap
[  346]    346     Code            0x0000000000016d0c 0x0000000102c3ed0c 0x000000000000000c 0x001e0000 _kernelrpc_mach_vm_map_trap
[  347]    347     Code            0x0000000000016d18 0x0000000102c3ed18 0x000000000000000c 0x001e0000 _kernelrpc_mach_port_allocate_trap
[  348]    348     Code            0x0000000000016d24 0x0000000102c3ed24 0x000000000000000c 0x001e0000 _kernelrpc_mach_port_deallocate_trap
[  349]    349     Code            0x0000000000016d30 0x0000000102c3ed30 0x000000000000000c 0x001e0000 _kernelrpc_mach_port_mod_refs_trap
[  350]    350     Code            0x0000000000016d3c 0x0000000102c3ed3c 0x000000000000000c 0x001e0000 _kernelrpc_mach_port_move_member_trap
[  351]    351     Code            0x0000000000016d48 0x0000000102c3ed48 0x000000000000000c 0x001e0000 _kernelrpc_mach_port_insert_right_trap
[  352]    352     Code            0x0000000000016d54 0x0000000102c3ed54 0x000000000000000c 0x001e0000 _kernelrpc_mach_port_insert_member_trap
[  353]    353     Code            0x0000000000016d60 0x0000000102c3ed60 0x000000000000000c 0x001e0000 _kernelrpc_mach_port_extract_member_trap
[  354]    354     Code            0x0000000000016d6c 0x0000000102c3ed6c 0x000000000000000c 0x001e0000 _kernelrpc_mach_port_construct_trap
[  355]    355     Code            0x0000000000016d78 0x0000000102c3ed78 0x000000000000000c 0x001e0000 _kernelrpc_mach_port_destruct_trap
[  356]    356     Code            0x0000000000016d84 0x0000000102c3ed84 0x000000000000000c 0x001e0000 mach_reply_port
[  357]    357     Code            0x0000000000016d90 0x0000000102c3ed90 0x000000000000000c 0x001e0000 thread_self_trap
[  358]    358     Code            0x0000000000016d9c 0x0000000102c3ed9c 0x000000000000000c 0x001e0000 task_self_trap
[  359]    359     Code            0x0000000000016da8 0x0000000102c3eda8 0x000000000000000c 0x001e0000 host_self_trap
[  360]    360     Code            0x0000000000016db4 0x0000000102c3edb4 0x000000000000000c 0x001e0000 mach_msg_trap
[  361]    361     Code            0x0000000000016dc0 0x0000000102c3edc0 0x000000000000000c 0x001e0000 mach_msg_overwrite_trap
[  362]    362     Code            0x0000000000016dcc 0x0000000102c3edcc 0x000000000000000c 0x001e0000 semaphore_signal_trap
[  363]    363     Code            0x0000000000016dd8 0x0000000102c3edd8 0x000000000000000c 0x001e0000 semaphore_signal_all_trap
[  364]    364     Code            0x0000000000016de4 0x0000000102c3ede4 0x000000000000000c 0x001e0000 semaphore_signal_thread_trap
[  365]    365     Code            0x0000000000016df0 0x0000000102c3edf0 0x000000000000000c 0x001e0000 semaphore_wait_trap
[  366]    366     Code            0x0000000000016dfc 0x0000000102c3edfc 0x000000000000000c 0x001e0000 semaphore_wait_signal_trap
[  367]    367     Code            0x0000000000016e08 0x0000000102c3ee08 0x000000000000000c 0x001e0000 semaphore_timedwait_trap
[  368]    368     Code            0x0000000000016e14 0x0000000102c3ee14 0x000000000000000c 0x001e0000 semaphore_timedwait_signal_trap
[  369]    369     Code            0x0000000000016e20 0x0000000102c3ee20 0x000000000000000c 0x001e0000 _kernelrpc_mach_port_get_attributes_trap
[  370]    370     Code            0x0000000000016e2c 0x0000000102c3ee2c 0x000000000000000c 0x001e0000 _kernelrpc_mach_port_guard_trap
[  371]    371     Code            0x0000000000016e38 0x0000000102c3ee38 0x000000000000000c 0x001e0000 _kernelrpc_mach_port_unguard_trap
[  372]    372     Code            0x0000000000016e44 0x0000000102c3ee44 0x000000000000000c 0x001e0000 mach_generate_activity_id
[  373]    373     Code            0x0000000000016e50 0x0000000102c3ee50 0x000000000000000c 0x001e0000 task_name_for_pid
[  374]    374     Code            0x0000000000016e5c 0x0000000102c3ee5c 0x000000000000000c 0x001e0000 task_for_pid
[  375]    375     Code            0x0000000000016e68 0x0000000102c3ee68 0x000000000000000c 0x001e0000 pid_for_task
[  376]    376     Code            0x0000000000016e74 0x0000000102c3ee74 0x000000000000000c 0x001e0000 macx_swapon
[  377]    377     Code            0x0000000000016e80 0x0000000102c3ee80 0x000000000000000c 0x001e0000 macx_swapoff
[  378]    378     Code            0x0000000000016e8c 0x0000000102c3ee8c 0x000000000000000c 0x001e0000 thread_get_special_reply_port
[  379]    379     Code            0x0000000000016e98 0x0000000102c3ee98 0x000000000000000c 0x001e0000 macx_triggers
[  380]    380     Code            0x0000000000016ea4 0x0000000102c3eea4 0x000000000000000c 0x001e0000 macx_backing_store_suspend
[  381]    381     Code            0x0000000000016eb0 0x0000000102c3eeb0 0x000000000000000c 0x001e0000 macx_backing_store_recovery
[  382]    382     Code            0x0000000000016ebc 0x0000000102c3eebc 0x000000000000000c 0x001e0000 swtch_pri
[  383]    383     Code            0x0000000000016ec8 0x0000000102c3eec8 0x000000000000000c 0x001e0000 swtch
[  384]    384     Code            0x0000000000016ed4 0x0000000102c3eed4 0x000000000000000c 0x001e0000 syscall_thread_switch
[  385]    385     Code            0x0000000000016ee0 0x0000000102c3eee0 0x000000000000000c 0x001e0000 clock_sleep_trap
[  386]    386     Code            0x0000000000016eec 0x0000000102c3eeec 0x000000000000000c 0x001e0000 host_create_mach_voucher_trap
[  387]    387     Code            0x0000000000016ef8 0x0000000102c3eef8 0x000000000000000c 0x001e0000 mach_voucher_extract_attr_recipe_trap
[  388]    388     Code            0x0000000000016f04 0x0000000102c3ef04 0x000000000000000c 0x001e0000 _kernelrpc_mach_port_type_trap
[  389]    389     Code            0x0000000000016f10 0x0000000102c3ef10 0x000000000000000c 0x001e0000 _kernelrpc_mach_port_request_notification_trap
[  390]    390     Code            0x0000000000016f1c 0x0000000102c3ef1c 0x000000000000000c 0x001e0000 mach_timebase_info_trap
[  391]    391     Code            0x0000000000016f28 0x0000000102c3ef28 0x000000000000000c 0x001e0000 mach_wait_until
[  392]    392     Code            0x0000000000016f34 0x0000000102c3ef34 0x000000000000000c 0x001e0000 mk_timer_create
[  393]    393     Code            0x0000000000016f40 0x0000000102c3ef40 0x000000000000000c 0x001e0000 mk_timer_destroy
[  394]    394     Code            0x0000000000016f4c 0x0000000102c3ef4c 0x000000000000000c 0x001e0000 mk_timer_arm
[  395]    395     Code            0x0000000000016f58 0x0000000102c3ef58 0x000000000000000c 0x001e0000 mk_timer_cancel
[  396]    396     Code            0x0000000000016f64 0x0000000102c3ef64 0x000000000000000c 0x001e0000 mk_timer_arm_leeway
[  397]    397     Code            0x0000000000016f70 0x0000000102c3ef70 0x0000000000000044 0x001e0000 debug_control_port_for_pid
[  398]    398     Code            0x0000000000016fb4 0x0000000102c3efb4 0x00000000000000c8 0x001e0080 unsigned int SwiftHashTable::getIndex<SwiftForeignTypeProtocolConformanceLookupKey, SwiftForeignTypeProtocolConformanceLocationKey>(SwiftForeignTypeProtocolConformanceLookupKey const&, unsigned char const*) const
[  399]    399     Code            0x000000000001707c 0x0000000102c3f07c 0x0000000000000128 0x000e0000 dyld3::getCachePath(dyld3::SharedCacheOptions const&, unsigned long, char*)
[  400]    400     Code            0x00000000000171a4 0x0000000102c3f1a4 0x000000000000046c 0x001e0000 dyld3::MachOAnalyzer::parseOrgArm64eChainedFixups(Diagnostics&, void (unsigned int, bool&) block_pointer, void (dyld3::MachOLoaded::LinkEditInfo const&, dyld3::MachOFile::SegmentInfo const*, bool, unsigned int, int, unsigned char, char const*, unsigned long long, bool, bool&) block_pointer, void (dyld3::MachOLoaded::LinkEditInfo const&, dyld3::MachOFile::SegmentInfo const*, unsigned char, bool, unsigned long long, unsigned short, bool&) block_pointer) const
[  401]    401     Code            0x0000000000017610 0x0000000102c3f610 0x0000000000000290 0x000e0000 invocation function for block in dyld4::JustInTimeLoader::loadDependents(Diagnostics&, dyld4::RuntimeState&, dyld4::Loader::LoadOptions const&)
[  402]    402     Code            0x00000000000178a0 0x0000000102c3f8a0 0x000000000000003c 0x001e0000 dyld3::MachOFile::installName() const
[  403]    403     Code            0x00000000000178dc 0x0000000102c3f8dc 0x0000000000000020 0x000e0000 invocation function for block in dyld4::PrebuiltObjC::forEachSelectorReferenceToUnique(dyld4::RuntimeState&, dyld3::MachOAnalyzer const*, unsigned long long, dyld4::ObjCBinaryInfo const&, dyld3::MachOAnalyzer::VMAddrConverter const&, void (unsigned long long, unsigned long long) block_pointer)
[  404]    404     Code            0x00000000000178fc 0x0000000102c3f8fc 0x0000000000000084 0x001e0000 dyld4::Loader::beginInitializers(dyld4::RuntimeState&)
[  405]    405     Code            0x0000000000017980 0x0000000102c3f980 0x00000000000000d0 0x001e0000 dyld4::APIs::_NSGetExecutablePath(char*, unsigned int*)
[  406]    406     Code            0x0000000000017a50 0x0000000102c3fa50 0x0000000000000044 0x001e0080 __destroy_helper_block_8_32r40r
[  407]    407     Code            0x0000000000017a94 0x0000000102c3fa94 0x0000000000000068 0x000e0000 invocation function for block in dyld4::Reaper::finalizeDeadImages()
[  408]    408     Code            0x0000000000017afc 0x0000000102c3fafc 0x0000000000000100 0x001e0000 dyld4::JustInTimeLoader::makeJustInTimeLoaderDisk(Diagnostics&, dyld4::RuntimeState&, char const*, dyld4::Loader::LoadOptions const&, bool, unsigned int)
[  409]    409     Code            0x0000000000017bfc 0x0000000102c3fbfc 0x0000000000000158 0x001e0000 dyld4::ProcessConfig::PathOverrides::forEachFrameworkFallback(dyld3::Platform, bool, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&) block_pointer) const
[  410]    410     Code            0x0000000000017d54 0x0000000102c3fd54 0x000000000000009c 0x000e0000 invocation function for block in dyld4::APIs::getSdkVersion(mach_header const*)
[  411]    411     Code            0x0000000000017df0 0x0000000102c3fdf0 0x00000000000002b4 0x001e0000 dyld4::RuntimeState::buildInterposingTables()
[  412]    412     Code            0x00000000000180a4 0x0000000102c400a4 0x0000000000000310 0x001e0000 dyld4::ProcessConfig::DyldCache::DyldCache(dyld4::ProcessConfig::Process&, dyld4::ProcessConfig::Security const&, dyld4::ProcessConfig::Logging const&, dyld4::SyscallDelegate&)
[  413]    413     Code            0x00000000000183b4 0x0000000102c403b4 0x0000000000000148 0x001e0000 dyld3::kdebug_trace_dyld_duration_start(unsigned int, dyld3::kt_arg, dyld3::kt_arg, dyld3::kt_arg)
[  414]    414     Code            0x00000000000184fc 0x0000000102c404fc 0x0000000000000068 0x001e0000 bool SwiftHashTable::equal<SwiftForeignTypeProtocolConformanceLookupKey, SwiftForeignTypeProtocolConformanceLocationKey>(SwiftForeignTypeProtocolConformanceLocationKey const&, SwiftForeignTypeProtocolConformanceLookupKey const&, unsigned char const*) const
[  415]    415     Code            0x0000000000018564 0x0000000102c40564 0x0000000000000174 0x001e0080 dyld3::Map<char const*, dyld4::WeakDefMapValue, dyld3::HashCString, dyld3::EqualCString>::Map()
[  416]    416     Code            0x00000000000186d8 0x0000000102c406d8 0x00000000000000dc 0x001e0000 dyld4::RuntimeState::removeMissingFlatLazySymbols(dyld3::Array<dyld4::Loader const*> const&)
[  417]    417     Code            0x00000000000187b4 0x0000000102c407b4 0x0000000000000f3c 0x001e0000 dyld3::MachOAnalyzer::forEachBind(Diagnostics&, void (char const*, dyld3::MachOLoaded::LinkEditInfo const&, dyld3::MachOFile::SegmentInfo const*, bool, bool, unsigned int, int, unsigned int, unsigned char, unsigned long long, unsigned char, char const*, bool, bool, unsigned long long, bool&) block_pointer, void (char const*) block_pointer) const
[  418]    418     Code            0x00000000000196f0 0x0000000102c416f0 0x0000000000000158 0x001e0000 dyld4::RuntimeState::loadAppPrebuiltLoaderSet()
[  419]    419     Code            0x0000000000019848 0x0000000102c41848 0x0000000000000088 0x001e0000 munmap
[  420]    420     Code            0x00000000000198d0 0x0000000102c418d0 0x00000000000000b0 0x000e0000 invocation function for block in dyld4::APIs::dyld_minos_at_least(mach_header const*, dyld_build_version_t)
[  421]    421     Code            0x0000000000019980 0x0000000102c41980 0x00000000000000b0 0x000e0000 invocation function for block in dyld4::JustInTimeLoader::makeJustInTimeLoaderDisk(Diagnostics&, dyld4::RuntimeState&, char const*, dyld4::Loader::LoadOptions const&, bool, unsigned int)
[  422]    422     Code            0x0000000000019a30 0x0000000102c41a30 0x00000000000000ac 0x001e0000 dyld4::RuntimeState::removeLoaders(dyld3::Array<dyld4::Loader const*> const&)
[  423]    423     Code            0x0000000000019adc 0x0000000102c41adc 0x0000000000000254 0x001e0000 start
[  424]    424     Code            0x0000000000019d30 0x0000000102c41d30 0x00000000000000c8 0x001e0000 dyld4::PrebuiltLoaderSet::validHeader(dyld4::RuntimeState&) const
[  425]    425     Code            0x0000000000019df8 0x0000000102c41df8 0x000000000000001c 0x000e0000 invocation function for block in dyld4::APIs::dyld_shared_cache_find_iterate_text(unsigned char const*, char const**, void (dyld_shared_cache_dylib_text_info const*) block_pointer)
[  426]    426     Code            0x0000000000019e14 0x0000000102c41e14 0x000000000000026c 0x001e0080 dyld3::Map<char const*, bool, dyld3::HashCString, dyld3::EqualCString>::insert(std::__1::pair<char const*, bool>&&)
[  427]    427     Code            0x000000000001a080 0x0000000102c42080 0x00000000000001d8 0x001e0000 dyld4::RuntimeState::garbageCollectInner()
[  428]    428     Code            0x000000000001a258 0x0000000102c42258 0x00000000000000b0 0x001e0000 dyld4::APIs::_dyld_register_func_for_remove_image(void (*)(mach_header const*, long))
[  429]    429     Code            0x000000000001a308 0x0000000102c42308 0x0000000000000294 0x001e0000 dyld4::RuntimeState::saveAppPrebuiltLoaderSet(dyld4::PrebuiltLoaderSet const*) const
[  430]    430     Code            0x000000000001a59c 0x0000000102c4259c 0x0000000000000040 0x001e0000 strcpy
[  431]    431     Code            0x000000000001a5dc 0x0000000102c425dc 0x0000000000000090 0x001e0000 dyld4::RuntimeState::incDlRefCount(dyld4::Loader const*)
[  432]    432     Code            0x000000000001a66c 0x0000000102c4266c 0x00000000000000f8 0x000e0000 invocation function for block in dyld4::RuntimeState::_finalizeListTLV(void*)
[  433]    433     Code            0x000000000001a764 0x0000000102c42764 0x0000000000000084 0x001e0000 _pthread_set_self
[  434]    434     Code            0x000000000001a7e8 0x0000000102c427e8 0x00000000000001c0 0x001e0000 dyld4::ProcessConfig::Process::getMainPlatform()
[  435]    435     Code            0x000000000001a9a8 0x0000000102c429a8 0x00000000000000f0 0x001e0000 DyldSharedCache::findLaunchLoaderSet(char const*) const
[  436]    436     Code            0x000000000001aa98 0x0000000102c42a98 0x0000000000000038 0x001e0080 dyld4::objc_headeropt_rw_t::isLoaded(unsigned int) const
[  437]    437     Code            0x000000000001aad0 0x0000000102c42ad0 0x0000000000000010 0x001e0000 dyld4::PrebuiltObjC::~PrebuiltObjC()
[  438]    438     Code            0x000000000001aaf4 0x0000000102c42af4 0x000000000000000c 0x000e0000 __Block_byref_object_copy_
[  439]    439     Code            0x000000000001ab00 0x0000000102c42b00 0x0000000000000008 0x000e0000 __Block_byref_object_dispose_
[  440]    440     Code            0x000000000001ab08 0x0000000102c42b08 0x0000000000000048 0x000e0000 __start_block_invoke
[  441]    441     Code            0x000000000001ab50 0x0000000102c42b50 0x0000000000000028 0x000e0000 __start_block_invoke.3
[  442]    442     Code            0x000000000001ab78 0x0000000102c42b78 0x0000000000000ec0 0x000e0000 dyld4::prepare(dyld4::APIs&, dyld3::MachOAnalyzer const*)
[  443]    443     Code            0x000000000001ba38 0x0000000102c43a38 0x000000000000001c 0x000e0000 __Block_byref_object_copy_.8
[  444]    444     Code            0x000000000001ba54 0x0000000102c43a54 0x0000000000000024 0x000e0000 __Block_byref_object_dispose_.9
[  445]    445     Code            0x000000000001ba78 0x0000000102c43a78 0x00000000000000e0 0x001e0080 dyld3::OverflowSafeArray<dyld4::Loader*, 4294967295ul>::push_back(dyld4::Loader* const&)
[  446]    446     Code            0x000000000001bb58 0x0000000102c43b58 0x0000000000000124 0x000e0000 invocation function for block in dyld4::prepare(dyld4::APIs&, dyld3::MachOAnalyzer const*)
[  447]    447     Code            0x000000000001bc7c 0x0000000102c43c7c 0x0000000000000004 0x001e0080 Diagnostics::errorMessageCStr() const
[  448]    448     Code            0x000000000001bc80 0x0000000102c43c80 0x0000000000000084 0x001e0080 dyld4::Vector<dyld4::AuthenticatedValue<dyld4::Loader const*> >::erase(dyld4::AuthenticatedValue<dyld4::Loader const*>*)
[  449]    449     Code            0x000000000001bd04 0x0000000102c43d04 0x0000000000000014 0x000e0000 __Block_byref_object_copy_.15
[  450]    450     Code            0x000000000001bd18 0x0000000102c43d18 0x0000000000000008 0x000e0000 __Block_byref_object_dispose_.16
[  451]    451     Code            0x000000000001bd20 0x0000000102c43d20 0x0000000000000010 0x000e0000 invocation function for block in dyld4::prepare(dyld4::APIs&, dyld3::MachOAnalyzer const*)
[  452]    452     Code            0x000000000001bd30 0x0000000102c43d30 0x00000000000000a4 0x000e0000 invocation function for block in dyld4::prepare(dyld4::APIs&, dyld3::MachOAnalyzer const*)
[  453]    453     Code            0x000000000001bdd4 0x0000000102c43dd4 0x00000000000000a0 0x000e0000 invocation function for block in dyld4::prepare(dyld4::APIs&, dyld3::MachOAnalyzer const*)
[  454]    454     Code            0x000000000001be74 0x0000000102c43e74 0x0000000000000008 0x000e0000 dyld4::fake_main(int, char const* const*, char const* const*, char const* const*)
[  455]    455     Code            0x000000000001be7c 0x0000000102c43e7c 0x0000000000000104 0x001e0080 dyld4::Vector<dyld4::AuthenticatedValue<dyld4::Loader const*> >::reserve(unsigned long)
[  456]    456     Code            0x000000000001bf80 0x0000000102c43f80 0x00000000000000e0 0x001e0080 dyld3::OverflowSafeArray<unsigned long, 4294967295ul>::push_back(unsigned long const&)
[  457]    457     Code            0x000000000001c060 0x0000000102c44060 0x0000000000000014 0x000e0000 OUTLINED_FUNCTION_0
[  458]    458     Code            0x000000000001c074 0x0000000102c44074 0x0000000000000018 0x001e0000 dyld4::KernelArgs::findApple() const
[  459]    459     Code            0x000000000001c08c 0x0000000102c4408c 0x00000000000000a4 0x001e0000 dyld4::ProcessConfig::ProcessConfig(dyld4::KernelArgs const*, dyld4::SyscallDelegate&)
[  460]    460     Code            0x000000000001c130 0x0000000102c44130 0x0000000000000004 0x001e0000 dyld4::ProcessConfig::ProcessConfig(dyld4::KernelArgs const*, dyld4::SyscallDelegate&)
[  461]    461     Code            0x000000000001c134 0x0000000102c44134 0x00000000000001e0 0x001e0000 dyld4::ProcessConfig::Process::Process(dyld4::KernelArgs const*, dyld4::SyscallDelegate&)
[  462]    462     Code            0x000000000001c314 0x0000000102c44314 0x00000000000000e8 0x001e0000 dyld4::ProcessConfig::Process::getMainUnrealPath(dyld4::SyscallDelegate&)
[  463]    463     Code            0x000000000001c3fc 0x0000000102c443fc 0x00000000000000a8 0x001e0000 dyld4::ProcessConfig::Process::getMainPath(dyld4::SyscallDelegate&)
[  464]    464     Code            0x000000000001c4a4 0x0000000102c444a4 0x000000000000004c 0x001e0000 dyld4::ProcessConfig::Process::getDyldPath(dyld4::SyscallDelegate&)
[  465]    465     Code            0x000000000001c4f0 0x0000000102c444f0 0x000000000000008c 0x001e0000 dyld4::ProcessConfig::Process::getMainArchs(dyld4::SyscallDelegate&)
[  466]    466     Code            0x000000000001c57c 0x0000000102c4457c 0x0000000000000008 0x001e0000 dyld4::ProcessConfig::Process::appleParam(char const*) const
[  467]    467     Code            0x000000000001c584 0x0000000102c44584 0x0000000000000008 0x001e0000 dyld4::ProcessConfig::Process::environ(char const*) const
[  468]    468     Code            0x000000000001c58c 0x0000000102c4458c 0x0000000000000070 0x001e0000 dyld4::ProcessConfig::Process::strdup(char const*) const
[  469]    469     Code            0x000000000001c5fc 0x0000000102c445fc 0x00000000000000b4 0x001e0000 dyld4::ProcessConfig::Process::pathFromFileHexStrings(dyld4::SyscallDelegate&, char const*)
[  470]    470     Code            0x000000000001c6b0 0x0000000102c446b0 0x00000000000000a8 0x000e0000 hexToUInt64(char const*, char const**)
[  471]    471     Code            0x000000000001c758 0x0000000102c44758 0x00000000000000f0 0x001e0000 dyld4::ProcessConfig::Process::findVersionSetEquivalent(dyld3::Platform, unsigned int) const
[  472]    472     Code            0x000000000001c85c 0x0000000102c4485c 0x0000000000000018 0x000e0000 invocation function for block in dyld4::ProcessConfig::Process::getMainPlatform()
[  473]    473     Code            0x000000000001c874 0x0000000102c44874 0x00000000000000e8 0x001e0000 dyld4::ProcessConfig::Security::Security(dyld4::ProcessConfig::Process&, dyld4::SyscallDelegate&)
[  474]    474     Code            0x000000000001c95c 0x0000000102c4495c 0x00000000000000a8 0x001e0000 dyld4::ProcessConfig::Security::getAMFI(dyld4::ProcessConfig::Process const&, dyld4::SyscallDelegate&)
[  475]    475     Code            0x000000000001ca04 0x0000000102c44a04 0x00000000000000a8 0x001e0000 dyld4::ProcessConfig::Security::pruneEnvVars(dyld4::ProcessConfig::Process&)
[  476]    476     Code            0x000000000001caac 0x0000000102c44aac 0x0000000000000264 0x001e0000 dyld4::ProcessConfig::Logging::Logging(dyld4::ProcessConfig::Process const&, dyld4::ProcessConfig::Security const&, dyld4::SyscallDelegate&)
[  477]    477     Code            0x000000000001cd10 0x0000000102c44d10 0x00000000000000fc 0x001e0000 dyld4::ProcessConfig::DyldCache::setPlatformOSVersion(dyld4::ProcessConfig::Process const&)
[  478]    478     Code            0x000000000001ce0c 0x0000000102c44e0c 0x0000000000000088 0x001e0000 dyld4::ProcessConfig::DyldCache::makeDataConstWritable(dyld4::ProcessConfig::Logging const&, dyld4::SyscallDelegate const&, bool) const
[  479]    479     Code            0x000000000001ce94 0x0000000102c44e94 0x0000000000000058 0x001e0000 dyld4::console(char const*, ...)
[  480]    480     Code            0x000000000001ceec 0x0000000102c44eec 0x00000000000000b8 0x001e0000 dyld4::ProcessConfig::DyldCache::setupDyldCommPage(dyld4::ProcessConfig::Process&, dyld4::ProcessConfig::Security const&, dyld4::SyscallDelegate&)
[  481]    481     Code            0x000000000001cfa4 0x0000000102c44fa4 0x000000000000002c 0x000e0000 invocation function for block in dyld4::ProcessConfig::DyldCache::setPlatformOSVersion(dyld4::ProcessConfig::Process const&)
[  482]    482     Code            0x000000000001cfd0 0x0000000102c44fd0 0x0000000000000088 0x000e0000 invocation function for block in dyld4::ProcessConfig::DyldCache::makeDataConstWritable(dyld4::ProcessConfig::Logging const&, dyld4::SyscallDelegate const&, bool) const
[  483]    483     Code            0x000000000001d058 0x0000000102c45058 0x00000000000000ac 0x000e0000 invocation function for block in dyld4::ProcessConfig::DyldCache::makeDataConstWritable(dyld4::ProcessConfig::Logging const&, dyld4::SyscallDelegate const&, bool) const
[  484]    484     Code            0x000000000001d104 0x0000000102c45104 0x000000000000018c 0x001e0000 dyld4::ProcessConfig::PathOverrides::PathOverrides(dyld4::ProcessConfig::Process const&, dyld4::ProcessConfig::Security const&, dyld4::ProcessConfig::Logging const&, dyld4::ProcessConfig::DyldCache const&, dyld4::SyscallDelegate&)
[  485]    485     Code            0x000000000001d290 0x0000000102c45290 0x000000000000031c 0x001e0000 dyld4::ProcessConfig::PathOverrides::addEnvVar(dyld4::ProcessConfig::Process const&, dyld4::ProcessConfig::Security const&, char const*, bool, char*)
[  486]    486     Code            0x000000000001d5ac 0x0000000102c455ac 0x000000000000001c 0x000e0000 invocation function for block in dyld4::ProcessConfig::PathOverrides::PathOverrides(dyld4::ProcessConfig::Process const&, dyld4::ProcessConfig::Security const&, dyld4::ProcessConfig::Logging const&, dyld4::ProcessConfig::DyldCache const&, dyld4::SyscallDelegate&)
[  487]    487     Code            0x000000000001d5c8 0x0000000102c455c8 0x0000000000000128 0x001e0000 dyld4::ProcessConfig::PathOverrides::processVersionedPaths(dyld4::ProcessConfig::Process const&, dyld4::SyscallDelegate&, dyld4::ProcessConfig::DyldCache const&, dyld3::Platform, dyld3::GradedArchs const&)
[  488]    488     Code            0x000000000001d6f0 0x0000000102c456f0 0x00000000000001b4 0x001e0000 dyld4::ProcessConfig::PathOverrides::checkVersionedPath(dyld4::ProcessConfig::Process const&, char const*, dyld4::SyscallDelegate&, dyld4::ProcessConfig::DyldCache const&, dyld3::Platform, dyld3::GradedArchs const&)
[  489]    489     Code            0x000000000001d8a4 0x0000000102c458a4 0x0000000000000084 0x001e0000 dyld4::ProcessConfig::PathOverrides::addPathOverride(dyld4::ProcessConfig::Process const&, char const*, char const*)
[  490]    490     Code            0x000000000001d928 0x0000000102c45928 0x0000000000000090 0x000e0000 invocation function for block in dyld4::ProcessConfig::PathOverrides::processVersionedPaths(dyld4::ProcessConfig::Process const&, dyld4::SyscallDelegate&, dyld4::ProcessConfig::DyldCache const&, dyld3::Platform, dyld3::GradedArchs const&)
[  491]    491     Code            0x000000000001d9b8 0x0000000102c459b8 0x000000000000001c 0x000e0000 invocation function for block in dyld4::ProcessConfig::PathOverrides::processVersionedPaths(dyld4::ProcessConfig::Process const&, dyld4::SyscallDelegate&, dyld4::ProcessConfig::DyldCache const&, dyld3::Platform, dyld3::GradedArchs const&)
[  492]    492     Code            0x000000000001d9d4 0x0000000102c459d4 0x0000000000000090 0x000e0000 invocation function for block in dyld4::ProcessConfig::PathOverrides::processVersionedPaths(dyld4::ProcessConfig::Process const&, dyld4::SyscallDelegate&, dyld4::ProcessConfig::DyldCache const&, dyld3::Platform, dyld3::GradedArchs const&)
[  493]    493     Code            0x000000000001da64 0x0000000102c45a64 0x00000000000000e0 0x000e0000 invocation function for block in dyld4::ProcessConfig::PathOverrides::processVersionedPaths(dyld4::ProcessConfig::Process const&, dyld4::SyscallDelegate&, dyld4::ProcessConfig::DyldCache const&, dyld3::Platform, dyld3::GradedArchs const&)
[  494]    494     Code            0x000000000001db44 0x0000000102c45b44 0x0000000000000080 0x001e0000 dyld4::ProcessConfig::PathOverrides::forEachInsertedDylib(void (char const*, bool&) block_pointer) const
[  495]    495     Code            0x000000000001dbc4 0x0000000102c45bc4 0x0000000000000010 0x000e0000 invocation function for block in dyld4::ProcessConfig::PathOverrides::forEachInsertedDylib(void (char const*, bool&) block_pointer) const
[  496]    496     Code            0x000000000001dbd4 0x0000000102c45bd4 0x0000000000000104 0x000e0000 invocation function for block in dyld4::ProcessConfig::PathOverrides::addEnvVar(dyld4::ProcessConfig::Process const&, dyld4::ProcessConfig::Security const&, char const*, bool, char*)
[  497]    497     Code            0x000000000001dcd8 0x0000000102c45cd8 0x00000000000001a0 0x001e0000 dyld4::ProcessConfig::PathOverrides::forEachDylibFallback(dyld3::Platform, bool, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&) block_pointer) const
[  498]    498     Code            0x000000000001de78 0x0000000102c45e78 0x0000000000000054 0x000e0000 invocation function for block in dyld4::ProcessConfig::PathOverrides::forEachDylibFallback(dyld3::Platform, bool, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&) block_pointer) const
[  499]    499     Code            0x000000000001decc 0x0000000102c45ecc 0x0000000000000050 0x001e0080 __copy_helper_block_8_32b40r
[  500]    500     Code            0x000000000001df1c 0x0000000102c45f1c 0x0000000000000044 0x001e0080 __destroy_helper_block_8_32b40r
[  501]    501     Code            0x000000000001df60 0x0000000102c45f60 0x0000000000000054 0x000e0000 invocation function for block in dyld4::ProcessConfig::PathOverrides::forEachFrameworkFallback(dyld3::Platform, bool, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&) block_pointer) const
[  502]    502     Code            0x000000000001dfb4 0x0000000102c45fb4 0x0000000000000094 0x001e0000 dyld4::ProcessConfig::PathOverrides::addSuffix(char const*, char const*, char*) const
[  503]    503     Code            0x000000000001e048 0x0000000102c46048 0x0000000000000100 0x001e0000 dyld4::ProcessConfig::PathOverrides::forEachImageSuffix(char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&) block_pointer) const
[  504]    504     Code            0x000000000001e148 0x0000000102c46148 0x00000000000000dc 0x000e0000 invocation function for block in dyld4::ProcessConfig::PathOverrides::forEachImageSuffix(char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&) block_pointer) const
[  505]    505     Code            0x000000000001e224 0x0000000102c46224 0x00000000000001bc 0x001e0000 dyld4::ProcessConfig::PathOverrides::getFrameworkPartialPath(char const*) const
[  506]    506     Code            0x000000000001e3e0 0x0000000102c463e0 0x00000000000000e8 0x000e0000 invocation function for block in dyld4::ProcessConfig::PathOverrides::forEachPathVariant(char const*, dyld3::Platform, bool, bool&, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&) block_pointer) const
[  507]    507     Code            0x000000000001e4c8 0x0000000102c464c8 0x00000000000000fc 0x000e0000 invocation function for block in dyld4::ProcessConfig::PathOverrides::forEachPathVariant(char const*, dyld3::Platform, bool, bool&, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&) block_pointer) const
[  508]    508     Code            0x000000000001e5c4 0x0000000102c465c4 0x00000000000000f8 0x000e0000 invocation function for block in dyld4::ProcessConfig::PathOverrides::forEachPathVariant(char const*, dyld3::Platform, bool, bool&, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&) block_pointer) const
[  509]    509     Code            0x000000000001e6bc 0x0000000102c466bc 0x0000000000000024 0x001e0000 dyld4::ProcessConfig::PathOverrides::typeName(dyld4::ProcessConfig::PathOverrides::Type)
[  510]    510     Code            0x000000000001e6e0 0x0000000102c466e0 0x0000000000000148 0x001e0000 dyld4::halt(char const*)
[  511]    511     Code            0x000000000001e828 0x0000000102c46828 0x0000000000000014 0x000e0000 OUTLINED_FUNCTION_0
[  512]    512     Code            0x000000000001e83c 0x0000000102c4683c 0x000000000000008c 0x001e0000 dyld4::RuntimeState::setDyldLoader(dyld4::Loader const*)
[  513]    513     Code            0x000000000001e8c8 0x0000000102c468c8 0x0000000000000100 0x001e0000 dyld4::RuntimeState::setMainLoader(dyld4::Loader const*)
[  514]    514     Code            0x000000000001e9c8 0x0000000102c469c8 0x000000000000002c 0x001e0000 dyld4::RuntimeState::log(char const*, ...) const
[  515]    515     Code            0x000000000001e9f4 0x0000000102c469f4 0x0000000000000104 0x000e0000 invocation function for block in dyld4::RuntimeState::setMainLoader(dyld4::Loader const*)
[  516]    516     Code            0x000000000001eaf8 0x0000000102c46af8 0x00000000000000e0 0x001e0000 dyld4::RuntimeState::withNotifiersWriteLock(void () block_pointer)
[  517]    517     Code            0x000000000001ebd8 0x0000000102c46bd8 0x0000000000000078 0x001e0000 dyld4::RuntimeState::addDynamicReference(dyld4::Loader const*, dyld4::Loader const*)
[  518]    518     Code            0x000000000001ec50 0x0000000102c46c50 0x000000000000008c 0x000e0000 invocation function for block in dyld4::RuntimeState::addDynamicReference(dyld4::Loader const*, dyld4::Loader const*)
[  519]    519     Code            0x000000000001ecdc 0x0000000102c46cdc 0x000000000000012c 0x001e0000 dyld4::RuntimeState::vlog(char const*, char*)
[  520]    520     Code            0x000000000001ee08 0x0000000102c46e08 0x0000000000000290 0x001e0000 dyld4::RuntimeState::PermanentRanges::make(dyld4::RuntimeState&, dyld3::Array<dyld4::Loader const*> const&)
[  521]    521     Code            0x000000000001f098 0x0000000102c47098 0x000000000000001c 0x000e0000 __Block_byref_object_copy_
[  522]    522     Code            0x000000000001f0b4 0x0000000102c470b4 0x0000000000000024 0x000e0000 __Block_byref_object_dispose_
[  523]    523     Code            0x000000000001f0d8 0x0000000102c470d8 0x00000000000000d0 0x000e0000 invocation function for block in dyld4::RuntimeState::PermanentRanges::make(dyld4::RuntimeState&, dyld3::Array<dyld4::Loader const*> const&)
[  524]    524     Code            0x000000000001f1a8 0x0000000102c471a8 0x00000000000000e4 0x001e0080 dyld3::OverflowSafeArray<dyld4::RuntimeState::PermanentRanges::Range, 4294967295ul>::push_back(dyld4::RuntimeState::PermanentRanges::Range const&)
[  525]    525     Code            0x000000000001f28c 0x0000000102c4728c 0x000000000000004c 0x001e0000 dyld4::RuntimeState::addPermanentRanges(dyld3::Array<dyld4::Loader const*> const&)
[  526]    526     Code            0x000000000001f2d8 0x0000000102c472d8 0x00000000000000bc 0x001e0000 dyld4::RuntimeState::checkHiddenCacheAddr(dyld4::Loader const*, void const*, char const*, dyld3::OverflowSafeArray<dyld4::RuntimeState::HiddenCacheAddr, 4294967295ul>&) const
[  527]    527     Code            0x000000000001f394 0x0000000102c47394 0x00000000000005a8 0x001e0000 dyld4::RuntimeState::appendInterposingTuples(dyld4::Loader const*, unsigned char const*, unsigned int)
[  528]    528     Code            0x000000000001f93c 0x0000000102c4793c 0x0000000000000014 0x000e0000 __Block_byref_object_copy_.20
[  529]    529     Code            0x000000000001f950 0x0000000102c47950 0x0000000000000004 0x000e0000 __Block_byref_object_dispose_.21
[  530]    530     Code            0x000000000001f954 0x0000000102c47954 0x000000000000001c 0x000e0000 __Block_byref_object_copy_.22
[  531]    531     Code            0x000000000001f970 0x0000000102c47970 0x0000000000000024 0x000e0000 __Block_byref_object_dispose_.23
[  532]    532     Code            0x000000000001f994 0x0000000102c47994 0x000000000000000c 0x000e0000 __Block_byref_object_copy_.24
[  533]    533     Code            0x000000000001f9a0 0x0000000102c479a0 0x0000000000000008 0x000e0000 __Block_byref_object_dispose_.25
[  534]    534     Code            0x000000000001f9a8 0x0000000102c479a8 0x0000000000000238 0x000e0000 invocation function for block in dyld4::RuntimeState::appendInterposingTuples(dyld4::Loader const*, unsigned char const*, unsigned int)
[  535]    535     Code            0x000000000001fbe0 0x0000000102c47be0 0x000000000000001c 0x000e0000 __Block_byref_object_copy_.26
[  536]    536     Code            0x000000000001fbfc 0x0000000102c47bfc 0x0000000000000024 0x000e0000 __Block_byref_object_dispose_.27
[  537]    537     Code            0x000000000001fc20 0x0000000102c47c20 0x000000000000001c 0x000e0000 __Block_byref_object_copy_.28
[  538]    538     Code            0x000000000001fc3c 0x0000000102c47c3c 0x0000000000000024 0x000e0000 __Block_byref_object_dispose_.29
[  539]    539     Code            0x000000000001fc60 0x0000000102c47c60 0x00000000000000fc 0x000e0000 invocation function for block in dyld4::RuntimeState::appendInterposingTuples(dyld4::Loader const*, unsigned char const*, unsigned int)
[  540]    540     Code            0x000000000001fd5c 0x0000000102c47d5c 0x00000000000000e0 0x001e0080 dyld3::OverflowSafeArray<void const*, 4294967295ul>::push_back(void const* const&)
[  541]    541     Code            0x000000000001fe3c 0x0000000102c47e3c 0x00000000000000e0 0x001e0080 dyld3::OverflowSafeArray<char const*, 4294967295ul>::push_back(char const* const&)
[  542]    542     Code            0x000000000001ff1c 0x0000000102c47f1c 0x0000000000000070 0x001e0080 __copy_helper_block_8_32r40r48r56r
[  543]    543     Code            0x000000000001ff8c 0x0000000102c47f8c 0x000000000000005c 0x001e0080 __destroy_helper_block_8_32r40r48r56r
[  544]    544     Code            0x000000000001ffe8 0x0000000102c47fe8 0x0000000000000188 0x000e0000 invocation function for block in dyld4::RuntimeState::appendInterposingTuples(dyld4::Loader const*, unsigned char const*, unsigned int)
[  545]    545     Code            0x0000000000020170 0x0000000102c48170 0x000000000000009c 0x000e0000 invocation function for block in dyld4::RuntimeState::appendInterposingTuples(dyld4::Loader const*, unsigned char const*, unsigned int)
[  546]    546     Code            0x000000000002020c 0x0000000102c4820c 0x0000000000000130 0x000e0000 invocation function for block in dyld4::RuntimeState::appendInterposingTuples(dyld4::Loader const*, unsigned char const*, unsigned int)
[  547]    547     Code            0x000000000002033c 0x0000000102c4833c 0x0000000000000004 0x000e0000 invocation function for block in dyld4::RuntimeState::appendInterposingTuples(dyld4::Loader const*, unsigned char const*, unsigned int)
[  548]    548     Code            0x0000000000020340 0x0000000102c48340 0x000000000000001c 0x000e0000 __Block_byref_object_copy_.58
[  549]    549     Code            0x000000000002035c 0x0000000102c4835c 0x0000000000000024 0x000e0000 __Block_byref_object_dispose_.59
[  550]    550     Code            0x0000000000020380 0x0000000102c48380 0x0000000000000030 0x000e0000 invocation function for block in dyld4::RuntimeState::buildInterposingTables()
[  551]    551     Code            0x00000000000203b0 0x0000000102c483b0 0x00000000000000c0 0x001e0080 dyld4::Vector<dyld4::InterposeTupleAll>::reserve(unsigned long)
[  552]    552     Code            0x0000000000020470 0x0000000102c48470 0x00000000000000d8 0x001e0080 dyld4::Vector<dyld4::InterposeTupleSpecific>::reserve(unsigned long)
[  553]    553     Code            0x0000000000020548 0x0000000102c48548 0x0000000000000020 0x000e0000 invocation function for block in dyld4::RuntimeState::buildInterposingTables()
[  554]    554     Code            0x0000000000020568 0x0000000102c48568 0x000000000000001c 0x001e0000 dyld4::RuntimeState::setLaunchMissingDylib(char const*, char const*)
[  555]    555     Code            0x0000000000020584 0x0000000102c48584 0x000000000000001c 0x001e0000 dyld4::RuntimeState::setLaunchMissingSymbol(char const*, char const*, char const*)
[  556]    556     Code            0x00000000000205a0 0x0000000102c485a0 0x0000000000000060 0x001e0000 dyld4::RuntimeState::addMissingFlatLazySymbol(dyld4::Loader const*, char const*, unsigned long*)
[  557]    557     Code            0x0000000000020600 0x0000000102c48600 0x0000000000000010 0x001e0000 dyld4::RuntimeState::hasMissingFlatLazySymbols() const
[  558]    558     Code            0x0000000000020610 0x0000000102c48610 0x00000000000000c0 0x001e0000 dyld4::RuntimeState::setVMAccountingSuspending(bool)
[  559]    559     Code            0x00000000000206d0 0x0000000102c486d0 0x00000000000000c0 0x001e0000 dyld4::RuntimeState::decDlRefCount(dyld4::Loader const*)
[  560]    560     Code            0x0000000000020790 0x0000000102c48790 0x000000000000005c 0x001e0080 dyld4::Vector<dyld4::RuntimeState::DlopenCount>::erase(dyld4::RuntimeState::DlopenCount*)
[  561]    561     Code            0x00000000000207ec 0x0000000102c487ec 0x000000000000006c 0x001e0000 dyld4::Reaper::markDirectlyDlopenedImagesAsUsed()
[  562]    562     Code            0x0000000000020858 0x0000000102c48858 0x000000000000006c 0x001e0000 dyld4::Reaper::markDynamicNeverUnloadImagesAsUsed()
[  563]    563     Code            0x00000000000208c4 0x0000000102c488c4 0x0000000000000120 0x001e0000 dyld4::Reaper::markDependentsOf(dyld4::Loader const*)
[  564]    564     Code            0x00000000000209e4 0x0000000102c489e4 0x0000000000000060 0x001e0000 dyld4::Reaper::markDependentOfInUseImages()
[  565]    565     Code            0x0000000000020a44 0x0000000102c48a44 0x0000000000000214 0x001e0000 dyld4::Reaper::finalizeDeadImages()
[  566]    566     Code            0x0000000000020c58 0x0000000102c48c58 0x000000000000001c 0x000e0000 __Block_byref_object_copy_.69
[  567]    567     Code            0x0000000000020c74 0x0000000102c48c74 0x0000000000000024 0x000e0000 __Block_byref_object_dispose_.70
[  568]    568     Code            0x0000000000020c98 0x0000000102c48c98 0x00000000000000f0 0x001e0000 dyld4::Reaper::runTerminators(dyld4::Loader const*)
[  569]    569     Code            0x0000000000020d88 0x0000000102c48d88 0x00000000000000e0 0x001e0080 dyld3::OverflowSafeArray<__cxa_range_t, 4294967295ul>::push_back(__cxa_range_t const&)
[  570]    570     Code            0x0000000000020e68 0x0000000102c48e68 0x0000000000000068 0x000e0000 invocation function for block in dyld4::Reaper::runTerminators(dyld4::Loader const*)
[  571]    571     Code            0x0000000000020ed0 0x0000000102c48ed0 0x0000000000000014 0x000e0000 __Block_byref_object_copy_.78
[  572]    572     Code            0x0000000000020ee4 0x0000000102c48ee4 0x0000000000000004 0x000e0000 __Block_byref_object_dispose_.79
[  573]    573     Code            0x0000000000020ee8 0x0000000102c48ee8 0x000000000000009c 0x000e0000 invocation function for block in dyld4::RuntimeState::garbageCollectInner()
[  574]    574     Code            0x0000000000020f84 0x0000000102c48f84 0x0000000000000038 0x001e0080 dyld3::Array<dyld4::Reaper::LoaderAndUse>::push_back(dyld4::Reaper::LoaderAndUse const&)
[  575]    575     Code            0x0000000000020fbc 0x0000000102c48fbc 0x00000000000003d4 0x001e0000 dyld4::RuntimeState::notifyUnload(dyld3::Array<dyld4::Loader const*> const&)
[  576]    576     Code            0x0000000000021390 0x0000000102c49390 0x0000000000000068 0x001e0000 dyld4::RuntimeState::notifyDebuggerLoad(dyld4::Loader const*)
[  577]    577     Code            0x00000000000213f8 0x0000000102c493f8 0x000000000000012c 0x001e0000 dyld4::RuntimeState::notifyDebuggerUnload(dyld3::Array<dyld4::Loader const*> const&)
[  578]    578     Code            0x0000000000021524 0x0000000102c49524 0x000000000000024c 0x001e0000 dyld4::RuntimeState::notifyDtrace(dyld3::Array<dyld4::Loader const*> const&)
[  579]    579     Code            0x0000000000021770 0x0000000102c49770 0x0000000000000080 0x000e0000 invocation function for block in dyld4::RuntimeState::notifyDtrace(dyld3::Array<dyld4::Loader const*> const&)
[  580]    580     Code            0x00000000000217f0 0x0000000102c497f0 0x0000000000000134 0x000e0000 invocation function for block in dyld4::RuntimeState::notifyUnload(dyld3::Array<dyld4::Loader const*> const&)
[  581]    581     Code            0x0000000000021924 0x0000000102c49924 0x00000000000000b8 0x000e0000 invocation function for block in dyld4::RuntimeState::notifyUnload(dyld3::Array<dyld4::Loader const*> const&)
[  582]    582     Code            0x00000000000219dc 0x0000000102c499dc 0x0000000000000140 0x001e0000 dyld4::RuntimeState::removeDynamicDependencies(dyld4::Loader const*)
[  583]    583     Code            0x0000000000021b1c 0x0000000102c49b1c 0x0000000000000080 0x001e0000 dyld4::RuntimeState::addNotifyRemoveFunc(dyld4::Loader const*, void (*)(mach_header const*, long))
[  584]    584     Code            0x0000000000021b9c 0x0000000102c49b9c 0x0000000000000080 0x001e0000 dyld4::RuntimeState::addNotifyLoadImage(dyld4::Loader const*, void (*)(mach_header const*, char const*, bool))
[  585]    585     Code            0x0000000000021c1c 0x0000000102c49c1c 0x000000000000015c 0x001e0000 dyld4::RuntimeState::setUpTLVs(dyld3::MachOAnalyzer const*)
[  586]    586     Code            0x0000000000021d78 0x0000000102c49d78 0x0000000000000058 0x000e0000 invocation function for block in dyld4::RuntimeState::setUpTLVs(dyld3::MachOAnalyzer const*)
[  587]    587     Code            0x0000000000021dd0 0x0000000102c49dd0 0x0000000000000054 0x001e0000 dyld4::RuntimeState::TLV_TerminatorList::reverseWalkChain(void (dyld4::RuntimeState::TLV_TerminatorList*) block_pointer)
[  588]    588     Code            0x0000000000021e24 0x0000000102c49e24 0x000000000000002c 0x000e0000 invocation function for block in dyld4::RuntimeState::_finalizeListTLV(void*)
[  589]    589     Code            0x0000000000021e50 0x0000000102c49e50 0x0000000000000270 0x001e0000 dyld4::RuntimeState::buildAppPrebuiltLoaderSetPath(bool)
[  590]    590     Code            0x00000000000220c0 0x0000000102c4a0c0 0x0000000000000134 0x001e0000 dyld4::RuntimeState::buildBootToken(dyld3::Array<unsigned char>&) const
[  591]    591     Code            0x00000000000221f4 0x0000000102c4a1f4 0x00000000000000a0 0x000e0000 hexStringToBytes(char const*, unsigned char*, unsigned int, unsigned int&)
[  592]    592     Code            0x0000000000022294 0x0000000102c4a294 0x0000000000000038 0x001e0080 dyld3::Array<unsigned char>::push_back(unsigned char const&)
[  593]    593     Code            0x00000000000222cc 0x0000000102c4a2cc 0x00000000000000b4 0x001e0000 dyld4::RuntimeState::fileAlreadyHasBootToken(char const*, dyld3::Array<unsigned char> const&) const
[  594]    594     Code            0x0000000000022380 0x0000000102c4a380 0x0000000000000070 0x001e0000 dyld4::RuntimeState::allocateProcessArrays(unsigned long)
[  595]    595     Code            0x00000000000223f0 0x0000000102c4a3f0 0x00000000000000d4 0x001e0000 dyld4::RuntimeState::takeLockBeforeFork()
[  596]    596     Code            0x00000000000224c4 0x0000000102c4a4c4 0x00000000000000c8 0x001e0000 dyld4::RuntimeState::releaseLockInForkParent()
[  597]    597     Code            0x000000000002258c 0x0000000102c4a58c 0x00000000000000f8 0x001e0000 dyld4::RuntimeState::resetLockInForkChild()
[  598]    598     Code            0x0000000000022684 0x0000000102c4a684 0x0000000000000040 0x001e0000 dyld4::RuntimeState::takeDlopenLockBeforeFork()
[  599]    599     Code            0x00000000000226c4 0x0000000102c4a6c4 0x000000000000003c 0x001e0000 dyld4::RuntimeState::releaseDlopenLockInForkParent()
[  600]    600     Code            0x0000000000022700 0x0000000102c4a700 0x000000000000009c 0x001e0000 dyld4::RuntimeState::resetDlopenLockInForkChild()
[  601]    601     Code            0x000000000002279c 0x0000000102c4a79c 0x000000000000000c 0x001e0000 dyld4::DyldCacheDataConstLazyScopedWriter::DyldCacheDataConstLazyScopedWriter(dyld4::RuntimeState&)
[  602]    602     Code            0x00000000000227a8 0x0000000102c4a7a8 0x0000000000000044 0x001e0000 dyld4::DyldCacheDataConstLazyScopedWriter::~DyldCacheDataConstLazyScopedWriter()
[  603]    603     Code            0x00000000000227ec 0x0000000102c4a7ec 0x000000000000003c 0x001e0000 dyld4::DyldCacheDataConstLazyScopedWriter::makeWriteable() const
[  604]    604     Code            0x0000000000022828 0x0000000102c4a828 0x0000000000000030 0x001e0000 dyld4::DyldCacheDataConstScopedWriter::DyldCacheDataConstScopedWriter(dyld4::RuntimeState&)
[  605]    605     Code            0x0000000000022858 0x0000000102c4a858 0x0000000000000104 0x001e0080 std::__1::__murmur2_or_cityhash<unsigned long, 64ul>::__hash_len_0_to_16(char const*, unsigned long)
[  606]    606     Code            0x000000000002295c 0x0000000102c4a95c 0x00000000000000ac 0x001e0080 std::__1::__murmur2_or_cityhash<unsigned long, 64ul>::__hash_len_17_to_32(char const*, unsigned long)
[  607]    607     Code            0x0000000000022a08 0x0000000102c4aa08 0x00000000000000c0 0x001e0080 dyld4::Vector<dyld4::RuntimeState::DynamicReference>::reserve(unsigned long)
[  608]    608     Code            0x0000000000022ac8 0x0000000102c4aac8 0x00000000000000d8 0x001e0080 dyld4::Vector<dyld4::RuntimeState::MissingFlatSymbol>::reserve(unsigned long)
[  609]    609     Code            0x0000000000022ba0 0x0000000102c4aba0 0x0000000000000118 0x000e0000 dyld4::RuntimeState::rebindMissingFlatLazySymbols(dyld3::Array<dyld4::Loader const*> const&)::$_0::operator()(dyld4::RuntimeState::MissingFlatSymbol const&) const
[  610]    610     Code            0x0000000000022cb8 0x0000000102c4acb8 0x00000000000000c0 0x001e0080 dyld4::Vector<dyld4::RuntimeState::DlopenCount>::reserve(unsigned long)
[  611]    611     Code            0x0000000000022d78 0x0000000102c4ad78 0x00000000000000c0 0x001e0080 dyld4::Vector<dyld4::RuntimeState::RegisteredDOF>::reserve(unsigned long)
[  612]    612     Code            0x0000000000022e38 0x0000000102c4ae38 0x00000000000000c0 0x001e0080 dyld4::Vector<void (*)(mach_header const*, long)>::reserve(unsigned long)
[  613]    613     Code            0x0000000000022ef8 0x0000000102c4aef8 0x00000000000000c0 0x001e0080 dyld4::Vector<void (*)(mach_header const*, char const*, bool)>::reserve(unsigned long)
[  614]    614     Code            0x0000000000022fb8 0x0000000102c4afb8 0x0000000000000014 0x000e0000 OUTLINED_FUNCTION_0
[  615]    615     Code            0x0000000000022fcc 0x0000000102c4afcc 0x0000000000000014 0x000e0000 OUTLINED_FUNCTION_1
[  616]    616     Code            0x0000000000022fe0 0x0000000102c4afe0 0x0000000000000014 0x000e0000 OUTLINED_FUNCTION_2
[  617]    617     Code            0x0000000000022ff4 0x0000000102c4aff4 0x0000000000000014 0x000e0000 OUTLINED_FUNCTION_3
[  618]    618     Code            0x0000000000023008 0x0000000102c4b008 0x0000000000000014 0x000e0000 OUTLINED_FUNCTION_4
[  619]    619     Code            0x000000000002301c 0x0000000102c4b01c 0x0000000000000020 0x001e0000 bool SwiftHashTable::equal<SwiftMetadataProtocolConformanceLocationKey, SwiftMetadataProtocolConformanceLocationKey>(SwiftMetadataProtocolConformanceLocationKey const&, SwiftMetadataProtocolConformanceLocationKey const&, unsigned char const*) const
[  620]    620     Code            0x000000000002303c 0x0000000102c4b03c 0x0000000000000014 0x001e0000 unsigned char SwiftHashTable::checkbyte<SwiftMetadataProtocolConformanceLocationKey>(SwiftMetadataProtocolConformanceLocationKey const&, unsigned char const*) const
[  621]    621     Code            0x0000000000023050 0x0000000102c4b050 0x0000000000000018 0x001e0000 unsigned char SwiftHashTable::checkbyte<SwiftForeignTypeProtocolConformanceLookupKey>(SwiftForeignTypeProtocolConformanceLookupKey const&, unsigned char const*) const
[  622]    622     Code            0x0000000000023068 0x0000000102c4b068 0x000000000000004c 0x001e0080 std::__1::basic_string_view<char, std::__1::char_traits<char> >::compare(std::__1::basic_string_view<char, std::__1::char_traits<char> >) const
[  623]    623     Code            0x00000000000230b4 0x0000000102c4b0b4 0x000000000000004c 0x001e0000 dyld4::Loader::InitialOptions::InitialOptions(dyld4::Loader const&)
[  624]    624     Code            0x0000000000023100 0x0000000102c4b100 0x000000000000005c 0x001e0000 dyld4::Loader::fileID() const
[  625]    625     Code            0x000000000002315c 0x0000000102c4b15c 0x000000000000005c 0x001e0000 dyld4::Loader::dependentCount() const
[  626]    626     Code            0x00000000000231b8 0x0000000102c4b1b8 0x000000000000005c 0x001e0000 dyld4::Loader::dependent(dyld4::RuntimeState const&, unsigned int, dyld4::Loader::DependentKind*) const
[  627]    627     Code            0x0000000000023214 0x0000000102c4b214 0x000000000000005c 0x001e0000 dyld4::Loader::loadDependents(Diagnostics&, dyld4::RuntimeState&, dyld4::Loader::LoadOptions const&)
[  628]    628     Code            0x0000000000023270 0x0000000102c4b270 0x000000000000005c 0x001e0000 dyld4::Loader::getExportsTrie(unsigned long long&, unsigned int&) const
[  629]    629     Code            0x00000000000232cc 0x0000000102c4b2cc 0x000000000000005c 0x001e0000 dyld4::Loader::representsCachedDylibIndex(unsigned short) const
[  630]    630     Code            0x0000000000023328 0x0000000102c4b328 0x000000000000005c 0x001e0000 dyld4::Loader::applyFixups(Diagnostics&, dyld4::RuntimeState&, dyld4::DyldCacheDataConstLazyScopedWriter&, bool) const
[  631]    631     Code            0x0000000000023384 0x0000000102c4b384 0x000000000000005c 0x001e0000 dyld4::Loader::overridesDylibInCache(dyld4::Loader::DylibPatch const*&, unsigned short&) const
[  632]    632     Code            0x00000000000233e0 0x0000000102c4b3e0 0x000000000000005c 0x001e0000 dyld4::Loader::unmap(dyld4::RuntimeState&, bool) const
[  633]    633     Code            0x000000000002343c 0x0000000102c4b43c 0x000000000000005c 0x001e0000 dyld4::Loader::hasBeenFixedUp(dyld4::RuntimeState&) const
[  634]    634     Code            0x0000000000023498 0x0000000102c4b498 0x000000000000005c 0x001e0000 dyld4::Loader::runInitializers(dyld4::RuntimeState&) const
[  635]    635     Code            0x00000000000234f4 0x0000000102c4b4f4 0x0000000000000030 0x001e0000 dyld4::Loader::leafName(char const*)
[  636]    636     Code            0x0000000000023524 0x0000000102c4b524 0x0000000000000034 0x001e0000 dyld4::Loader::leafName() const
[  637]    637     Code            0x0000000000023558 0x0000000102c4b558 0x0000000000000054 0x001e0000 dyld4::Loader::appendHexByte(unsigned char, char*&)
[  638]    638     Code            0x00000000000235ac 0x0000000102c4b5ac 0x000000000000039c 0x001e0000 dyld4::Loader::uuidToStr(unsigned char*, char*)
[  639]    639     Code            0x0000000000023948 0x0000000102c4b948 0x00000000000000a0 0x001e0000 dyld4::Loader::makeDiskLoader(Diagnostics&, dyld4::RuntimeState&, char const*, dyld4::Loader::LoadOptions const&, bool, unsigned int)
[  640]    640     Code            0x00000000000239e8 0x0000000102c4b9e8 0x00000000000000c4 0x001e0000 dyld4::Loader::forEachPath(Diagnostics&, dyld4::RuntimeState&, char const*, dyld4::Loader::LoadOptions const&, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&) block_pointer)
[  641]    641     Code            0x0000000000023aac 0x0000000102c4baac 0x0000000000000270 0x001e0000 dyld4::Loader::forEachResolvedAtPathVar(dyld4::RuntimeState&, char const*, dyld4::Loader::LoadOptions const&, dyld4::ProcessConfig::PathOverrides::Type, bool&, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&) block_pointer)
[  642]    642     Code            0x0000000000023d1c 0x0000000102c4bd1c 0x0000000000000104 0x001e0000 dyld4::Loader::expandAtLoaderPath(dyld4::RuntimeState&, char const*, dyld4::Loader::LoadOptions const&, dyld4::Loader const*, bool, char*)
[  643]    643     Code            0x0000000000023e20 0x0000000102c4be20 0x00000000000000c8 0x001e0000 dyld4::Loader::expandAtExecutablePath(dyld4::RuntimeState&, char const*, dyld4::Loader::LoadOptions const&, bool, char*)
[  644]    644     Code            0x0000000000023ee8 0x0000000102c4bee8 0x00000000000000f8 0x000e0000 invocation function for block in dyld4::Loader::forEachResolvedAtPathVar(dyld4::RuntimeState&, char const*, dyld4::Loader::LoadOptions const&, dyld4::ProcessConfig::PathOverrides::Type, bool&, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&) block_pointer)
[  645]    645     Code            0x0000000000023fe0 0x0000000102c4bfe0 0x000000000000006c 0x000e0000 dyld4::concatenatePaths(char*, char const*, unsigned long)
[  646]    646     Code            0x000000000002404c 0x0000000102c4c04c 0x000000000000026c 0x001e0000 dyld4::Loader::validateFile(Diagnostics&, dyld4::RuntimeState const&, int, char const*, dyld4::Loader::CodeSignatureInFile const&, dyld4::Loader::FileValidationInfo const&)
[  647]    647     Code            0x00000000000242b8 0x0000000102c4c2b8 0x0000000000000044 0x000e0000 invocation function for block in dyld4::Loader::validateFile(Diagnostics&, dyld4::RuntimeState const&, int, char const*, dyld4::Loader::CodeSignatureInFile const&, dyld4::Loader::FileValidationInfo const&)
[  648]    648     Code            0x00000000000242fc 0x0000000102c4c2fc 0x0000000000000668 0x001e0000 dyld4::Loader::mapSegments(Diagnostics&, dyld4::RuntimeState&, char const*, unsigned long long, dyld4::Loader::CodeSignatureInFile const&, bool, dyld3::Array<dyld4::Loader::Region> const&, bool, bool, dyld4::Loader::FileValidationInfo const&)
[  649]    649     Code            0x0000000000024964 0x0000000102c4c964 0x0000000000000094 0x000e0000 invocation function for block in dyld4::Loader::applyFixupsGeneric(Diagnostics&, dyld4::RuntimeState&, dyld3::Array<void const*> const&, dyld3::Array<void const*> const&, bool, dyld3::Array<dyld4::Loader::MissingFlatLazySymbol> const&) const
[  650]    650     Code            0x00000000000249f8 0x0000000102c4c9f8 0x0000000000000058 0x000e0000 invocation function for block in dyld4::Loader::applyFixupsGeneric(Diagnostics&, dyld4::RuntimeState&, dyld3::Array<void const*> const&, dyld3::Array<void const*> const&, bool, dyld3::Array<dyld4::Loader::MissingFlatLazySymbol> const&) const
[  651]    651     Code            0x0000000000024a50 0x0000000102c4ca50 0x0000000000000134 0x000e0000 invocation function for block in dyld4::Loader::applyFixupsGeneric(Diagnostics&, dyld4::RuntimeState&, dyld3::Array<void const*> const&, dyld3::Array<void const*> const&, bool, dyld3::Array<dyld4::Loader::MissingFlatLazySymbol> const&) const
[  652]    652     Code            0x0000000000024b84 0x0000000102c4cb84 0x00000000000000ec 0x000e0000 invocation function for block in dyld4::Loader::applyFixupsGeneric(Diagnostics&, dyld4::RuntimeState&, dyld3::Array<void const*> const&, dyld3::Array<void const*> const&, bool, dyld3::Array<dyld4::Loader::MissingFlatLazySymbol> const&) const
[  653]    653     Code            0x0000000000024c70 0x0000000102c4cc70 0x0000000000000058 0x000e0000 invocation function for block in dyld4::Loader::applyFixupsGeneric(Diagnostics&, dyld4::RuntimeState&, dyld3::Array<void const*> const&, dyld3::Array<void const*> const&, bool, dyld3::Array<dyld4::Loader::MissingFlatLazySymbol> const&) const
[  654]    654     Code            0x0000000000024cc8 0x0000000102c4ccc8 0x00000000000000a8 0x000e0000 invocation function for block in dyld4::Loader::applyFixupsGeneric(Diagnostics&, dyld4::RuntimeState&, dyld3::Array<void const*> const&, dyld3::Array<void const*> const&, bool, dyld3::Array<dyld4::Loader::MissingFlatLazySymbol> const&) const
[  655]    655     Code            0x0000000000024d70 0x0000000102c4cd70 0x0000000000000038 0x001e0080 dyld3::Array<dyld4::Loader const*>::push_back(dyld4::Loader const* const&)
[  656]    656     Code            0x0000000000024da8 0x0000000102c4cda8 0x00000000000000b0 0x001e0000 dyld4::Loader::logSegmentsFromSharedCache(dyld4::RuntimeState&) const
[  657]    657     Code            0x0000000000024e58 0x0000000102c4ce58 0x0000000000000078 0x000e0000 invocation function for block in dyld4::Loader::logSegmentsFromSharedCache(dyld4::RuntimeState&) const
[  658]    658     Code            0x0000000000024ed0 0x0000000102c4ced0 0x0000000000000108 0x001e0000 dyld4::Loader::addWeakDefsToMap(dyld4::RuntimeState&, dyld3::Array<dyld4::Loader const*> const&)
[  659]    659     Code            0x0000000000024fd8 0x0000000102c4cfd8 0x0000000000000098 0x000e0000 invocation function for block in dyld4::Loader::addWeakDefsToMap(dyld4::RuntimeState&, dyld3::Array<dyld4::Loader const*> const&)
[  660]    660     Code            0x0000000000025070 0x0000000102c4d070 0x00000000000000ec 0x001e0080 dyld3::Map<char const*, dyld4::WeakDefMapValue, dyld3::HashCString, dyld3::EqualCString>::find(char const* const&)
[  661]    661     Code            0x000000000002516c 0x0000000102c4d16c 0x0000000000000014 0x000e0000 __Block_byref_object_copy_
[  662]    662     Code            0x0000000000025180 0x0000000102c4d180 0x0000000000000004 0x000e0000 __Block_byref_object_dispose_
[  663]    663     Code            0x0000000000025184 0x0000000102c4d184 0x00000000000000d0 0x000e0000 invocation function for block in dyld4::Loader::resolveSymbol(Diagnostics&, dyld4::RuntimeState&, int, char const*, bool, bool, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&) block_pointer, bool) const
[  664]    664     Code            0x0000000000025264 0x0000000102c4d264 0x0000000000000454 0x000e0000 invocation function for block in dyld4::Loader::resolveSymbol(Diagnostics&, dyld4::RuntimeState&, int, char const*, bool, bool, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&) block_pointer, bool) const
[  665]    665     Code            0x00000000000256b8 0x0000000102c4d6b8 0x0000000000000070 0x001e0080 __copy_helper_block_8_32b40r48r56r
[  666]    666     Code            0x0000000000025728 0x0000000102c4d728 0x000000000000005c 0x001e0080 __destroy_helper_block_8_32b40r48r56r
[  667]    667     Code            0x0000000000025784 0x0000000102c4d784 0x00000000000000a4 0x000e0000 invocation function for block in dyld4::Loader::hasExportedSymbol(Diagnostics&, dyld4::RuntimeState&, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array<dyld4::Loader const*>*) const
[  668]    668     Code            0x0000000000025828 0x0000000102c4d828 0x000000000000004c 0x001e0000 dyld4::Loader::resolvedAddress(dyld4::RuntimeState&, dyld4::Loader::ResolvedSymbol const&)
[  669]    669     Code            0x0000000000025874 0x0000000102c4d874 0x00000000000000fc 0x001e0000 dyld4::Loader::interpose(dyld4::RuntimeState&, unsigned long, dyld4::Loader const*)
[  670]    670     Code            0x0000000000025970 0x0000000102c4d970 0x0000000000000164 0x001e0000 dyld4::Loader::applyInterposingToDyldCache(dyld4::RuntimeState&)
[  671]    671     Code            0x0000000000025ad4 0x0000000102c4dad4 0x0000000000000098 0x000e0000 invocation function for block in dyld4::Loader::applyInterposingToDyldCache(dyld4::RuntimeState&)
[  672]    672     Code            0x0000000000025b6c 0x0000000102c4db6c 0x00000000000000dc 0x000e0000 invocation function for block in dyld4::Loader::applyInterposingToDyldCache(dyld4::RuntimeState&)
[  673]    673     Code            0x0000000000025c48 0x0000000102c4dc48 0x000000000000017c 0x001e0000 dyld4::Loader::applyCachePatchesToOverride(dyld4::RuntimeState&, dyld4::Loader const*, unsigned short, dyld4::Loader::DylibPatch const*, dyld4::DyldCacheDataConstLazyScopedWriter&) const
[  674]    674     Code            0x0000000000025dc4 0x0000000102c4ddc4 0x00000000000000b0 0x000e0000 invocation function for block in dyld4::Loader::applyCachePatchesToOverride(dyld4::RuntimeState&, dyld4::Loader const*, unsigned short, dyld4::Loader::DylibPatch const*, dyld4::DyldCacheDataConstLazyScopedWriter&) const
[  675]    675     Code            0x0000000000025e74 0x0000000102c4de74 0x00000000000001f0 0x000e0000 invocation function for block in dyld4::Loader::applyCachePatchesToOverride(dyld4::RuntimeState&, dyld4::Loader const*, unsigned short, dyld4::Loader::DylibPatch const*, dyld4::DyldCacheDataConstLazyScopedWriter&) const
[  676]    676     Code            0x0000000000026064 0x0000000102c4e064 0x00000000000000d4 0x001e0000 dyld4::Loader::applyCachePatchesTo(dyld4::RuntimeState&, dyld4::Loader const*, dyld4::DyldCacheDataConstLazyScopedWriter&) const
[  677]    677     Code            0x0000000000026138 0x0000000102c4e138 0x00000000000000c8 0x001e0000 dyld4::Loader::indexOfUnzipperedTwin(dyld4::RuntimeState const&, unsigned short)
[  678]    678     Code            0x0000000000026200 0x0000000102c4e200 0x0000000000000278 0x001e0080 dyld3::Map<char const*, dyld4::WeakDefMapValue, dyld3::HashCString, dyld3::EqualCString>::insert(std::__1::pair<char const*, dyld4::WeakDefMapValue>&&)
[  679]    679     Code            0x0000000000026478 0x0000000102c4e478 0x0000000000000104 0x001e0080 dyld3::OverflowSafeArray<std::__1::pair<char const*, dyld4::WeakDefMapValue>, 4294967295ul>::push_back(std::__1::pair<char const*, dyld4::WeakDefMapValue> const&)
[  680]    680     Code            0x000000000002657c 0x0000000102c4e57c 0x0000000000000014 0x000e0000 OUTLINED_FUNCTION_0
[  681]    681     Code            0x0000000000026590 0x0000000102c4e590 0x0000000000000014 0x000e0000 OUTLINED_FUNCTION_1
[  682]    682     Code            0x00000000000265a4 0x0000000102c4e5a4 0x0000000000000014 0x000e0000 OUTLINED_FUNCTION_2
[  683]    683     Code            0x00000000000265b8 0x0000000102c4e5b8 0x0000000000000014 0x000e0000 OUTLINED_FUNCTION_3
[  684]    684     Code            0x00000000000265cc 0x0000000102c4e5cc 0x0000000000000054 0x000e0000 invocation function for block in dyld4::JustInTimeLoader::contains(dyld4::RuntimeState&, void const*, void const**, unsigned long long*, unsigned char*) const
[  685]    685     Code            0x0000000000026620 0x0000000102c4e620 0x0000000000000014 0x001e0000 dyld4::JustInTimeLoader::fileID() const
[  686]    686     Code            0x0000000000026634 0x0000000102c4e634 0x000000000000011c 0x001e0000 dyld4::JustInTimeLoader::makePatchTable(dyld4::RuntimeState&, unsigned int) const
[  687]    687     Code            0x0000000000026750 0x0000000102c4e750 0x00000000000000b8 0x000e0000 invocation function for block in dyld4::JustInTimeLoader::makePatchTable(dyld4::RuntimeState&, unsigned int) const
[  688]    688     Code            0x0000000000026808 0x0000000102c4e808 0x00000000000001c0 0x001e0000 dyld4::JustInTimeLoader::loadDependents(Diagnostics&, dyld4::RuntimeState&, dyld4::Loader::LoadOptions const&)
[  689]    689     Code            0x00000000000269c8 0x0000000102c4e9c8 0x000000000000003c 0x001e0000 dyld4::JustInTimeLoader::dependentKind(unsigned int)
[  690]    690     Code            0x0000000000026a04 0x0000000102c4ea04 0x000000000000000c 0x001e0000 dyld4::JustInTimeLoader::dependentCount() const
[  691]    691     Code            0x0000000000026a10 0x0000000102c4ea10 0x000000000000008c 0x001e0000 dyld4::JustInTimeLoader::dependent(dyld4::RuntimeState const&, unsigned int, dyld4::Loader::DependentKind*) const
[  692]    692     Code            0x0000000000026a9c 0x0000000102c4ea9c 0x0000000000000020 0x001e0000 dyld4::JustInTimeLoader::getExportsTrie(unsigned long long&, unsigned int&) const
[  693]    693     Code            0x0000000000026abc 0x0000000102c4eabc 0x000000000000003c 0x001e0000 dyld4::JustInTimeLoader::representsCachedDylibIndex(unsigned short) const
[  694]    694     Code            0x0000000000026af8 0x0000000102c4eaf8 0x0000000000000024 0x001e0000 dyld4::JustInTimeLoader::overridesDylibInCache(dyld4::Loader::DylibPatch const*&, unsigned short&) const
[  695]    695     Code            0x0000000000026b1c 0x0000000102c4eb1c 0x00000000000000e4 0x001e0000 dyld4::JustInTimeLoader::handleStrongWeakDefOverrides(dyld4::RuntimeState&, dyld4::DyldCacheDataConstLazyScopedWriter&)
[  696]    696     Code            0x0000000000026c00 0x0000000102c4ec00 0x000000000000007c 0x000e0000 invocation function for block in dyld4::JustInTimeLoader::handleStrongWeakDefOverrides(dyld4::RuntimeState&, dyld4::DyldCacheDataConstLazyScopedWriter&)
[  697]    697     Code            0x0000000000026c7c 0x0000000102c4ec7c 0x0000000000000068 0x000e0000 invocation function for block in dyld4::JustInTimeLoader::handleStrongWeakDefOverrides(dyld4::RuntimeState&, dyld4::DyldCacheDataConstLazyScopedWriter&)
[  698]    698     Code            0x0000000000026ce4 0x0000000102c4ece4 0x00000000000000a4 0x000e0000 invocation function for block in dyld4::JustInTimeLoader::cacheWeakDefFixup(dyld4::RuntimeState&, dyld4::DyldCacheDataConstLazyScopedWriter&, unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&)
[  699]    699     Code            0x0000000000026d88 0x0000000102c4ed88 0x000000000000007c 0x000e0000 invocation function for block in dyld4::JustInTimeLoader::applyFixups(Diagnostics&, dyld4::RuntimeState&, dyld4::DyldCacheDataConstLazyScopedWriter&, bool) const
[  700]    700     Code            0x0000000000026e04 0x0000000102c4ee04 0x000000000000001c 0x000e0000 __Block_byref_object_copy_
[  701]    701     Code            0x0000000000026e20 0x0000000102c4ee20 0x0000000000000024 0x000e0000 __Block_byref_object_dispose_
[  702]    702     Code            0x0000000000026e44 0x0000000102c4ee44 0x000000000000001c 0x000e0000 __Block_byref_object_copy_.29
[  703]    703     Code            0x0000000000026e60 0x0000000102c4ee60 0x0000000000000024 0x000e0000 __Block_byref_object_dispose_.30
[  704]    704     Code            0x0000000000026e84 0x0000000102c4ee84 0x0000000000000110 0x001e0000 dyld4::JustInTimeLoader::forEachBindTarget(Diagnostics&, dyld4::RuntimeState&, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&, bool&) block_pointer, void (dyld4::Loader::ResolvedSymbol const&, bool&) block_pointer) const
[  705]    705     Code            0x0000000000026f94 0x0000000102c4ef94 0x0000000000000110 0x000e0000 invocation function for block in dyld4::JustInTimeLoader::applyFixups(Diagnostics&, dyld4::RuntimeState&, dyld4::DyldCacheDataConstLazyScopedWriter&, bool) const
[  706]    706     Code            0x00000000000270a4 0x0000000102c4f0a4 0x00000000000000e0 0x001e0080 dyld3::OverflowSafeArray<dyld4::Loader::MissingFlatLazySymbol, 4294967295ul>::push_back(dyld4::Loader::MissingFlatLazySymbol const&)
[  707]    707     Code            0x0000000000027184 0x0000000102c4f184 0x0000000000000188 0x000e0000 invocation function for block in dyld4::JustInTimeLoader::applyFixups(Diagnostics&, dyld4::RuntimeState&, dyld4::DyldCacheDataConstLazyScopedWriter&, bool) const
[  708]    708     Code            0x000000000002730c 0x0000000102c4f30c 0x00000000000000ac 0x000e0000 invocation function for block in dyld4::JustInTimeLoader::applyFixups(Diagnostics&, dyld4::RuntimeState&, dyld4::DyldCacheDataConstLazyScopedWriter&, bool) const
[  709]    709     Code            0x00000000000273b8 0x0000000102c4f3b8 0x00000000000000d4 0x001e0000 dyld4::JustInTimeLoader::unmap(dyld4::RuntimeState&, bool) const
[  710]    710     Code            0x000000000002748c 0x0000000102c4f48c 0x000000000000000c 0x001e0000 dyld4::JustInTimeLoader::hasBeenFixedUp(dyld4::RuntimeState&) const
[  711]    711     Code            0x0000000000027498 0x0000000102c4f498 0x0000000000000018 0x001e0000 dyld4::JustInTimeLoader::beginInitializers(dyld4::RuntimeState&)
[  712]    712     Code            0x00000000000274b0 0x0000000102c4f4b0 0x00000000000000ac 0x001e0080 dyld4::Loader::Loader(dyld4::Loader::InitialOptions const&, bool, bool, bool)
[  713]    713     Code            0x000000000002755c 0x0000000102c4f55c 0x0000000000000334 0x001e0000 dyld4::JustInTimeLoader::make(dyld4::RuntimeState&, dyld3::MachOAnalyzer const*, char const*, dyld4::FileID const&, unsigned long long, bool, bool, bool, unsigned short)
[  714]    714     Code            0x0000000000027890 0x0000000102c4f890 0x0000000000000060 0x001e0080 __copy_helper_block_8_32b40b48r
[  715]    715     Code            0x00000000000278f0 0x0000000102c4f8f0 0x0000000000000050 0x001e0080 __destroy_helper_block_8_32b40b48r
[  716]    716     Code            0x0000000000027940 0x0000000102c4f940 0x0000000000000100 0x000e0000 invocation function for block in dyld4::JustInTimeLoader::forEachBindTarget(Diagnostics&, dyld4::RuntimeState&, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&, bool&) block_pointer, void (dyld4::Loader::ResolvedSymbol const&, bool&) block_pointer) const
[  717]    717     Code            0x0000000000027a40 0x0000000102c4fa40 0x0000000000000148 0x001e0000 dyld4::JustInTimeLoader::getFileValidationInfo() const
[  718]    718     Code            0x0000000000027b88 0x0000000102c4fb88 0x000000000000001c 0x000e0000 __Block_byref_object_copy_.59
[  719]    719     Code            0x0000000000027ba4 0x0000000102c4fba4 0x0000000000000004 0x000e0000 __Block_byref_object_dispose_.60
[  720]    720     Code            0x0000000000027ba8 0x0000000102c4fba8 0x000000000000002c 0x000e0000 invocation function for block in dyld4::JustInTimeLoader::getFileValidationInfo() const
[  721]    721     Code            0x0000000000027bd4 0x0000000102c4fbd4 0x0000000000000008 0x001e0000 dyld4::JustInTimeLoader::getCatalystMacTwinPatches() const
[  722]    722     Code            0x0000000000027bdc 0x0000000102c4fbdc 0x0000000000000160 0x001e0000 dyld4::JustInTimeLoader::withRegions(dyld3::MachOAnalyzer const*, void (dyld3::Array<dyld4::Loader::Region> const&) block_pointer)
[  723]    723     Code            0x0000000000027d3c 0x0000000102c4fd3c 0x0000000000000014 0x000e0000 __Block_byref_object_copy_.65
[  724]    724     Code            0x0000000000027d50 0x0000000102c4fd50 0x0000000000000004 0x000e0000 __Block_byref_object_dispose_.66
[  725]    725     Code            0x0000000000027d54 0x0000000102c4fd54 0x00000000000000ec 0x000e0000 invocation function for block in dyld4::JustInTimeLoader::withRegions(dyld3::MachOAnalyzer const*, void (dyld3::Array<dyld4::Loader::Region> const&) block_pointer)
[  726]    726     Code            0x0000000000027e40 0x0000000102c4fe40 0x0000000000000038 0x001e0080 dyld3::Array<dyld4::Loader::Region>::push_back(dyld4::Loader::Region const&)
[  727]    727     Code            0x0000000000027e78 0x0000000102c4fe78 0x000000000000001c 0x000e0000 invocation function for block in dyld4::hasDataConst(dyld3::MachOAnalyzer const*)
[  728]    728     Code            0x0000000000027e94 0x0000000102c4fe94 0x000000000000009c 0x001e0000 dyld4::PrebuiltLoader::BindTargetRef::BindTargetRef(dyld4::Loader::ResolvedSymbol const&)
[  729]    729     Code            0x0000000000027f30 0x0000000102c4ff30 0x0000000000000038 0x001e0000 dyld4::PrebuiltLoader::BindTargetRef::offset() const
[  730]    730     Code            0x0000000000027f68 0x0000000102c4ff68 0x000000000000006c 0x001e0000 dyld4::PrebuiltLoader::BindTargetRef::BindTargetRef(dyld4::Loader::BindTarget const&)
[  731]    731     Code            0x0000000000027fd4 0x0000000102c4ffd4 0x0000000000000004 0x001e0000 dyld4::PrebuiltLoader::BindTargetRef::BindTargetRef(dyld4::Loader::BindTarget const&)
[  732]    732     Code            0x0000000000027fd8 0x0000000102c4ffd8 0x000000000000001c 0x001e0000 dyld4::PrebuiltLoader::fileID() const
[  733]    733     Code            0x0000000000027ff4 0x0000000102c4fff4 0x000000000000003c 0x001e0000 dyld4::PrebuiltLoader::setLoadAddress(dyld4::RuntimeState&, dyld3::MachOLoaded const*) const
[  734]    734     Code            0x0000000000028030 0x0000000102c50030 0x000000000000002c 0x001e0000 dyld4::PrebuiltLoader::unmap(dyld4::RuntimeState&, bool) const
[  735]    735     Code            0x000000000002805c 0x0000000102c5005c 0x0000000000000118 0x001e0000 dyld4::PrebuiltLoader::recursiveMarkBeingValidated(dyld4::RuntimeState const&) const
[  736]    736     Code            0x0000000000028174 0x0000000102c50174 0x00000000000000e0 0x001e0080 dyld3::OverflowSafeArray<dyld4::PrebuiltLoader const*, 4294967295ul>::push_back(dyld4::PrebuiltLoader const* const&)
[  737]    737     Code            0x0000000000028254 0x0000000102c50254 0x00000000000002e8 0x001e0000 dyld4::PrebuiltLoader::invalidateInIsolation(dyld4::RuntimeState const&) const
[  738]    738     Code            0x000000000002853c 0x0000000102c5053c 0x0000000000000030 0x001e0000 dyld4::PrebuiltLoader::hasBeenFixedUp(dyld4::RuntimeState&) const
[  739]    739     Code            0x000000000002856c 0x0000000102c5056c 0x00000000000000f4 0x000e0000 invocation function for block in dyld4::PrebuiltLoader::applyObjCFixups(dyld4::RuntimeState&) const
[  740]    740     Code            0x0000000000028660 0x0000000102c50660 0x0000000000000074 0x000e0000 invocation function for block in dyld4::PrebuiltLoader::applyObjCFixups(dyld4::RuntimeState&) const
[  741]    741     Code            0x00000000000286d4 0x0000000102c506d4 0x000000000000008c 0x000e0000 invocation function for block in dyld4::PrebuiltLoader::applyObjCFixups(dyld4::RuntimeState&) const
[  742]    742     Code            0x0000000000028760 0x0000000102c50760 0x00000000000000e4 0x000e0000 invocation function for block in dyld4::PrebuiltLoader::applyObjCFixups(dyld4::RuntimeState&) const
[  743]    743     Code            0x0000000000028844 0x0000000102c50844 0x0000000000000194 0x000e0000 invocation function for block in dyld4::PrebuiltLoader::applyObjCFixups(dyld4::RuntimeState&) const
[  744]    744     Code            0x00000000000289d8 0x0000000102c509d8 0x00000000000009c0 0x001e0000 dyld4::PrebuiltLoader::serialize(Diagnostics&, dyld4::RuntimeState&, DyldSharedCache const*, dyld4::JustInTimeLoader const&, dyld4::Loader::LoaderRef, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&) block_pointer, dyld4::PrebuiltObjC const&, dyld4::BumpAllocator&)
[  745]    745     Code            0x0000000000029398 0x0000000102c51398 0x00000000000000f0 0x001e0000 dyld4::BumpAllocator::zeroFill(unsigned long)
[  746]    746     Code            0x0000000000029488 0x0000000102c51488 0x0000000000000064 0x001e0000 dyld4::BumpAllocator::append(void const*, unsigned long)
[  747]    747     Code            0x00000000000294ec 0x0000000102c514ec 0x0000000000000028 0x001e0000 dyld4::BumpAllocator::align(unsigned int)
[  748]    748     Code            0x0000000000029514 0x0000000102c51514 0x00000000000000e4 0x000e0000 invocation function for block in dyld4::PrebuiltLoader::serialize(Diagnostics&, dyld4::RuntimeState&, DyldSharedCache const*, dyld4::JustInTimeLoader const&, dyld4::Loader::LoaderRef, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&) block_pointer, dyld4::PrebuiltObjC const&, dyld4::BumpAllocator&)
[  749]    749     Code            0x00000000000295f8 0x0000000102c515f8 0x000000000000001c 0x000e0000 __Block_byref_object_copy_
[  750]    750     Code            0x0000000000029614 0x0000000102c51614 0x0000000000000024 0x000e0000 __Block_byref_object_dispose_
[  751]    751     Code            0x0000000000029638 0x0000000102c51638 0x0000000000000080 0x000e0000 invocation function for block in dyld4::PrebuiltLoader::serialize(Diagnostics&, dyld4::RuntimeState&, DyldSharedCache const*, dyld4::JustInTimeLoader const&, dyld4::Loader::LoaderRef, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&) block_pointer, dyld4::PrebuiltObjC const&, dyld4::BumpAllocator&)
[  752]    752     Code            0x00000000000296b8 0x0000000102c516b8 0x0000000000000044 0x000e0000 invocation function for block in dyld4::PrebuiltLoader::serialize(Diagnostics&, dyld4::RuntimeState&, DyldSharedCache const*, dyld4::JustInTimeLoader const&, dyld4::Loader::LoaderRef, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&) block_pointer, dyld4::PrebuiltObjC const&, dyld4::BumpAllocator&)
[  753]    753     Code            0x00000000000296fc 0x0000000102c516fc 0x000000000000002c 0x001e0000 dyld4::PrebuiltLoader::overridesDylibInCache(dyld4::Loader::DylibPatch const*&, unsigned short&) const
[  754]    754     Code            0x0000000000029728 0x0000000102c51728 0x00000000000001d0 0x001e0000 dyld4::PrebuiltLoaderSet::isValid(dyld4::RuntimeState&) const
[  755]    755     Code            0x00000000000298f8 0x0000000102c518f8 0x000000000000008c 0x001e0000 dyld4::PrebuiltLoaderSet::forEachMustBeMissingPath(void (char const*, bool&) block_pointer) const
[  756]    756     Code            0x0000000000029984 0x0000000102c51984 0x0000000000000084 0x000e0000 invocation function for block in dyld4::PrebuiltLoaderSet::isValid(dyld4::RuntimeState&) const
[  757]    757     Code            0x0000000000029a08 0x0000000102c51a08 0x00000000000000ac 0x001e0000 dyld4::PrebuiltLoaderSet::findIndex(char const*, unsigned short&) const
[  758]    758     Code            0x0000000000029ab4 0x0000000102c51ab4 0x000000000000003c 0x000e0000 __Block_byref_object_copy_.138
[  759]    759     Code            0x0000000000029af0 0x0000000102c51af0 0x0000000000000068 0x000e0000 __Block_byref_object_dispose_.139
[  760]    760     Code            0x0000000000029b58 0x0000000102c51b58 0x0000000000000040 0x000e0000 invocation function for block in dyld4::PrebuiltLoaderSet::logDuplicateObjCClasses(dyld4::RuntimeState&) const
[  761]    761     Code            0x0000000000029b98 0x0000000102c51b98 0x0000000000000174 0x000e0000 invocation function for block in dyld4::PrebuiltLoaderSet::logDuplicateObjCClasses(dyld4::RuntimeState&) const
[  762]    762     Code            0x0000000000029d0c 0x0000000102c51d0c 0x00000000000000dc 0x001e0080 dyld3::Map<char const*, bool, dyld3::HashCString, dyld3::EqualCString>::find(char const* const&)
[  763]    763     Code            0x0000000000029de8 0x0000000102c51de8 0x0000000000000070 0x001e0000 dyld4::PrebuiltLoaderSet::forEachCachePatch(void (dyld4::PrebuiltLoaderSet::CachePatch const&) block_pointer) const
[  764]    764     Code            0x0000000000029e58 0x0000000102c51e58 0x0000000000000730 0x001e0000 dyld4::PrebuiltLoaderSet::makeLaunchSet(Diagnostics&, dyld4::RuntimeState&, dyld4::MissingPaths const&)
[  765]    765     Code            0x000000000002a588 0x0000000102c52588 0x0000000000000014 0x000e0000 __Block_byref_object_copy_.203
[  766]    766     Code            0x000000000002a59c 0x0000000102c5259c 0x0000000000000048 0x000e0000 __Block_byref_object_dispose_.204
[  767]    767     Code            0x000000000002a5e4 0x0000000102c525e4 0x000000000000001c 0x000e0000 __Block_byref_object_copy_.205
[  768]    768     Code            0x000000000002a600 0x0000000102c52600 0x0000000000000024 0x000e0000 __Block_byref_object_dispose_.206
[  769]    769     Code            0x000000000002a624 0x0000000102c52624 0x0000000000000050 0x000e0000 invocation function for block in dyld4::PrebuiltLoaderSet::makeLaunchSet(Diagnostics&, dyld4::RuntimeState&, dyld4::MissingPaths const&)
[  770]    770     Code            0x000000000002a674 0x0000000102c52674 0x00000000000000e0 0x001e0080 dyld3::OverflowSafeArray<dyld4::PrebuiltLoaderSet::CachePatch, 4294967295ul>::push_back(dyld4::PrebuiltLoaderSet::CachePatch const&)
[  771]    771     Code            0x000000000002a754 0x0000000102c52754 0x000000000000006c 0x001e0000 dyld4::MissingPaths::forEachPath(void (char const*) block_pointer) const
[  772]    772     Code            0x000000000002a7c0 0x0000000102c527c0 0x000000000000008c 0x000e0000 invocation function for block in dyld4::PrebuiltLoaderSet::makeLaunchSet(Diagnostics&, dyld4::RuntimeState&, dyld4::MissingPaths const&)
[  773]    773     Code            0x000000000002a84c 0x0000000102c5284c 0x0000000000000090 0x001e0000 dyld4::BumpAllocator::finalize()
[  774]    774     Code            0x000000000002a8dc 0x0000000102c528dc 0x0000000000000034 0x001e0000 dyld4::PrebuiltLoaderSet::deallocate() const
[  775]    775     Code            0x000000000002a910 0x0000000102c52910 0x0000000000000048 0x001e0000 dyld4::BumpAllocator::~BumpAllocator()
[  776]    776     Code            0x000000000002a958 0x0000000102c52958 0x0000000000000070 0x001e0000 dyld4::MissingPaths::addPath(char const*)
[  777]    777     Code            0x000000000002a9c8 0x0000000102c529c8 0x0000000000000114 0x001e0080 dyld3::Map<char const*, bool, dyld3::HashCString, dyld3::EqualCString>::Map()
[  778]    778     Code            0x000000000002aadc 0x0000000102c52adc 0x00000000000000ec 0x001e0080 dyld3::OverflowSafeArray<std::__1::pair<char const*, bool>, 4294967295ul>::push_back(std::__1::pair<char const*, bool> const&)
[  779]    779     Code            0x000000000002abc8 0x0000000102c52bc8 0x0000000000000014 0x000e0000 OUTLINED_FUNCTION_0
[  780]    780     Code            0x000000000002abdc 0x0000000102c52bdc 0x0000000000000014 0x000e0000 OUTLINED_FUNCTION_1
[  781]    781     Code            0x000000000002abf0 0x0000000102c52bf0 0x0000000000000014 0x000e0000 OUTLINED_FUNCTION_2
[  782]    782     Code            0x000000000002ac04 0x0000000102c52c04 0x0000000000000014 0x000e0000 OUTLINED_FUNCTION_3
[  783]    783     Code            0x000000000002ac18 0x0000000102c52c18 0x0000000000000014 0x000e0000 OUTLINED_FUNCTION_4
[  784]    784     Code            0x000000000002ac2c 0x0000000102c52c2c 0x0000000000000014 0x000e0000 OUTLINED_FUNCTION_5
[  785]    785     Code            0x000000000002ac40 0x0000000102c52c40 0x000000000000004c 0x001e0000 dyld4::SyscallDelegate::amfiFlags(bool, bool) const
[  786]    786     Code            0x000000000002ac8c 0x0000000102c52c8c 0x0000000000000014 0x001e0000 dyld4::SyscallDelegate::internalInstall() const
[  787]    787     Code            0x000000000002aca0 0x0000000102c52ca0 0x0000000000000008 0x001e0000 dyld4::SyscallDelegate::isTranslated() const
[  788]    788     Code            0x000000000002aca8 0x0000000102c52ca8 0x0000000000000070 0x001e0000 dyld4::SyscallDelegate::getCWD(char*) const
[  789]    789     Code            0x000000000002ad18 0x0000000102c52d18 0x0000000000000030 0x001e0000 dyld4::SyscallDelegate::openLogFile(char const*) const
[  790]    790     Code            0x000000000002ad48 0x0000000102c52d48 0x0000000000000008 0x001e0000 dyld4::SyscallDelegate::onHaswell() const
[  791]    791     Code            0x000000000002ad50 0x0000000102c52d50 0x0000000000000060 0x001e0000 dyld4::SyscallDelegate::dtraceRegisterUserProbes(dof_ioctl_data*) const
[  792]    792     Code            0x000000000002adb0 0x0000000102c52db0 0x000000000000007c 0x001e0000 dyld4::SyscallDelegate::dtraceUnregisterUserProbe(int) const
[  793]    793     Code            0x000000000002ae2c 0x0000000102c52e2c 0x00000000000001a0 0x001e0000 dyld4::SyscallDelegate::forEachInDirectory(char const*, bool, void (char const*) block_pointer) const
[  794]    794     Code            0x000000000002afcc 0x0000000102c52fcc 0x000000000000015c 0x001e0000 dyld4::SyscallDelegate::getDylibInfo(char const*, dyld3::Platform, dyld3::GradedArchs const&, unsigned int&, char*) const
[  795]    795     Code            0x000000000002b128 0x0000000102c53128 0x000000000000000c 0x000e0000 __Block_byref_object_copy_
[  796]    796     Code            0x000000000002b134 0x0000000102c53134 0x0000000000000008 0x000e0000 __Block_byref_object_dispose_
[  797]    797     Code            0x000000000002b13c 0x0000000102c5313c 0x0000000000000044 0x001e0000 dyld4::SyscallDelegate::isContainerized(char const*) const
[  798]    798     Code            0x000000000002b180 0x0000000102c53180 0x0000000000000040 0x001e0000 dyld4::SyscallDelegate::isMaybeContainerized(char const*) const
[  799]    799     Code            0x000000000002b1c0 0x0000000102c531c0 0x0000000000000044 0x001e0000 dyld4::SyscallDelegate::dirExists(char const*) const
[  800]    800     Code            0x000000000002b204 0x0000000102c53204 0x0000000000000104 0x001e0000 dyld4::SyscallDelegate::mkdirs(char const*) const
[  801]    801     Code            0x000000000002b308 0x0000000102c53308 0x0000000000000058 0x001e0000 dyld4::SyscallDelegate::sandboxBlockedStat(char const*) const
[  802]    802     Code            0x000000000002b360 0x0000000102c53360 0x0000000000000010 0x001e0000 dyld4::SyscallDelegate::open(char const*, int, int) const
[  803]    803     Code            0x000000000002b370 0x0000000102c53370 0x0000000000000058 0x001e0000 dyld4::SyscallDelegate::sandboxBlockedOpen(char const*) const
[  804]    804     Code            0x000000000002b3c8 0x0000000102c533c8 0x0000000000000060 0x000e0000 invocation function for block in dyld4::SyscallDelegate::mapFileReadOnly(Diagnostics&, char const*, unsigned long*, dyld4::FileID*, bool*, char*) const
[  805]    805     Code            0x000000000002b428 0x0000000102c53428 0x000000000000000c 0x001e0000 dyld4::SyscallDelegate::unmapFile(void const*, unsigned long) const
[  806]    806     Code            0x000000000002b434 0x0000000102c53434 0x0000000000000060 0x001e0000 dyld4::SyscallDelegate::getFileAttribute(char const*, char const*, dyld3::Array<unsigned char>&) const
[  807]    807     Code            0x000000000002b494 0x0000000102c53494 0x00000000000000ac 0x001e0000 dyld4::SyscallDelegate::setFileAttribute(char const*, char const*, dyld3::Array<unsigned char> const&) const
[  808]    808     Code            0x000000000002b540 0x0000000102c53540 0x0000000000000318 0x001e0000 dyld4::SyscallDelegate::saveFileWithAttribute(Diagnostics&, char const*, void const*, unsigned long, char const*, dyld3::Array<unsigned char> const&) const
[  809]    809     Code            0x000000000002b858 0x0000000102c53858 0x0000000000000004 0x001e0000 dyld4::SyscallDelegate::getpid() const
[  810]    810     Code            0x000000000002b85c 0x0000000102c5385c 0x0000000000000058 0x001e0000 dyld4::SyscallDelegate::sandboxBlockedMmap(char const*) const
[  811]    811     Code            0x000000000002b8b4 0x0000000102c538b4 0x0000000000000010 0x001e0000 dyld4::SyscallDelegate::dyldCommPageFlags() const
[  812]    812     Code            0x000000000002b8c4 0x0000000102c538c4 0x000000000000003c 0x001e0000 dyld4::SyscallDelegate::setDyldCommPageFlags(dyld4::SyscallDelegate::DyldCommPage) const
[  813]    813     Code            0x000000000002b900 0x0000000102c53900 0x00000000000000a0 0x001e0000 dyld4::SyscallDelegate::bootVolumeWritable() const
[  814]    814     Code            0x000000000002b9a0 0x0000000102c539a0 0x0000000000000008 0x001e0000 dyld4::SyscallDelegate::close(int) const
[  815]    815     Code            0x000000000002b9a8 0x0000000102c539a8 0x0000000000000014 0x001e0000 dyld4::SyscallDelegate::pread(int, void*, unsigned long, unsigned long) const
[  816]    816     Code            0x000000000002b9bc 0x0000000102c539bc 0x0000000000000008 0x001e0000 dyld4::SyscallDelegate::unlink(char const*) const
[  817]    817     Code            0x000000000002b9c4 0x0000000102c539c4 0x000000000000000c 0x001e0000 dyld4::SyscallDelegate::fstat(int, stat*) const
[  818]    818     Code            0x000000000002b9d0 0x0000000102c539d0 0x000000000000000c 0x001e0000 dyld4::SyscallDelegate::munmap(void*, unsigned long) const
[  819]    819     Code            0x000000000002b9dc 0x0000000102c539dc 0x0000000000000010 0x001e0000 dyld4::SyscallDelegate::socket(int, int, int) const
[  820]    820     Code            0x000000000002b9ec 0x0000000102c539ec 0x0000000000000010 0x001e0000 dyld4::SyscallDelegate::connect(int, sockaddr const*, unsigned int) const
[  821]    821     Code            0x000000000002b9fc 0x0000000102c539fc 0x0000000000000018 0x001e0000 dyld4::SyscallDelegate::vm_protect(unsigned int, unsigned long, unsigned long, bool, unsigned int) const
[  822]    822     Code            0x000000000002ba14 0x0000000102c53a14 0x0000000000000018 0x001e0000 dyld4::SyscallDelegate::mremap_encrypted(void*, unsigned long, unsigned int, unsigned int, unsigned int) const
[  823]    823     Code            0x000000000002ba2c 0x0000000102c53a2c 0x00000000000000a8 0x001e0000 dyld4::addNonSharedCacheImageUUID(dyld4::Allocator&, dyld_uuid_info const&)
[  824]    824     Code            0x000000000002bad4 0x0000000102c53ad4 0x00000000000000d8 0x001e0080 dyld4::Vector<dyld_image_info>::reserve(unsigned long)
[  825]    825     Code            0x000000000002bbac 0x0000000102c53bac 0x0000000000000130 0x001e0000 dyld4::removeImageFromAllImages(mach_header const*)
[  826]    826     Code            0x000000000002bcdc 0x0000000102c53cdc 0x0000000000000060 0x001e0080 dyld4::Vector<dyld_image_info>::erase(dyld_image_info*)
[  827]    827     Code            0x000000000002bd3c 0x0000000102c53d3c 0x0000000000000060 0x001e0080 dyld4::Vector<dyld_uuid_info>::erase(dyld_uuid_info*)
[  828]    828     Code            0x000000000002bd9c 0x0000000102c53d9c 0x00000000000000f0 0x000e0000 lldb_image_notifier(dyld_image_mode, unsigned int, dyld_image_info const*)
[  829]    829     Code            0x000000000002be8c 0x0000000102c53e8c 0x00000000000000d8 0x001e0080 dyld4::Vector<dyld_uuid_info>::reserve(unsigned long)
[  830]    830     Code            0x000000000002bf64 0x0000000102c53f64 0x00000000000000b8 0x000e0000 dyld3::reuseExistingCache(dyld3::SharedCacheOptions const&, dyld3::SharedCacheLoadInfo*)
[  831]    831     Code            0x000000000002c01c 0x0000000102c5401c 0x0000000000000364 0x000e0000 dyld3::mapSplitCacheSystemWide(dyld3::SharedCacheOptions const&, dyld3::SharedCacheLoadInfo*)
[  832]    832     Code            0x000000000002c380 0x0000000102c54380 0x0000000000000034 0x001e0000 dyld3::deallocateExistingSharedCache()
[  833]    833     Code            0x000000000002c3b4 0x0000000102c543b4 0x0000000000000564 0x000e0000 dyld3::preflightCacheFile(dyld3::SharedCacheOptions const&, dyld3::SharedCacheLoadInfo*, dyld3::CacheInfo*, char*)
[  834]    834     Code            0x000000000002c918 0x0000000102c54918 0x0000000000000084 0x000e0000 dyld3::verboseSharedCacheMappings(DyldSharedCache const*)
[  835]    835     Code            0x000000000002c99c 0x0000000102c5499c 0x0000000000000034 0x000e0000 invocation function for block in dyld3::mapSplitCachePrivate(dyld3::SharedCacheOptions const&, dyld3::SharedCacheLoadInfo*)
[  836]    836     Code            0x000000000002c9d0 0x0000000102c549d0 0x0000000000000034 0x000e0000 invocation function for block in dyld3::mapSplitCachePrivate(dyld3::SharedCacheOptions const&, dyld3::SharedCacheLoadInfo*)
[  837]    837     Code            0x000000000002ca04 0x0000000102c54a04 0x0000000000000010 0x001e0080 std::__1::__throw_bad_optional_access()
[  838]    838     Code            0x000000000002ca14 0x0000000102c54a14 0x0000000000000078 0x000e0000 invocation function for block in dyld3::verboseSharedCacheMappings(DyldSharedCache const*)
[  839]    839     Code            0x000000000002ca8c 0x0000000102c54a8c 0x000000000000006c 0x000e0000 invocation function for block in dyld4::APIs::_dyld_get_image_header(unsigned int)
[  840]    840     Code            0x000000000002caf8 0x0000000102c54af8 0x0000000000000010 0x001e0080 __copy_helper_block_8_32r
[  841]    841     Code            0x000000000002cb08 0x0000000102c54b08 0x0000000000000024 0x001e0080 __destroy_helper_block_8_32r
[  842]    842     Code            0x000000000002cb2c 0x0000000102c54b2c 0x00000000000000d8 0x001e0000 dyld4::APIs::_dyld_get_image_vmaddr_slide(unsigned int)
[  843]    843     Code            0x000000000002cc04 0x0000000102c54c04 0x0000000000000088 0x000e0000 invocation function for block in dyld4::APIs::_dyld_get_image_vmaddr_slide(unsigned int)
[  844]    844     Code            0x000000000002cc8c 0x0000000102c54c8c 0x0000000000000098 0x000e0000 invocation function for block in dyld4::APIs::_dyld_get_image_name(unsigned int)
[  845]    845     Code            0x000000000002cd24 0x0000000102c54d24 0x0000000000000058 0x000e0000 invocation function for block in dyld4::APIs::NSVersionOfLinkTimeLibrary(char const*)
[  846]    846     Code            0x000000000002cd7c 0x0000000102c54d7c 0x00000000000000dc 0x001e0000 dyld4::APIs::NSVersionOfRunTimeLibrary(char const*)
[  847]    847     Code            0x000000000002ce58 0x0000000102c54e58 0x00000000000000c4 0x000e0000 invocation function for block in dyld4::APIs::NSVersionOfRunTimeLibrary(char const*)
[  848]    848     Code            0x000000000002cf1c 0x0000000102c54f1c 0x0000000000000104 0x001e0000 dyld4::APIs::dyld_get_program_sdk_watch_os_version()
[  849]    849     Code            0x000000000002d020 0x0000000102c55020 0x0000000000000060 0x000e0000 invocation function for block in dyld4::APIs::dyld_get_program_sdk_watch_os_version()
[  850]    850     Code            0x000000000002d080 0x0000000102c55080 0x0000000000000054 0x001e0080 __copy_helper_block_8_32r40r
[  851]    851     Code            0x000000000002d0d4 0x0000000102c550d4 0x00000000000000f4 0x001e0000 dyld4::APIs::dyld_get_program_min_watch_os_version()
[  852]    852     Code            0x000000000002d1c8 0x0000000102c551c8 0x0000000000000060 0x000e0000 invocation function for block in dyld4::APIs::dyld_get_program_min_watch_os_version()
[  853]    853     Code            0x000000000002d228 0x0000000102c55228 0x00000000000000f4 0x001e0000 dyld4::APIs::dyld_get_program_sdk_bridge_os_version()
[  854]    854     Code            0x000000000002d31c 0x0000000102c5531c 0x0000000000000060 0x000e0000 invocation function for block in dyld4::APIs::dyld_get_program_sdk_bridge_os_version()
[  855]    855     Code            0x000000000002d37c 0x0000000102c5537c 0x00000000000000f4 0x001e0000 dyld4::APIs::dyld_get_program_min_bridge_os_version()
[  856]    856     Code            0x000000000002d470 0x0000000102c55470 0x0000000000000080 0x000e0000 invocation function for block in dyld4::APIs::dyld_get_program_min_bridge_os_version()
[  857]    857     Code            0x000000000002d4f0 0x0000000102c554f0 0x000000000000007c 0x001e0000 dyld4::APIs::dyld_get_sdk_version(mach_header const*)
[  858]    858     Code            0x000000000002d56c 0x0000000102c5556c 0x00000000000000f4 0x001e0000 dyld4::APIs::dyld_get_min_os_version(mach_header const*)
[  859]    859     Code            0x000000000002d660 0x0000000102c55660 0x00000000000000a4 0x000e0000 invocation function for block in dyld4::APIs::dyld_get_min_os_version(mach_header const*)
[  860]    860     Code            0x000000000002d704 0x0000000102c55704 0x0000000000000064 0x001e0000 dyld4::APIs::dyld_get_base_platform(unsigned int)
[  861]    861     Code            0x000000000002d768 0x0000000102c55768 0x0000000000000070 0x001e0000 dyld4::APIs::dyld_is_simulator_platform(unsigned int)
[  862]    862     Code            0x000000000002d824 0x0000000102c55824 0x0000000000000074 0x000e0000 invocation function for block in dyld4::APIs::dyld_sdk_at_least(mach_header const*, dyld_build_version_t)
[  863]    863     Code            0x000000000002d898 0x0000000102c55898 0x0000000000000128 0x001e0000 dyld4::APIs::dyld_minos_at_least(mach_header const*, dyld_build_version_t)
[  864]    864     Code            0x000000000002d9c0 0x0000000102c559c0 0x000000000000008c 0x001e0000 dyld4::APIs::dyld_program_minos_at_least(dyld_build_version_t)
[  865]    865     Code            0x000000000002da4c 0x0000000102c55a4c 0x00000000000000a8 0x001e0000 dyld4::APIs::linkedDylibVersion(dyld3::MachOFile const*, char const*)
[  866]    866     Code            0x000000000002daf4 0x0000000102c55af4 0x000000000000007c 0x000e0000 invocation function for block in dyld4::APIs::linkedDylibVersion(dyld3::MachOFile const*, char const*)
[  867]    867     Code            0x000000000002db70 0x0000000102c55b70 0x000000000000011c 0x001e0000 dyld4::APIs::forEachPlatform(dyld3::MachOFile const*, void (unsigned int, unsigned int, unsigned int) block_pointer)
[  868]    868     Code            0x000000000002dc8c 0x0000000102c55c8c 0x00000000000000d4 0x000e0000 invocation function for block in dyld4::APIs::forEachPlatform(dyld3::MachOFile const*, void (unsigned int, unsigned int, unsigned int) block_pointer)
[  869]    869     Code            0x000000000002dd60 0x0000000102c55d60 0x0000000000000074 0x001e0000 dyld4::APIs::dyld_get_image_versions(mach_header const*, void (unsigned int, unsigned int, unsigned int) block_pointer)
[  870]    870     Code            0x000000000002ddd4 0x0000000102c55dd4 0x0000000000000050 0x001e0000 dyld4::APIs::dyld_get_program_min_os_version()
[  871]    871     Code            0x000000000002de24 0x0000000102c55e24 0x0000000000000138 0x001e0000 dyld4::APIs::_dyld_register_func_for_add_image(void (*)(mach_header const*, long))
[  872]    872     Code            0x000000000002df5c 0x0000000102c55f5c 0x00000000000000ac 0x001e0000 dyld4::APIs::findImageContaining(void*)
[  873]    873     Code            0x000000000002e008 0x0000000102c56008 0x0000000000000040 0x000e0000 invocation function for block in dyld4::APIs::_dyld_register_func_for_add_image(void (*)(mach_header const*, long))
[  874]    874     Code            0x000000000002e048 0x0000000102c56048 0x0000000000000034 0x000e0000 invocation function for block in dyld4::APIs::_dyld_register_func_for_remove_image(void (*)(mach_header const*, long))
[  875]    875     Code            0x000000000002e07c 0x0000000102c5607c 0x000000000000008c 0x000e0000 invocation function for block in dyld4::APIs::findImageMappedAt(void const*, dyld3::MachOLoaded const**, bool*, char const**, void const**, unsigned long long*, unsigned char*)
[  876]    876     Code            0x000000000002e108 0x0000000102c56108 0x0000000000000158 0x000e0000 invocation function for block in dyld4::APIs::findImageMappedAt(void const*, dyld3::MachOLoaded const**, bool*, char const**, void const**, unsigned long long*, unsigned char*)
[  877]    877     Code            0x000000000002e260 0x0000000102c56260 0x000000000000003c 0x000e0000 invocation function for block in dyld4::APIs::dladdr(void const*, dl_info*)
[  878]    878     Code            0x000000000002e29c 0x0000000102c5629c 0x0000000000000068 0x001e0000 dyld4::APIs::clearErrorString()
[  879]    879     Code            0x000000000002e304 0x0000000102c56304 0x00000000000000cc 0x001e0000 dyld4::APIs::dlerror()
[  880]    880     Code            0x000000000002e3d0 0x0000000102c563d0 0x000000000000001c 0x000e0000 __Block_byref_object_copy_
[  881]    881     Code            0x000000000002e3ec 0x0000000102c563ec 0x0000000000000034 0x000e0000 __Block_byref_object_dispose_
[  882]    882     Code            0x000000000002e420 0x0000000102c56420 0x00000000000000e0 0x001e0080 dyld3::OverflowSafeArray<dyld4::Loader const*, 4294967295ul>::push_back(dyld4::Loader const* const&)
[  883]    883     Code            0x000000000002e500 0x0000000102c56500 0x0000000000000060 0x001e0080 __copy_helper_block_8_32r40r48r
[  884]    884     Code            0x000000000002e560 0x0000000102c56560 0x0000000000000050 0x001e0080 __destroy_helper_block_8_32r40r48r
[  885]    885     Code            0x000000000002e5b0 0x0000000102c565b0 0x0000000000000180 0x001e0000 dyld4::APIs::dlclose(void*)
[  886]    886     Code            0x000000000002e730 0x0000000102c56730 0x00000000000002b8 0x001e0000 dyld4::APIs::dlopen_preflight(char const*)
[  887]    887     Code            0x000000000002e9e8 0x0000000102c569e8 0x000000000000000c 0x000e0000 __Block_byref_object_copy_.118
[  888]    888     Code            0x000000000002e9f4 0x0000000102c569f4 0x0000000000000008 0x000e0000 __Block_byref_object_dispose_.119
[  889]    889     Code            0x000000000002e9fc 0x0000000102c569fc 0x0000000000000194 0x000e0000 invocation function for block in dyld4::APIs::dlopen_preflight(char const*)
[  890]    890     Code            0x000000000002eb90 0x0000000102c56b90 0x0000000000000060 0x000e0000 invocation function for block in dyld4::APIs::dlopen_preflight(char const*)
[  891]    891     Code            0x000000000002ebf0 0x0000000102c56bf0 0x0000000000000058 0x001e0000 dyld4::APIs::dlopen_audited(char const*, int)
[  892]    892     Code            0x000000000002ec60 0x0000000102c56c60 0x0000000000000014 0x000e0000 __Block_byref_object_copy_.133
[  893]    893     Code            0x000000000002ec74 0x0000000102c56c74 0x0000000000000004 0x000e0000 __Block_byref_object_dispose_.134
[  894]    894     Code            0x000000000002ec78 0x0000000102c56c78 0x000000000000008c 0x001e0000 dyld4::APIs::_dyld_shared_cache_optimized()
[  895]    895     Code            0x000000000002ed04 0x0000000102c56d04 0x0000000000000104 0x001e0000 dyld4::APIs::_dyld_register_for_image_loads(void (*)(mach_header const*, char const*, bool))
[  896]    896     Code            0x000000000002ee08 0x0000000102c56e08 0x00000000000000ec 0x000e0000 invocation function for block in dyld4::APIs::_dyld_register_for_image_loads(void (*)(mach_header const*, char const*, bool))
[  897]    897     Code            0x000000000002eef4 0x0000000102c56ef4 0x000000000000002c 0x000e0000 invocation function for block in dyld4::APIs::_dyld_register_for_image_loads(void (*)(mach_header const*, char const*, bool))
[  898]    898     Code            0x000000000002ef20 0x0000000102c56f20 0x000000000000001c 0x000e0000 invocation function for block in dyld4::APIs::_dyld_register_for_bulk_image_loads(void (*)(unsigned int, mach_header const**, char const**))
[  899]    899     Code            0x000000000002ef3c 0x0000000102c56f3c 0x0000000000000048 0x001e0000 dyld4::APIs::dyld_shared_cache_file_path()
[  900]    900     Code            0x000000000002ef84 0x0000000102c56f84 0x0000000000000064 0x001e0000 dyld4::APIs::dyld_has_inserted_or_interposing_libraries()
[  901]    901     Code            0x000000000002efe8 0x0000000102c56fe8 0x000000000000021c 0x001e0000 dyld4::APIs::dyld_shared_cache_find_iterate_text(unsigned char const*, char const**, void (dyld_shared_cache_dylib_text_info const*) block_pointer)
[  902]    902     Code            0x000000000002f204 0x0000000102c57204 0x00000000000000d0 0x000e0000 dyld4::findCacheInDirAndMap(dyld4::RuntimeState&, unsigned char const*, char const*, unsigned long&)
[  903]    903     Code            0x000000000002f2d4 0x0000000102c572d4 0x0000000000000084 0x000e0000 invocation function for block in dyld4::APIs::dyld_shared_cache_find_iterate_text(unsigned char const*, char const**, void (dyld_shared_cache_dylib_text_info const*) block_pointer)
[  904]    904     Code            0x000000000002f358 0x0000000102c57358 0x0000000000000080 0x001e0000 dyld4::APIs::dyld_shared_cache_iterate_text(unsigned char const*, void (dyld_shared_cache_dylib_text_info const*) block_pointer)
[  905]    905     Code            0x000000000002f3d8 0x0000000102c573d8 0x0000000000000054 0x001e0000 dyld4::APIs::_dyld_fork_child()
[  906]    906     Code            0x000000000002f42c 0x0000000102c5742c 0x0000000000000004 0x001e0000 dyld4::APIs::_dyld_atfork_prepare()
[  907]    907     Code            0x000000000002f430 0x0000000102c57430 0x0000000000000004 0x001e0000 dyld4::APIs::_dyld_atfork_parent()
[  908]    908     Code            0x000000000002f434 0x0000000102c57434 0x0000000000000004 0x001e0000 dyld4::APIs::_dyld_before_fork_dlopen()
[  909]    909     Code            0x000000000002f438 0x0000000102c57438 0x0000000000000004 0x001e0000 dyld4::APIs::_dyld_after_fork_dlopen_parent()
[  910]    910     Code            0x000000000002f43c 0x0000000102c5743c 0x0000000000000014 0x001e0000 dyld4::APIs::_dyld_after_fork_dlopen_child()
[  911]    911     Code            0x000000000002f450 0x0000000102c57450 0x0000000000000010 0x001e0080 __copy_helper_block_8_32b
[  912]    912     Code            0x000000000002f460 0x0000000102c57460 0x000000000000000c 0x001e0080 __destroy_helper_block_8_32b
[  913]    913     Code            0x000000000002f46c 0x0000000102c5746c 0x00000000000000f4 0x001e0080 legacy_objc_opt::objc_clsopt_t::getClassesAndHeaders(char const*, void**, void**) const
[  914]    914     Code            0x000000000002f560 0x0000000102c57560 0x000000000000010c 0x001e0000 dyld4::APIs::_dyld_visit_objc_classes(void (void const*) block_pointer)
[  915]    915     Code            0x000000000002f66c 0x0000000102c5766c 0x0000000000000208 0x001e0080 legacy_objc_opt::objc_clsopt_t::forEachClass(void (dyld3::Array<void const*> const&) block_pointer) const
[  916]    916     Code            0x000000000002f874 0x0000000102c57874 0x0000000000000054 0x000e0000 invocation function for block in dyld4::APIs::_dyld_visit_objc_classes(void (void const*) block_pointer)
[  917]    917     Code            0x000000000002f8c8 0x0000000102c578c8 0x0000000000000034 0x001e0000 dyld4::APIs::_dyld_objc_uses_large_shared_cache()
[  918]    918     Code            0x000000000002f8fc 0x0000000102c578fc 0x0000000000000010 0x001e0000 dyld4::APIs::_dyld_swift_optimizations_version() const
[  919]    919     Code            0x000000000002f90c 0x0000000102c5790c 0x0000000000000044 0x001e0000 dyld4::APIs::_dyld_has_fix_for_radar(char const*)
[  920]    920     Code            0x000000000002f950 0x0000000102c57950 0x00000000000000b4 0x001e0000 dyld4::APIs::_dyld_register_driverkit_main(void (*)())
[  921]    921     Code            0x000000000002fa04 0x0000000102c57a04 0x0000000000000060 0x001e0000 dyld4::APIs::_dyld_shared_cache_is_locally_built()
[  922]    922     Code            0x000000000002fa64 0x0000000102c57a64 0x0000000000000030 0x001e0000 dyld4::APIs::dyld_need_closure(char const*, char const*)
[  923]    923     Code            0x000000000002fa94 0x0000000102c57a94 0x0000000000000034 0x001e0000 dyld4::APIs::_dyld_missing_symbol_abort()
[  924]    924     Code            0x000000000002fac8 0x0000000102c57ac8 0x0000000000000010 0x001e0000 dyld4::APIs::_tlv_bootstrap()
[  925]    925     Code            0x000000000002fad8 0x0000000102c57ad8 0x0000000000000054 0x001e0000 dyld4::APIs::obsolete()
[  926]    926     Code            0x000000000002fb2c 0x0000000102c57b2c 0x0000000000000268 0x000e0000 dyld4::notifyMonitoringDyld(dyld4::RemoteNotificationResponder&, bool, unsigned int, mach_header const**, char const**)
[  927]    927     Code            0x000000000002fd94 0x0000000102c57d94 0x0000000000000038 0x001e0000 dyld4::APIs::NSCreateObjectFileImageFromFile(char const*, __NSObjectFileImage**)
[  928]    928     Code            0x000000000002fdcc 0x0000000102c57dcc 0x0000000000000038 0x001e0000 dyld4::APIs::NSCreateObjectFileImageFromMemory(void const*, unsigned long, __NSObjectFileImage**)
[  929]    929     Code            0x000000000002fe04 0x0000000102c57e04 0x0000000000000038 0x001e0000 dyld4::APIs::NSLinkModule(__NSObjectFileImage*, char const*, unsigned int)
[  930]    930     Code            0x000000000002fe3c 0x0000000102c57e3c 0x0000000000000038 0x001e0000 dyld4::APIs::NSUnLinkModule(__NSModule*, unsigned int)
[  931]    931     Code            0x000000000002fe74 0x0000000102c57e74 0x0000000000000038 0x001e0000 dyld4::APIs::NSDestroyObjectFileImage(__NSObjectFileImage*)
[  932]    932     Code            0x000000000002feac 0x0000000102c57eac 0x0000000000000038 0x001e0000 dyld4::APIs::NSIsSymbolDefinedInObjectFileImage(__NSObjectFileImage*, char const*)
[  933]    933     Code            0x000000000002fee4 0x0000000102c57ee4 0x0000000000000038 0x001e0000 dyld4::APIs::NSGetSectionDataInObjectFileImage(__NSObjectFileImage*, char const*, char const*, unsigned long*)
[  934]    934     Code            0x000000000002ff1c 0x0000000102c57f1c 0x0000000000000038 0x001e0000 dyld4::APIs::NSNameOfModule(__NSModule*)
[  935]    935     Code            0x000000000002ff54 0x0000000102c57f54 0x000000000000005c 0x001e0000 dyld4::APIs::NSLibraryNameForModule(__NSModule*)
[  936]    936     Code            0x000000000002ffb0 0x0000000102c57fb0 0x0000000000000038 0x001e0000 dyld4::APIs::NSIsSymbolNameDefined(char const*)
[  937]    937     Code            0x000000000002ffe8 0x0000000102c57fe8 0x0000000000000038 0x001e0000 dyld4::APIs::NSIsSymbolNameDefinedWithHint(char const*, char const*)
[  938]    938     Code            0x0000000000030020 0x0000000102c58020 0x0000000000000038 0x001e0000 dyld4::APIs::NSIsSymbolNameDefinedInImage(mach_header const*, char const*)
[  939]    939     Code            0x0000000000030058 0x0000000102c58058 0x0000000000000038 0x001e0000 dyld4::APIs::NSLookupAndBindSymbol(char const*)
[  940]    940     Code            0x0000000000030090 0x0000000102c58090 0x0000000000000038 0x001e0000 dyld4::APIs::NSLookupAndBindSymbolWithHint(char const*, char const*)
[  941]    941     Code            0x00000000000300c8 0x0000000102c580c8 0x0000000000000038 0x001e0000 dyld4::APIs::NSLookupSymbolInModule(__NSModule*, char const*)
[  942]    942     Code            0x0000000000030100 0x0000000102c58100 0x0000000000000038 0x001e0000 dyld4::APIs::NSLookupSymbolInImage(mach_header const*, char const*, unsigned int)
[  943]    943     Code            0x0000000000030138 0x0000000102c58138 0x0000000000000038 0x001e0000 dyld4::APIs::NSAddressOfSymbol(__NSSymbol*)
[  944]    944     Code            0x0000000000030170 0x0000000102c58170 0x0000000000000038 0x001e0000 dyld4::APIs::NSModuleForSymbol(__NSSymbol*)
[  945]    945     Code            0x00000000000301a8 0x0000000102c581a8 0x0000000000000038 0x001e0000 dyld4::APIs::NSLinkEditError(NSLinkEditErrors*, int*, char const**, char const**)
[  946]    946     Code            0x00000000000301e0 0x0000000102c581e0 0x0000000000000038 0x001e0000 dyld4::APIs::NSAddLibrary(char const*)
[  947]    947     Code            0x0000000000030218 0x0000000102c58218 0x0000000000000038 0x001e0000 dyld4::APIs::NSAddLibraryWithSearching(char const*)
[  948]    948     Code            0x0000000000030250 0x0000000102c58250 0x0000000000000038 0x001e0000 dyld4::APIs::NSAddImage(char const*, unsigned int)
[  949]    949     Code            0x0000000000030288 0x0000000102c58288 0x0000000000000038 0x001e0000 dyld4::APIs::_dyld_image_containing_address(void const*)
[  950]    950     Code            0x00000000000302c0 0x0000000102c582c0 0x0000000000000038 0x001e0000 dyld4::APIs::_dyld_lookup_and_bind(char const*, void**, __NSModule**)
[  951]    951     Code            0x00000000000302f8 0x0000000102c582f8 0x0000000000000038 0x001e0000 dyld4::APIs::_dyld_lookup_and_bind_with_hint(char const*, char const*, void**, __NSModule**)
[  952]    952     Code            0x0000000000030330 0x0000000102c58330 0x0000000000000038 0x001e0000 dyld4::APIs::_dyld_lookup_and_bind_fully(char const*, void**, __NSModule**)
[  953]    953     Code            0x0000000000030368 0x0000000102c58368 0x0000000000000170 0x001e0000 dyld4::APIs::runAllInitializersForMain()
[  954]    954     Code            0x00000000000304d8 0x0000000102c584d8 0x00000000000000e4 0x001e0080 dyld4::RuntimeState::RuntimeState(dyld4::ProcessConfig const&, dyld4::RuntimeLocks&, dyld4::Allocator&)
[  955]    955     Code            0x00000000000305bc 0x0000000102c585bc 0x0000000000000190 0x000e0000 invocation function for block in dyld4::findCacheInDirAndMap(dyld4::RuntimeState&, unsigned char const*, char const*, unsigned long&)
[  956]    956     Code            0x000000000003074c 0x0000000102c5874c 0x00000000000000d0 0x001e0080 legacy_objc_opt::objc_stringhash_t::getIndex(char const*) const
[  957]    957     Code            0x000000000003081c 0x0000000102c5881c 0x00000000000000c4 0x001e0080 legacy_objc_opt::objc_clsopt_t::getClassHeaderAndIndex(char const*, void*&, void*&, unsigned int&) const
[  958]    958     Code            0x00000000000308e0 0x0000000102c588e0 0x00000000000000fc 0x001e0080 dyld4::RemoteNotificationResponder::RemoteNotificationResponder()
[  959]    959     Code            0x00000000000309dc 0x0000000102c589dc 0x000000000000007c 0x001e0080 dyld4::RemoteNotificationResponder::~RemoteNotificationResponder()
[  960]    960     Code            0x0000000000030a58 0x0000000102c58a58 0x0000000000000094 0x001e0080 unsigned int SwiftHashTable::getPotentialTarget<SwiftForeignTypeProtocolConformanceLookupKey, SwiftForeignTypeProtocolConformanceLocationKey>(SwiftForeignTypeProtocolConformanceLookupKey const&, unsigned char const*) const
[  961]    961     Code            0x0000000000030aec 0x0000000102c58aec 0x0000000000000014 0x000e0000 OUTLINED_FUNCTION_0
[  962]    962     Code            0x0000000000030b00 0x0000000102c58b00 0x00000000000000b8 0x001e0000 dyld4::ObjCStringTable::getString(char const*, dyld4::RuntimeState&) const
[  963]    963     Code            0x0000000000030bb8 0x0000000102c58bb8 0x0000000000000070 0x001e0080 dyld4::ObjCStringTable::getPotentialTarget(char const*) const
[  964]    964     Code            0x0000000000030c28 0x0000000102c58c28 0x0000000000000230 0x001e0000 dyld4::ObjCStringTable::write(objc::PerfectHash const&, dyld3::Array<std::__1::pair<char const*, dyld4::Loader::BindTarget> > const&)
[  965]    965     Code            0x0000000000030e58 0x0000000102c58e58 0x00000000000001a8 0x001e0000 dyld4::ObjCClassOpt::forEachClass(dyld4::RuntimeState&, void (dyld4::PrebuiltLoader::BindTargetRef const&, dyld3::Array<dyld4::PrebuiltLoader::BindTargetRef> const&) block_pointer) const
[  966]    966     Code            0x0000000000031000 0x0000000102c59000 0x00000000000001c4 0x001e0000 dyld4::ObjCClassOpt::write(objc::PerfectHash const&, dyld3::Array<std::__1::pair<char const*, dyld4::Loader::BindTarget> > const&, dyld3::MultiMap<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString> const&, unsigned int, unsigned int)
[  967]    967     Code            0x00000000000311c4 0x0000000102c591c4 0x0000000000000014 0x000e0000 __Block_byref_object_copy_
[  968]    968     Code            0x00000000000311d8 0x0000000102c591d8 0x0000000000000004 0x000e0000 __Block_byref_object_dispose_
[  969]    969     Code            0x00000000000311dc 0x0000000102c591dc 0x00000000000001c4 0x001e0080 dyld3::MultiMap<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString>::forEachEntry(void (char const* const&, dyld4::Loader::BindTarget const**, unsigned long long) block_pointer) const
[  970]    970     Code            0x00000000000313a0 0x0000000102c593a0 0x0000000000000150 0x000e0000 invocation function for block in dyld4::ObjCClassOpt::write(objc::PerfectHash const&, dyld3::Array<std::__1::pair<char const*, dyld4::Loader::BindTarget> > const&, dyld3::MultiMap<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString> const&, unsigned int, unsigned int)
[  971]    971     Code            0x00000000000314f0 0x0000000102c594f0 0x0000000000000038 0x001e0080 dyld3::Array<dyld4::PrebuiltLoader::BindTargetRef>::push_back(dyld4::PrebuiltLoader::BindTargetRef const&)
[  972]    972     Code            0x0000000000031528 0x0000000102c59528 0x0000000000000098 0x001e0000 dyld4::PrebuiltObjC::ObjCOptimizerImage::ObjCOptimizerImage(dyld4::JustInTimeLoader const*, unsigned long long, unsigned int)
[  973]    973     Code            0x00000000000315c0 0x0000000102c595c0 0x00000000000000f8 0x001e0000 dyld4::PrebuiltObjC::ObjCOptimizerImage::visitReferenceToObjCSelector(objc::SelectorHashTable const*, dyld3::Map<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString> const&, unsigned long long, unsigned long long, char const*)
[  974]    974     Code            0x00000000000316b8 0x0000000102c596b8 0x00000000000000ec 0x001e0080 dyld3::Map<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString>::find(char const* const&) const
[  975]    975     Code            0x00000000000317a4 0x0000000102c597a4 0x0000000000000278 0x001e0080 dyld3::Map<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString>::insert(std::__1::pair<char const*, dyld4::Loader::BindTarget>&&)
[  976]    976     Code            0x0000000000031a1c 0x0000000102c59a1c 0x00000000000000c0 0x001e0000 dyld4::PrebuiltObjC::ObjCOptimizerImage::visitClass(void const*, objc::ClassHashTable const*, dyld3::Map<unsigned short, std::__1::pair<dyld3::MachOAnalyzer const*, dyld4::Loader const*>, dyld4::HashUInt16, dyld4::EqualUInt16> const&, dyld3::Map<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString> const&, unsigned long long, unsigned long long, char const*)
[  977]    977     Code            0x0000000000031adc 0x0000000102c59adc 0x0000000000000104 0x001e0080 dyld3::OverflowSafeArray<dyld4::PrebuiltObjC::ObjCOptimizerImage::ObjCObject, 4294967295ul>::push_back(dyld4::PrebuiltObjC::ObjCOptimizerImage::ObjCObject const&)
[  978]    978     Code            0x0000000000031be0 0x0000000102c59be0 0x0000000000000128 0x001e0000 dyld4::PrebuiltObjC::ObjCOptimizerImage::visitProtocol(objc::ProtocolHashTable const*, dyld3::Map<unsigned short, std::__1::pair<dyld3::MachOAnalyzer const*, dyld4::Loader const*>, dyld4::HashUInt16, dyld4::EqualUInt16> const&, unsigned long long, unsigned long long, char const*)
[  979]    979     Code            0x0000000000031d08 0x0000000102c59d08 0x00000000000000d8 0x001e0080 dyld3::OverflowSafeArray<bool, 4294967295ul>::push_back(bool const&)
[  980]    980     Code            0x0000000000031de0 0x0000000102c59de0 0x0000000000000118 0x001e0000 dyld4::PrebuiltObjC::~PrebuiltObjC()
[  981]    981     Code            0x0000000000031ef8 0x0000000102c59ef8 0x00000000000000dc 0x001e0000 dyld4::PrebuiltObjC::commitImage(dyld4::PrebuiltObjC::ObjCOptimizerImage const&)
[  982]    982     Code            0x0000000000031fd4 0x0000000102c59fd4 0x000000000000010c 0x001e0000 dyld4::PrebuiltObjC::generateHashTables(dyld4::RuntimeState&)
[  983]    983     Code            0x00000000000320e0 0x0000000102c5a0e0 0x0000000000000348 0x001e0000 dyld4::PrebuiltObjC::generatePerImageFixups(dyld4::RuntimeState&, unsigned int)
[  984]    984     Code            0x0000000000032428 0x0000000102c5a428 0x0000000000000100 0x001e0080 dyld3::OverflowSafeArray<dyld4::PrebuiltObjC::ObjCImageFixups, 4294967295ul>::default_constuct_back()
[  985]    985     Code            0x0000000000032528 0x0000000102c5a528 0x00000000000000d0 0x001e0080 dyld3::OverflowSafeArray<unsigned char, 4294967295ul>::reserve(unsigned long)
[  986]    986     Code            0x00000000000325f8 0x0000000102c5a5f8 0x00000000000000d8 0x001e0080 dyld3::OverflowSafeArray<unsigned char, 4294967295ul>::push_back(unsigned char const&)
[  987]    987     Code            0x00000000000326d0 0x0000000102c5a6d0 0x0000000000000064 0x000e0000 invocation function for block in dyld4::PrebuiltObjC::forEachSelectorReferenceToUnique(dyld4::RuntimeState&, dyld3::MachOAnalyzer const*, unsigned long long, dyld4::ObjCBinaryInfo const&, dyld3::MachOAnalyzer::VMAddrConverter const&, void (unsigned long long, unsigned long long) block_pointer)
[  988]    988     Code            0x0000000000032734 0x0000000102c5a734 0x0000000000000050 0x000e0000 invocation function for block in dyld4::PrebuiltObjC::forEachSelectorReferenceToUnique(dyld4::RuntimeState&, dyld3::MachOAnalyzer const*, unsigned long long, dyld4::ObjCBinaryInfo const&, dyld3::MachOAnalyzer::VMAddrConverter const&, void (unsigned long long, unsigned long long) block_pointer)
[  989]    989     Code            0x0000000000032784 0x0000000102c5a784 0x0000000000000058 0x000e0000 invocation function for block in dyld4::PrebuiltObjC::forEachSelectorReferenceToUnique(dyld4::RuntimeState&, dyld3::MachOAnalyzer const*, unsigned long long, dyld4::ObjCBinaryInfo const&, dyld3::MachOAnalyzer::VMAddrConverter const&, void (unsigned long long, unsigned long long) block_pointer)
[  990]    990     Code            0x00000000000327dc 0x0000000102c5a7dc 0x0000000000000080 0x000e0000 invocation function for block in dyld4::PrebuiltObjC::forEachSelectorReferenceToUnique(dyld4::RuntimeState&, dyld3::MachOAnalyzer const*, unsigned long long, dyld4::ObjCBinaryInfo const&, dyld3::MachOAnalyzer::VMAddrConverter const&, void (unsigned long long, unsigned long long) block_pointer)
[  991]    991     Code            0x000000000003285c 0x0000000102c5a85c 0x000000000000022c 0x001e0080 dyld3::Map<unsigned short, std::__1::pair<dyld3::MachOAnalyzer const*, dyld4::Loader const*>, dyld4::HashUInt16, dyld4::EqualUInt16>::insert(std::__1::pair<unsigned short, std::__1::pair<dyld3::MachOAnalyzer const*, dyld4::Loader const*> >&&)
[  992]    992     Code            0x0000000000032a88 0x0000000102c5aa88 0x0000000000000128 0x001e0080 void dyld3::OverflowSafeArray<dyld4::PrebuiltObjC::ObjCOptimizerImage, 4294967295ul>::emplace_back<dyld4::JustInTimeLoader const*, unsigned long long, unsigned int&>(dyld4::JustInTimeLoader const*&&, unsigned long long&&, unsigned int&)
[  993]    993     Code            0x0000000000032bb0 0x0000000102c5abb0 0x0000000000000098 0x000e0000 invocation function for block in dyld4::PrebuiltObjC::make(Diagnostics&, dyld4::RuntimeState&)
[  994]    994     Code            0x0000000000032c48 0x0000000102c5ac48 0x0000000000000174 0x001e0000 dyld4::PrebuiltObjC::serializeFixups(dyld4::Loader const&, dyld4::BumpAllocator&) const
[  995]    995     Code            0x0000000000032dbc 0x0000000102c5adbc 0x0000000000000054 0x001e0000 legacy_objc_opt::objc_stringhash_t::hash(char const*, unsigned long) const
[  996]    996     Code            0x0000000000032e10 0x0000000102c5ae10 0x0000000000000048 0x001e0000 legacy_objc_opt::getPreoptimizedHeaderRW(legacy_objc_opt::header_info const*, void*, void*)
[  997]    997     Code            0x0000000000032e58 0x0000000102c5ae58 0x000000000000004c 0x001e0080 legacy_objc_opt::objc_headeropt_ro_t::index(legacy_objc_opt::header_info const*) const
[  998]    998     Code            0x0000000000032ea4 0x0000000102c5aea4 0x00000000000000cc 0x000e0000 invocation function for block in dyld4::checkForDuplicateClass(void const*, char const*, objc::ClassHashTable const*, dyld3::Map<unsigned short, std::__1::pair<dyld3::MachOAnalyzer const*, dyld4::Loader const*>, dyld4::HashUInt16, dyld4::EqualUInt16> const&, dyld3::Map<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString> const&, dyld4::PrebuiltObjC::ObjCOptimizerImage&)
[  999]    999     Code            0x0000000000032f70 0x0000000102c5af70 0x0000000000000094 0x001e0080 dyld3::Map<unsigned short, std::__1::pair<dyld3::MachOAnalyzer const*, dyld4::Loader const*>, dyld4::HashUInt16, dyld4::EqualUInt16>::find(unsigned short const&) const
[ 1000]   1000     Code            0x0000000000033004 0x0000000102c5b004 0x000000000000006c 0x000e0000 invocation function for block in dyld4::protocolIsInSharedCache(char const*, objc::ProtocolHashTable const*, dyld3::Map<unsigned short, std::__1::pair<dyld3::MachOAnalyzer const*, dyld4::Loader const*>, dyld4::HashUInt16, dyld4::EqualUInt16> const&)
[ 1001]   1001     Code            0x0000000000033070 0x0000000102c5b070 0x00000000000000fc 0x001e0080 dyld4::PrebuiltObjC::ObjCOptimizerImage::~ObjCOptimizerImage()
[ 1002]   1002     Code            0x000000000003316c 0x0000000102c5b16c 0x000000000000008c 0x001e0080 dyld3::Map<unsigned long long, unsigned int, dyld4::HashUInt64, dyld4::EqualUInt64>::find(unsigned long long const&)
[ 1003]   1003     Code            0x00000000000331f8 0x0000000102c5b1f8 0x00000000000002f4 0x001e0080 dyld3::MultiMap<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString>::insert(std::__1::pair<char const*, dyld4::Loader::BindTarget>&&)
[ 1004]   1004     Code            0x00000000000334ec 0x0000000102c5b4ec 0x0000000000000034 0x000e0000 invocation function for block in dyld4::writeClassOrProtocolHashTable(dyld4::RuntimeState&, bool, dyld3::Array<dyld4::PrebuiltObjC::ObjCOptimizerImage>&, dyld3::OverflowSafeArray<unsigned char, 4294967295ul>&, dyld3::Map<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString> const&)
[ 1005]   1005     Code            0x0000000000033520 0x0000000102c5b520 0x0000000000000114 0x001e0080 dyld3::MultiMap<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString>::MultiMap()
[ 1006]   1006     Code            0x0000000000033634 0x0000000102c5b634 0x00000000000000f4 0x001e0080 dyld3::OverflowSafeArray<std::__1::tuple<char const*, dyld4::Loader::BindTarget, dyld3::MultiMap<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString>::NextNode>, 4294967295ul>::push_back(std::__1::tuple<char const*, dyld4::Loader::BindTarget, dyld3::MultiMap<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString>::NextNode> const&)
[ 1007]   1007     Code            0x0000000000033728 0x0000000102c5b728 0x0000000000000080 0x001e0080 objc::objc_headeropt_ro_t<unsigned long long>::get(mach_header const*)
[ 1008]   1008     Code            0x00000000000337a8 0x0000000102c5b7a8 0x000000000000004c 0x001e0080 objc::objc_headeropt_ro_t<unsigned long long>::index(objc::objc_header_info_ro_t<unsigned long long> const*) const
[ 1009]   1009     Code            0x00000000000337f4 0x0000000102c5b7f4 0x0000000000000080 0x001e0080 objc::objc_headeropt_ro_t<unsigned int>::get(mach_header const*)
[ 1010]   1010     Code            0x0000000000033874 0x0000000102c5b874 0x000000000000004c 0x001e0080 objc::objc_headeropt_ro_t<unsigned int>::index(objc::objc_header_info_ro_t<unsigned int> const*) const
[ 1011]   1011     Code            0x00000000000338c0 0x0000000102c5b8c0 0x0000000000000118 0x000e0000 invocation function for block in dyld4::optimizeObjCClasses(dyld4::RuntimeState&, objc::ClassHashTable const*, dyld3::Map<unsigned short, std::__1::pair<dyld3::MachOAnalyzer const*, dyld4::Loader const*>, dyld4::HashUInt16, dyld4::EqualUInt16> const&, dyld3::Map<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString> const&, dyld4::PrebuiltObjC::ObjCOptimizerImage&)
[ 1012]   1012     Code            0x00000000000339d8 0x0000000102c5b9d8 0x0000000000000078 0x000e0000 invocation function for block in dyld4::optimizeObjCProtocols(dyld4::RuntimeState&, objc::ProtocolHashTable const*, dyld3::Map<unsigned short, std::__1::pair<dyld3::MachOAnalyzer const*, dyld4::Loader const*>, dyld4::HashUInt16, dyld4::EqualUInt16> const&, dyld4::PrebuiltObjC::ObjCOptimizerImage&)
[ 1013]   1013     Code            0x0000000000033a50 0x0000000102c5ba50 0x0000000000000098 0x000e0000 invocation function for block in dyld4::optimizeObjCSelectors(dyld4::RuntimeState&, objc::SelectorHashTable const*, dyld3::Map<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString> const&, dyld4::PrebuiltObjC::ObjCOptimizerImage&)
[ 1014]   1014     Code            0x0000000000033ae8 0x0000000102c5bae8 0x000000000000005c 0x000e0000 invocation function for block in dyld4::optimizeObjCSelectors(dyld4::RuntimeState&, objc::SelectorHashTable const*, dyld3::Map<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString> const&, dyld4::PrebuiltObjC::ObjCOptimizerImage&)
[ 1015]   1015     Code            0x0000000000033b44 0x0000000102c5bb44 0x0000000000000080 0x000e0000 invocation function for block in dyld4::optimizeObjCSelectors(dyld4::RuntimeState&, objc::SelectorHashTable const*, dyld3::Map<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString> const&, dyld4::PrebuiltObjC::ObjCOptimizerImage&)
[ 1016]   1016     Code            0x0000000000033bc4 0x0000000102c5bbc4 0x0000000000000060 0x001e0080 __copy_helper_block_8_32b40r48r
[ 1017]   1017     Code            0x0000000000033c24 0x0000000102c5bc24 0x0000000000000050 0x001e0080 __destroy_helper_block_8_32b40r48r
[ 1018]   1018     Code            0x0000000000033c74 0x0000000102c5bc74 0x00000000000000ac 0x000e0000 invocation function for block in dyld4::optimizeObjCSelectors(dyld4::RuntimeState&, objc::SelectorHashTable const*, dyld3::Map<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString> const&, dyld4::PrebuiltObjC::ObjCOptimizerImage&)
[ 1019]   1019     Code            0x0000000000033d20 0x0000000102c5bd20 0x000000000000011c 0x000e0000 invocation function for block in dyld4::optimizeObjCSelectors(dyld4::RuntimeState&, objc::SelectorHashTable const*, dyld3::Map<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString> const&, dyld4::PrebuiltObjC::ObjCOptimizerImage&)
[ 1020]   1020     Code            0x0000000000033e3c 0x0000000102c5be3c 0x0000000000000018 0x000e0000 invocation function for block in dyld4::optimizeObjCSelectors(dyld4::RuntimeState&, objc::SelectorHashTable const*, dyld3::Map<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString> const&, dyld4::PrebuiltObjC::ObjCOptimizerImage&)
[ 1021]   1021     Code            0x0000000000033e54 0x0000000102c5be54 0x0000000000000114 0x001e0080 dyld3::Map<unsigned long long, unsigned int, dyld4::HashUInt64, dyld4::EqualUInt64>::Map()
[ 1022]   1022     Code            0x0000000000033f68 0x0000000102c5bf68 0x0000000000000104 0x001e0080 dyld3::OverflowSafeArray<std::__1::pair<char const*, dyld4::Loader::BindTarget>, 4294967295ul>::push_back(std::__1::pair<char const*, dyld4::Loader::BindTarget> const&)
[ 1023]   1023     Code            0x000000000003406c 0x0000000102c5c06c 0x0000000000000218 0x001e0080 dyld3::Map<unsigned long long, unsigned int, dyld4::HashUInt64, dyld4::EqualUInt64>::insert(std::__1::pair<unsigned long long, unsigned int>&&)
[ 1024]   1024     Code            0x0000000000034284 0x0000000102c5c284 0x00000000000000ec 0x001e0080 dyld3::OverflowSafeArray<std::__1::pair<unsigned long long, unsigned int>, 4294967295ul>::push_back(std::__1::pair<unsigned long long, unsigned int> const&)
[ 1025]   1025     Code            0x0000000000034370 0x0000000102c5c370 0x0000000000000128 0x001e0080 dyld3::Map<unsigned short, std::__1::pair<dyld3::MachOAnalyzer const*, dyld4::Loader const*>, dyld4::HashUInt16, dyld4::EqualUInt16>::Map()
[ 1026]   1026     Code            0x0000000000034498 0x0000000102c5c498 0x0000000000000104 0x001e0080 dyld3::OverflowSafeArray<std::__1::pair<unsigned short, std::__1::pair<dyld3::MachOAnalyzer const*, dyld4::Loader const*> >, 4294967295ul>::push_back(std::__1::pair<unsigned short, std::__1::pair<dyld3::MachOAnalyzer const*, dyld4::Loader const*> > const&)
[ 1027]   1027     Code            0x000000000003459c 0x0000000102c5c59c 0x0000000000000014 0x000e0000 OUTLINED_FUNCTION_0
[ 1028]   1028     Code            0x00000000000345b0 0x0000000102c5c5b0 0x0000000000000014 0x000e0000 OUTLINED_FUNCTION_1
[ 1029]   1029     Code            0x00000000000345c4 0x0000000102c5c5c4 0x0000000000000014 0x000e0000 OUTLINED_FUNCTION_2
[ 1030]   1030     Code            0x00000000000345d8 0x0000000102c5c5d8 0x0000000000000014 0x000e0000 OUTLINED_FUNCTION_3
[ 1031]   1031     Code            0x00000000000345ec 0x0000000102c5c5ec 0x0000000000000014 0x000e0000 OUTLINED_FUNCTION_4
[ 1032]   1032     Code            0x0000000000034600 0x0000000102c5c600 0x000000000000001c 0x001e0000 dyld3::kdebug_trace_dyld_image(unsigned int, char const*, unsigned char const (*) [16], fsobj_id, fsid, mach_header const*)
[ 1033]   1033     Code            0x000000000003461c 0x0000000102c5c61c 0x00000000000000d4 0x000e0000 dyld3::kdebug_trace_dyld_region(unsigned int, int, int, char const*, unsigned char const (*) [16], fsobj_id, fsid, void const*)
[ 1034]   1034     Code            0x00000000000346f0 0x0000000102c5c6f0 0x0000000000000020 0x001e0000 dyld3::kdebug_trace_dyld_cache(char const*, dyld_all_image_infos*)
[ 1035]   1035     Code            0x0000000000034710 0x0000000102c5c710 0x0000000000000004 0x001e0000 dyld3::kdebug_trace_dyld_enabled(unsigned int)
[ 1036]   1036     Code            0x0000000000034714 0x0000000102c5c714 0x0000000000000158 0x001e0000 dyld3::kdebug_trace_dyld_duration_end(unsigned long long, unsigned int, dyld3::kt_arg, dyld3::kt_arg, dyld3::kt_arg)
[ 1037]   1037     Code            0x000000000003486c 0x0000000102c5c86c 0x00000000000000dc 0x001e0000 dyld4::Allocator::~Allocator()
[ 1038]   1038     Code            0x0000000000034948 0x0000000102c5c948 0x0000000000000008 0x001e0000 dyld4::Allocator::allocate_buffer(unsigned long, unsigned long)
[ 1039]   1039     Code            0x0000000000034950 0x0000000102c5c950 0x0000000000000350 0x001e0000 dyld4::Allocator::allocate_buffer(unsigned long, unsigned long, bool)
[ 1040]   1040     Code            0x0000000000034ca0 0x0000000102c5cca0 0x0000000000000130 0x001e0000 dyld4::Allocator::removeRegion(dyld4::Allocator::Buffer const&)
[ 1041]   1041     Code            0x0000000000034dd0 0x0000000102c5cdd0 0x0000000000000090 0x001e0000 dyld4::Allocator::FreeListEntry::isolateRegion(dyld4::Allocator::Buffer)
[ 1042]   1042     Code            0x0000000000034e60 0x0000000102c5ce60 0x0000000000000060 0x001e0000 dyld4::Allocator::deallocate_buffer(dyld4::Allocator::Buffer)
[ 1043]   1043     Code            0x0000000000034ec0 0x0000000102c5cec0 0x0000000000000028 0x001e0000 dyld4::Allocator::deallocate_bytes(void*, unsigned long, unsigned long)
[ 1044]   1044     Code            0x0000000000034ee8 0x0000000102c5cee8 0x00000000000000f4 0x001e0000 dyld4::Allocator::reserveSpace(unsigned long, unsigned long, bool, bool)
[ 1045]   1045     Code            0x0000000000034fdc 0x0000000102c5cfdc 0x000000000000006c 0x001e0000 dyld4::Allocator::FreeListEntry::split(unsigned long)
[ 1046]   1046     Code            0x0000000000035048 0x0000000102c5d048 0x0000000000000060 0x001e0000 dyld4::Allocator::owned(void const*, unsigned long) const
[ 1047]   1047     Code            0x00000000000350a8 0x0000000102c5d0a8 0x0000000000000068 0x001e0000 dyld4::Allocator::free(void*)
[ 1048]   1048     Code            0x0000000000035110 0x0000000102c5d110 0x0000000000000060 0x001e0000 dyld4::Allocator::strdup(char const*)
[ 1049]   1049     Code            0x0000000000035170 0x0000000102c5d170 0x00000000000000b0 0x001e0000 dyld4::Allocator::bootstrap()
[ 1050]   1050     Code            0x0000000000035220 0x0000000102c5d220 0x0000000000000040 0x001e0000 operator new(unsigned long, dyld4::Allocator*)
[ 1051]   1051     Code            0x0000000000035260 0x0000000102c5d260 0x0000000000000074 0x001e0000 sprintf
[ 1052]   1052     Code            0x00000000000352d4 0x0000000102c5d2d4 0x00000000000000d8 0x001e0000 __guard_setup
[ 1053]   1053     Code            0x00000000000353ac 0x0000000102c5d3ac 0x0000000000000018 0x001e0000 __stack_chk_fail
[ 1054]   1054     Code            0x00000000000353c4 0x0000000102c5d3c4 0x0000000000000018 0x001e0000 _Block_object_assign
[ 1055]   1055     Code            0x00000000000353dc 0x0000000102c5d3dc 0x0000000000000048 0x001e0000 memset_s
[ 1056]   1056     Code            0x0000000000035424 0x0000000102c5d424 0x0000000000000004 0x001e0000 _dyld_debugger_notification
[ 1057]   1057     Code            0x0000000000035428 0x0000000102c5d428 0x0000000000000130 0x001e0000 DyldSharedCache::forEachRegion(void (void const*, unsigned long long, unsigned long long, unsigned int, unsigned int, unsigned long long, bool&) block_pointer) const
[ 1058]   1058     Code            0x0000000000035558 0x0000000102c5d558 0x0000000000000094 0x001e0000 DyldSharedCache::forEachRange(void (char const*, unsigned long long, unsigned long long, unsigned int, unsigned long long, unsigned int, unsigned int, bool&) block_pointer, void (DyldSharedCache const*, unsigned int) block_pointer) const
[ 1059]   1059     Code            0x00000000000355ec 0x0000000102c5d5ec 0x00000000000000b8 0x001e0000 DyldSharedCache::forEachCache(void (DyldSharedCache const*, bool&) block_pointer) const
[ 1060]   1060     Code            0x00000000000356a4 0x0000000102c5d6a4 0x00000000000000d8 0x000e0000 invocation function for block in DyldSharedCache::forEachRange(void (char const*, unsigned long long, unsigned long long, unsigned int, unsigned long long, unsigned int, unsigned int, bool&) block_pointer, void (DyldSharedCache const*, unsigned int) block_pointer) const
[ 1061]   1061     Code            0x000000000003577c 0x0000000102c5d77c 0x0000000000000108 0x000e0000 invocation function for block in DyldSharedCache::forEachRange(void (char const*, unsigned long long, unsigned long long, unsigned int, unsigned long long, unsigned int, unsigned int, bool&) block_pointer, void (DyldSharedCache const*, unsigned int) block_pointer) const
[ 1062]   1062     Code            0x0000000000035884 0x0000000102c5d884 0x000000000000001c 0x001e0000 DyldSharedCache::numSubCaches() const
[ 1063]   1063     Code            0x00000000000358a0 0x0000000102c5d8a0 0x000000000000001c 0x001e0000 DyldSharedCache::imagesCount() const
[ 1064]   1064     Code            0x00000000000358bc 0x0000000102c5d8bc 0x00000000000000bc 0x001e0000 DyldSharedCache::forEachDylib(void (dyld3::MachOAnalyzer const*, char const*, unsigned int, unsigned long long, unsigned long long, bool&) block_pointer) const
[ 1065]   1065     Code            0x0000000000035978 0x0000000102c5d978 0x000000000000007c 0x001e0000 DyldSharedCache::getImageFromPath(char const*) const
[ 1066]   1066     Code            0x00000000000359f4 0x0000000102c5d9f4 0x0000000000000030 0x001e0000 DyldSharedCache::getIndexedImagePath(unsigned int) const
[ 1067]   1067     Code            0x0000000000035a24 0x0000000102c5da24 0x000000000000006c 0x001e0000 DyldSharedCache::addressInText(unsigned long long, unsigned int*) const
[ 1068]   1068     Code            0x0000000000035a90 0x0000000102c5da90 0x000000000000000c 0x001e0000 DyldSharedCache::unslidLoadAddress() const
[ 1069]   1069     Code            0x0000000000035a9c 0x0000000102c5da9c 0x0000000000000034 0x000e0000 invocation function for block in DyldSharedCache::mappedSize() const
[ 1070]   1070     Code            0x0000000000035ad0 0x0000000102c5dad0 0x0000000000000044 0x001e0000 DyldSharedCache::isOverridablePath(char const*) const
[ 1071]   1071     Code            0x0000000000035b14 0x0000000102c5db14 0x0000000000000010 0x001e0000 DyldSharedCache::slide() const
[ 1072]   1072     Code            0x0000000000035b24 0x0000000102c5db24 0x00000000000000d8 0x001e0000 DyldSharedCache::hasLaunchLoaderSetWithCDHash(char const*) const
[ 1073]   1073     Code            0x0000000000035bfc 0x0000000102c5dbfc 0x000000000000002c 0x001e0000 DyldSharedCache::patchInfoVersion() const
[ 1074]   1074     Code            0x0000000000035c28 0x0000000102c5dc28 0x00000000000000b4 0x001e0000 DyldSharedCache::patchableExportCount(unsigned int) const
[ 1075]   1075     Code            0x0000000000035cdc 0x0000000102c5dcdc 0x0000000000000210 0x001e0000 DyldSharedCache::forEachPatchableExport(unsigned int, void (unsigned int, char const*) block_pointer) const
[ 1076]   1076     Code            0x0000000000035eec 0x0000000102c5deec 0x00000000000000b8 0x001e0000 DyldSharedCache::shouldPatchClientOfImage(unsigned int, unsigned int) const
[ 1077]   1077     Code            0x0000000000035fa4 0x0000000102c5dfa4 0x0000000000000608 0x001e0000 DyldSharedCache::forEachPatchableUseOfExportInImage(unsigned int, unsigned int, unsigned int, void (unsigned int, dyld3::MachOLoaded::PointerMetaData, unsigned long long) block_pointer) const
[ 1078]   1078     Code            0x00000000000365ac 0x0000000102c5e5ac 0x000000000000001c 0x000e0000 __Block_byref_object_copy_.26
[ 1079]   1079     Code            0x00000000000365c8 0x0000000102c5e5c8 0x0000000000000024 0x000e0000 __Block_byref_object_dispose_.27
[ 1080]   1080     Code            0x00000000000365ec 0x0000000102c5e5ec 0x0000000000000108 0x000e0000 invocation function for block in DyldSharedCache::forEachPatchableUseOfExportInImage(unsigned int, unsigned int, unsigned int, void (unsigned int, dyld3::MachOLoaded::PointerMetaData, unsigned long long) block_pointer) const
[ 1081]   1081     Code            0x00000000000366f4 0x0000000102c5e6f4 0x00000000000000fc 0x000e0000 invocation function for block in DyldSharedCache::forEachPatchableUseOfExportInImage(unsigned int, unsigned int, unsigned int, void (unsigned int, dyld3::MachOLoaded::PointerMetaData, unsigned long long) block_pointer) const
[ 1082]   1082     Code            0x00000000000367f0 0x0000000102c5e7f0 0x0000000000000488 0x001e0000 DyldSharedCache::forEachPatchableUseOfExport(unsigned int, unsigned int, void (unsigned long long, dyld3::MachOLoaded::PointerMetaData, unsigned long long) block_pointer) const
[ 1083]   1083     Code            0x0000000000036c78 0x0000000102c5ec78 0x0000000000000124 0x001e0000 DyldSharedCache::objcOpt() const
[ 1084]   1084     Code            0x0000000000036d9c 0x0000000102c5ed9c 0x0000000000000080 0x000e0000 invocation function for block in DyldSharedCache::objcOpt() const
[ 1085]   1085     Code            0x0000000000036e1c 0x0000000102c5ee1c 0x0000000000000120 0x001e0000 DyldSharedCache::objcOptPtrs() const
[ 1086]   1086     Code            0x0000000000036f3c 0x0000000102c5ef3c 0x00000000000000b8 0x000e0000 invocation function for block in DyldSharedCache::objcOptPtrs() const
[ 1087]   1087     Code            0x0000000000036ff4 0x0000000102c5eff4 0x0000000000000028 0x001e0000 DyldSharedCache::swiftOpt() const
[ 1088]   1088     Code            0x000000000003701c 0x0000000102c5f01c 0x000000000000001c 0x001e0000 dyld3::FatFile::isFatFile(void const*)
[ 1089]   1089     Code            0x0000000000037038 0x0000000102c5f038 0x000000000000013c 0x001e0000 dyld3::FatFile::isValidSlice(Diagnostics&, unsigned long long, unsigned int, unsigned int, unsigned int, unsigned long long, unsigned long long) const
[ 1090]   1090     Code            0x0000000000037174 0x0000000102c5f174 0x0000000000000048 0x001e0000 dyld3::MachOFile::uses16KPages() const
[ 1091]   1091     Code            0x00000000000371bc 0x0000000102c5f1bc 0x000000000000031c 0x001e0000 dyld3::FatFile::forEachSlice(Diagnostics&, unsigned long long, bool, void (unsigned int, unsigned int, void const*, unsigned long long, bool&) block_pointer) const
[ 1092]   1092     Code            0x00000000000374d8 0x0000000102c5f4d8 0x000000000000000c 0x001e0000 dyld3::FatFile::forEachSlice(Diagnostics&, unsigned long long, void (unsigned int, unsigned int, void const*, unsigned long long, bool&) block_pointer) const
[ 1093]   1093     Code            0x00000000000374e4 0x0000000102c5f4e4 0x00000000000000cc 0x001e0000 dyld3::FatFile::archNames(char*) const
[ 1094]   1094     Code            0x00000000000375b0 0x0000000102c5f5b0 0x00000000000000b8 0x000e0000 invocation function for block in dyld3::FatFile::archNames(char*) const
[ 1095]   1095     Code            0x0000000000037668 0x0000000102c5f668 0x0000000000000104 0x001e0000 dyld3::FatFile::isFatFileWithSlice(Diagnostics&, unsigned long long, dyld3::GradedArchs const&, bool, unsigned long long&, unsigned long long&, bool&) const
[ 1096]   1096     Code            0x000000000003776c 0x0000000102c5f76c 0x0000000000000088 0x000e0000 invocation function for block in dyld3::FatFile::isFatFileWithSlice(Diagnostics&, unsigned long long, dyld3::GradedArchs const&, bool, unsigned long long&, unsigned long long&, bool&) const
[ 1097]   1097     Code            0x00000000000377f4 0x0000000102c5f7f4 0x0000000000000030 0x001e0000 dyld3::GradedArchs::checksOSBinary() const
[ 1098]   1098     Code            0x0000000000037824 0x0000000102c5f824 0x0000000000000038 0x001e0000 dyld3::GradedArchs::forCurrentOS(bool, bool)
[ 1099]   1099     Code            0x000000000003785c 0x0000000102c5f85c 0x0000000000000018 0x001e0000 dyld3::MachOFile::is64() const
[ 1100]   1100     Code            0x0000000000037874 0x0000000102c5f874 0x0000000000000074 0x001e0000 dyld3::MachOFile::isArch(char const*) const
[ 1101]   1101     Code            0x00000000000378e8 0x0000000102c5f8e8 0x0000000000000118 0x001e0000 dyld3::MachOFile::builtForPlatform(dyld3::Platform, bool) const
[ 1102]   1102     Code            0x0000000000037a00 0x0000000102c5fa00 0x0000000000000028 0x000e0000 invocation function for block in dyld3::MachOFile::builtForPlatform(dyld3::Platform, bool) const
[ 1103]   1103     Code            0x0000000000037a28 0x0000000102c5fa28 0x000000000000006c 0x001e0000 dyld3::MachOFile::isSimulatorPlatform(dyld3::Platform, dyld3::Platform*)
[ 1104]   1104     Code            0x0000000000037aac 0x0000000102c5faac 0x0000000000000010 0x001e0000 dyld3::MachOFile::isBundle() const
[ 1105]   1105     Code            0x0000000000037abc 0x0000000102c5fabc 0x0000000000000010 0x001e0000 dyld3::MachOFile::isMainExecutable() const
[ 1106]   1106     Code            0x0000000000037acc 0x0000000102c5facc 0x00000000000000d4 0x001e0000 dyld3::MachOFile::hasLoadCommand(unsigned int) const
[ 1107]   1107     Code            0x0000000000037ba0 0x0000000102c5fba0 0x0000000000000010 0x001e0000 dyld3::MachOFile::isKextBundle() const
[ 1108]   1108     Code            0x0000000000037bb0 0x0000000102c5fbb0 0x0000000000000010 0x001e0000 dyld3::MachOFile::isFileSet() const
[ 1109]   1109     Code            0x0000000000037bc0 0x0000000102c5fbc0 0x0000000000000114 0x000e0000 invocation function for block in dyld3::MachOFile::forEachSupportedPlatform(void (dyld3::Platform, unsigned int, unsigned int) block_pointer) const
[ 1110]   1110     Code            0x0000000000037cd4 0x0000000102c5fcd4 0x0000000000000004 0x000e0000 invocation function for block in dyld3::MachOFile::isMachO(Diagnostics&, unsigned long long) const
[ 1111]   1111     Code            0x0000000000037cd8 0x0000000102c5fcd8 0x0000000000000048 0x000e0000 invocation function for block in dyld3::MachOFile::getDylibInstallName(char const**, unsigned int*, unsigned int*) const
[ 1112]   1112     Code            0x0000000000037d20 0x0000000102c5fd20 0x0000000000000030 0x000e0000 invocation function for block in dyld3::MachOFile::getUuid(unsigned char*) const
[ 1113]   1113     Code            0x0000000000037d50 0x0000000102c5fd50 0x00000000000000cc 0x000e0000 invocation function for block in dyld3::MachOFile::forEachDependentDylib(void (char const*, bool, bool, bool, unsigned int, unsigned int, bool&) block_pointer) const
[ 1114]   1114     Code            0x0000000000037e1c 0x0000000102c5fe1c 0x00000000000000a0 0x001e0000 dyld3::MachOFile::forDyldEnv(void (char const*, bool&) block_pointer) const
[ 1115]   1115     Code            0x0000000000037ebc 0x0000000102c5febc 0x00000000000000b4 0x000e0000 invocation function for block in dyld3::MachOFile::forDyldEnv(void (char const*, bool&) block_pointer) const
[ 1116]   1116     Code            0x0000000000037f70 0x0000000102c5ff70 0x00000000000000b0 0x001e0000 dyld3::MachOFile::entryAddrFromThreadCmd(thread_command const*) const
[ 1117]   1117     Code            0x0000000000038020 0x0000000102c60020 0x0000000000000094 0x001e0000 dyld3::MachOFile::forEachInterposingSection(Diagnostics&, void (unsigned long long, unsigned long long, bool&) block_pointer) const
[ 1118]   1118     Code            0x00000000000380b4 0x0000000102c600b4 0x0000000000000174 0x000e0000 invocation function for block in dyld3::MachOFile::forEachInterposingSection(Diagnostics&, void (unsigned long long, unsigned long long, bool&) block_pointer) const
[ 1119]   1119     Code            0x0000000000038228 0x0000000102c60228 0x00000000000000a4 0x001e0000 dyld3::MachOFile::isRestricted() const
[ 1120]   1120     Code            0x00000000000382cc 0x0000000102c602cc 0x000000000000006c 0x000e0000 invocation function for block in dyld3::MachOFile::isRestricted() const
[ 1121]   1121     Code            0x0000000000038338 0x0000000102c60338 0x000000000000000c 0x001e0000 dyld3::MachOFile::hasWeakDefs() const
[ 1122]   1122     Code            0x0000000000038344 0x0000000102c60344 0x000000000000000c 0x001e0000 dyld3::MachOFile::usesWeakDefs() const
[ 1123]   1123     Code            0x0000000000038350 0x0000000102c60350 0x000000000000005c 0x001e0000 dyld3::MachOFile::isFairPlayEncrypted(unsigned int&, unsigned int&) const
[ 1124]   1124     Code            0x00000000000383ac 0x0000000102c603ac 0x00000000000000d4 0x001e0000 dyld3::MachOFile::findFairPlayEncryptionLoadCommand() const
[ 1125]   1125     Code            0x0000000000038480 0x0000000102c60480 0x000000000000002c 0x000e0000 invocation function for block in dyld3::MachOFile::findFairPlayEncryptionLoadCommand() const
[ 1126]   1126     Code            0x00000000000384ac 0x0000000102c604ac 0x0000000000000028 0x000e0000 invocation function for block in dyld3::MachOFile::hasLoadCommand(unsigned int) const
[ 1127]   1127     Code            0x00000000000384d4 0x0000000102c604d4 0x00000000000000a4 0x001e0000 dyld3::MachOFile::allowsAlternatePlatform() const
[ 1128]   1128     Code            0x0000000000038578 0x0000000102c60578 0x0000000000000070 0x000e0000 invocation function for block in dyld3::MachOFile::allowsAlternatePlatform() const
[ 1129]   1129     Code            0x00000000000385e8 0x0000000102c605e8 0x0000000000000058 0x001e0000 dyld3::MachOFile::hasOpcodeFixups() const
[ 1130]   1130     Code            0x0000000000038640 0x0000000102c60640 0x00000000000000a4 0x001e0000 dyld3::MachOFile::read_sleb128(Diagnostics&, unsigned char const*&, unsigned char const*)
[ 1131]   1131     Code            0x00000000000386e4 0x0000000102c606e4 0x0000000000000010 0x000e0000 invocation function for block in dyld3::MachOFile::compatibleSlice(Diagnostics&, void const*, unsigned long, char const*, dyld3::Platform, bool, dyld3::GradedArchs const&)
[ 1132]   1132     Code            0x00000000000386f4 0x0000000102c606f4 0x0000000000000444 0x000e0000 invocation function for block in dyld3::MachOLoaded::getLinkEditLoadCommands(Diagnostics&, dyld3::MachOLoaded::LinkEditInfo&) const
[ 1133]   1133     Code            0x0000000000038b98 0x0000000102c60b98 0x00000000000000a4 0x000e0000 invocation function for block in dyld3::MachOLoaded::getLayoutInfo(dyld3::MachOLoaded::LayoutInfo&) const
[ 1134]   1134     Code            0x0000000000038c3c 0x0000000102c60c3c 0x00000000000000e0 0x001e0000 dyld3::MachOLoaded::hasExportTrie(unsigned int&, unsigned int&) const
[ 1135]   1135     Code            0x0000000000038d1c 0x0000000102c60d1c 0x000000000000013c 0x001e0000 dyld3::MachOLoaded::hasExportedSymbol(char const*, dyld3::MachOLoaded const* (dyld3::MachOLoaded const*, unsigned int) block_pointer, void**, bool*) const
[ 1136]   1136     Code            0x0000000000038e58 0x0000000102c60e58 0x0000000000000440 0x001e0000 dyld3::MachOLoaded::findExportedSymbol(Diagnostics&, char const*, bool, dyld3::MachOLoaded::FoundSymbol&, dyld3::MachOLoaded const* (dyld3::MachOLoaded const*, unsigned int) block_pointer) const
[ 1137]   1137     Code            0x0000000000039298 0x0000000102c61298 0x0000000000000050 0x000e0000 invocation function for block in dyld3::MachOLoaded::hasExportedSymbol(char const*, dyld3::MachOLoaded const* (dyld3::MachOLoaded const*, unsigned int) block_pointer, void**, bool*) const
[ 1138]   1138     Code            0x00000000000392e8 0x0000000102c612e8 0x0000000000000090 0x000e0000 invocation function for block in dyld3::MachOLoaded::findExportedSymbol(Diagnostics&, char const*, bool, dyld3::MachOLoaded::FoundSymbol&, dyld3::MachOLoaded const* (dyld3::MachOLoaded const*, unsigned int) block_pointer) const
[ 1139]   1139     Code            0x0000000000039378 0x0000000102c61378 0x0000000000000078 0x000e0000 invocation function for block in dyld3::MachOLoaded::findExportedSymbol(Diagnostics&, char const*, bool, dyld3::MachOLoaded::FoundSymbol&, dyld3::MachOLoaded const* (dyld3::MachOLoaded const*, unsigned int) block_pointer) const
[ 1140]   1140     Code            0x00000000000393f0 0x0000000102c613f0 0x0000000000000080 0x000e0000 invocation function for block in dyld3::MachOLoaded::findExportedSymbol(Diagnostics&, char const*, bool, dyld3::MachOLoaded::FoundSymbol&, dyld3::MachOLoaded const* (dyld3::MachOLoaded const*, unsigned int) block_pointer) const
[ 1141]   1141     Code            0x0000000000039470 0x0000000102c61470 0x0000000000000094 0x000e0000 invocation function for block in dyld3::MachOLoaded::getSlide() const
[ 1142]   1142     Code            0x0000000000039504 0x0000000102c61504 0x000000000000001c 0x001e0000 dyld3::MachOLoaded::getLinkEditContent(dyld3::MachOLoaded::LayoutInfo const&, unsigned int) const
[ 1143]   1143     Code            0x0000000000039520 0x0000000102c61520 0x0000000000000034 0x000e0000 invocation function for block in dyld3::MachOLoaded::dependentDylibCount(bool*) const
[ 1144]   1144     Code            0x0000000000039554 0x0000000102c61554 0x00000000000000a8 0x001e0000 dyld3::MachOLoaded::segmentName(unsigned int) const
[ 1145]   1145     Code            0x00000000000395fc 0x0000000102c615fc 0x0000000000000030 0x000e0000 invocation function for block in dyld3::MachOLoaded::segmentName(unsigned int) const
[ 1146]   1146     Code            0x000000000003962c 0x0000000102c6162c 0x000000000000003c 0x000e0000 invocation function for block in dyld3::MachOLoaded::findClosestSymbol(unsigned long long, char const**, unsigned long long*) const
[ 1147]   1147     Code            0x0000000000039668 0x0000000102c61668 0x00000000000000e0 0x001e0080 dyld3::OverflowSafeArray<unsigned int, 4294967295ul>::push_back(unsigned int const&)
[ 1148]   1148     Code            0x0000000000039748 0x0000000102c61748 0x000000000000006c 0x001e0000 dyld3::MachOLoaded::forEachCDHashOfCodeSignature(void const*, unsigned long, void (unsigned char const*) block_pointer) const
[ 1149]   1149     Code            0x00000000000397b4 0x0000000102c617b4 0x00000000000001c8 0x001e0000 dyld3::MachOLoaded::forEachCodeDirectoryBlob(void const*, unsigned long, void (void const*) block_pointer) const
[ 1150]   1150     Code            0x000000000003997c 0x0000000102c6197c 0x00000000000001c4 0x000e0000 invocation function for block in dyld3::MachOLoaded::forEachCDHashOfCodeSignature(void const*, unsigned long, void (unsigned char const*) block_pointer) const
[ 1151]   1151     Code            0x0000000000039b40 0x0000000102c61b40 0x0000000000000038 0x000e0000 dyld3::hash_rank_watchOS_dylibs(CS_CodeDirectory const*)
[ 1152]   1152     Code            0x0000000000039b78 0x0000000102c61b78 0x0000000000000038 0x000e0000 dyld3::hash_rank(CS_CodeDirectory const*)
[ 1153]   1153     Code            0x0000000000039bb0 0x0000000102c61bb0 0x0000000000000034 0x001e0000 dyld3::MachOLoaded::ChainedFixupPointerOnDisk::Arm64e::unpackTarget() const
[ 1154]   1154     Code            0x0000000000039be4 0x0000000102c61be4 0x000000000000003c 0x001e0000 dyld3::MachOLoaded::ChainedFixupPointerOnDisk::Arm64e::signExtendedAddend() const
[ 1155]   1155     Code            0x0000000000039c20 0x0000000102c61c20 0x000000000000002c 0x001e0000 dyld3::MachOLoaded::ChainedFixupPointerOnDisk::Arm64e::keyName(unsigned char)
[ 1156]   1156     Code            0x0000000000039c4c 0x0000000102c61c4c 0x0000000000000070 0x001e0000 dyld3::MachOLoaded::ChainedFixupPointerOnDisk::Arm64e::signPointer(unsigned long long, void*, bool, unsigned short, unsigned char)
[ 1157]   1157     Code            0x0000000000039ccc 0x0000000102c61ccc 0x0000000000000044 0x001e0000 dyld3::MachOLoaded::ChainedFixupPointerOnDisk::Arm64e::signPointer(void*, unsigned long long) const
[ 1158]   1158     Code            0x0000000000039d10 0x0000000102c61d10 0x00000000000000ec 0x001e0000 dyld3::MachOLoaded::ChainedFixupPointerOnDisk::isRebase(unsigned short, unsigned long long, unsigned long long&) const
[ 1159]   1159     Code            0x0000000000039e2c 0x0000000102c61e2c 0x00000000000000c8 0x001e0000 dyld3::MachOLoaded::ChainedFixupPointerOnDisk::isBind(unsigned short, unsigned int&, long long&) const
[ 1160]   1160     Code            0x0000000000039f24 0x0000000102c61f24 0x0000000000000088 0x001e0000 dyld3::MachOLoaded::forEachFixupInAllChains(Diagnostics&, dyld_chained_starts_in_image const*, bool, void (dyld3::MachOLoaded::ChainedFixupPointerOnDisk*, dyld_chained_starts_in_segment const*, bool&) block_pointer) const
[ 1161]   1161     Code            0x0000000000039fac 0x0000000102c61fac 0x00000000000001ec 0x000e0000 invocation function for block in dyld3::MachOLoaded::fixupAllChainedFixups(Diagnostics&, dyld_chained_starts_in_image const*, unsigned long, dyld3::Array<void const*>, void (void*, void*) block_pointer) const
[ 1162]   1162     Code            0x000000000003a1c8 0x0000000102c621c8 0x0000000000000154 0x001e0000 dyld3::MachOLoaded::forEachFixupInSegmentChains(Diagnostics&, dyld_chained_starts_in_segment const*, bool, void (dyld3::MachOLoaded::ChainedFixupPointerOnDisk*, dyld_chained_starts_in_segment const*, bool&) block_pointer) const
[ 1163]   1163     Code            0x000000000003a31c 0x0000000102c6231c 0x0000000000000018 0x000e0000 invocation function for block in dyld3::MachOLoaded::forEachFixupInSegmentChains(Diagnostics&, dyld_chained_starts_in_segment const*, bool, void (dyld3::MachOLoaded::ChainedFixupPointerOnDisk*, dyld_chained_starts_in_segment const*, bool&) block_pointer) const
[ 1164]   1164     Code            0x000000000003a334 0x0000000102c62334 0x0000000000000010 0x001e0000 dyld3::MachOLoaded::PointerMetaData::PointerMetaData()
[ 1165]   1165     Code            0x000000000003a344 0x0000000102c62344 0x00000000000000e8 0x001e0000 dyld3::MachOAnalyzer::isOSBinary(int, unsigned long long, unsigned long long) const
[ 1166]   1166     Code            0x000000000003a42c 0x0000000102c6242c 0x00000000000001a0 0x001e0000 dyld3::MachOAnalyzer::hasCodeSignature(unsigned int&, unsigned int&) const
[ 1167]   1167     Code            0x000000000003a5cc 0x0000000102c625cc 0x0000000000000168 0x001e0000 dyld3::MachOAnalyzer::analyzeSegmentsLayout(unsigned long long&, bool&) const
[ 1168]   1168     Code            0x000000000003a734 0x0000000102c62734 0x00000000000000d4 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::analyzeSegmentsLayout(unsigned long long&, bool&) const
[ 1169]   1169     Code            0x000000000003a808 0x0000000102c62808 0x0000000000000024 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::getAllSegmentsInfos(Diagnostics&, dyld3::MachOFile::SegmentInfo*) const
[ 1170]   1170     Code            0x000000000003a82c 0x0000000102c6282c 0x000000000000080c 0x001e0000 dyld3::MachOAnalyzer::forEachRebase(Diagnostics&, void (char const*, dyld3::MachOLoaded::LinkEditInfo const&, dyld3::MachOFile::SegmentInfo const*, bool, unsigned int, unsigned char, unsigned long long, dyld3::MachOAnalyzer::Rebase, bool&) block_pointer) const
[ 1171]   1171     Code            0x000000000003b05c 0x0000000102c6305c 0x00000000000001b8 0x001e0000 dyld3::MachOAnalyzer::forEachRebase(Diagnostics&, void (unsigned long long, bool, bool&) block_pointer) const
[ 1172]   1172     Code            0x000000000003b214 0x0000000102c63214 0x0000000000000094 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::forEachRebase(Diagnostics&, void (unsigned long long, bool, bool&) block_pointer) const
[ 1173]   1173     Code            0x000000000003b2a8 0x0000000102c632a8 0x00000000000001cc 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::forEachRebase(Diagnostics&, void (unsigned long long, bool, bool&) block_pointer) const
[ 1174]   1174     Code            0x000000000003b474 0x0000000102c63474 0x00000000000000ec 0x001e0000 dyld3::MachOAnalyzer::contentIsRegularStub(unsigned char const*) const
[ 1175]   1175     Code            0x000000000003b560 0x0000000102c63560 0x00000000000000a0 0x001e0080 __copy_helper_block_8_32b40r48r56r64r72r80r
[ 1176]   1176     Code            0x000000000003b600 0x0000000102c63600 0x0000000000000080 0x001e0080 __destroy_helper_block_8_32b40r48r56r64r72r80r
[ 1177]   1177     Code            0x000000000003b680 0x0000000102c63680 0x0000000000000070 0x001e0000 dyld3::MachOAnalyzer::forEachRebase(Diagnostics&, bool, void (unsigned long long, bool&) block_pointer) const
[ 1178]   1178     Code            0x000000000003b6f0 0x0000000102c636f0 0x0000000000000024 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::forEachRebase(Diagnostics&, bool, void (unsigned long long, bool&) block_pointer) const
[ 1179]   1179     Code            0x000000000003b714 0x0000000102c63714 0x000000000000009c 0x001e0000 dyld3::MachOAnalyzer::localRelocBaseAddress(dyld3::MachOFile::SegmentInfo const*, unsigned int) const
[ 1180]   1180     Code            0x000000000003b7b0 0x0000000102c637b0 0x00000000000000e0 0x001e0080 dyld3::OverflowSafeArray<relocation_info, 4294967295ul>::push_back(relocation_info const&)
[ 1181]   1181     Code            0x000000000003b890 0x0000000102c63890 0x00000000000000c0 0x001e0000 dyld3::MachOAnalyzer::sortRelocations(dyld3::Array<relocation_info>&) const
[ 1182]   1182     Code            0x000000000003b950 0x0000000102c63950 0x0000000000000188 0x001e0000 dyld3::MachOAnalyzer::forEachIndirectPointer(Diagnostics&, bool, void (unsigned long long, bool, int, char const*, bool, bool, bool, bool&) block_pointer) const
[ 1183]   1183     Code            0x000000000003bad8 0x0000000102c63ad8 0x00000000000000d8 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::forEachRebase(Diagnostics&, void (char const*, dyld3::MachOLoaded::LinkEditInfo const&, dyld3::MachOFile::SegmentInfo const*, bool, unsigned int, unsigned char, unsigned long long, dyld3::MachOAnalyzer::Rebase, bool&) block_pointer) const
[ 1184]   1184     Code            0x000000000003bbb0 0x0000000102c63bb0 0x00000000000000d0 0x001e0000 dyld3::MachOAnalyzer::externalRelocBaseAddress(dyld3::MachOFile::SegmentInfo const*, unsigned int) const
[ 1185]   1185     Code            0x000000000003bd10 0x0000000102c63d10 0x00000000000000f4 0x001e0000 dyld3::MachOAnalyzer::forEachBind(Diagnostics&, void (unsigned long long, int, unsigned char, char const*, bool, bool, unsigned long long, bool&) block_pointer, void (char const*) block_pointer) const
[ 1186]   1186     Code            0x000000000003be04 0x0000000102c63e04 0x0000000000000130 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::forEachBind(Diagnostics&, void (unsigned long long, int, unsigned char, char const*, bool, bool, unsigned long long, bool&) block_pointer, void (char const*) block_pointer) const
[ 1187]   1187     Code            0x000000000003bf34 0x0000000102c63f34 0x0000000000000010 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::forEachBind(Diagnostics&, void (unsigned long long, int, unsigned char, char const*, bool, bool, unsigned long long, bool&) block_pointer, void (char const*) block_pointer) const
[ 1188]   1188     Code            0x000000000003bf44 0x0000000102c63f44 0x00000000000000f8 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::forEachBind(Diagnostics&, void (char const*, dyld3::MachOLoaded::LinkEditInfo const&, dyld3::MachOFile::SegmentInfo const*, bool, bool, unsigned int, int, unsigned int, unsigned char, unsigned long long, unsigned char, char const*, bool, bool, unsigned long long, bool&) block_pointer, void (char const*) block_pointer) const
[ 1189]   1189     Code            0x000000000003c074 0x0000000102c64074 0x0000000000000024 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::forEachChainedFixupTarget(Diagnostics&, void (int, char const*, unsigned long long, bool, bool&) block_pointer) const
[ 1190]   1190     Code            0x000000000003c098 0x0000000102c64098 0x00000000000000a4 0x001e0000 dyld3::MachOAnalyzer::segmentCount() const
[ 1191]   1191     Code            0x000000000003c13c 0x0000000102c6413c 0x0000000000000018 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::segmentCount() const
[ 1192]   1192     Code            0x000000000003c154 0x0000000102c64154 0x000000000000002c 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::hasCodeSignature(unsigned int&, unsigned int&) const
[ 1193]   1193     Code            0x000000000003c180 0x0000000102c64180 0x0000000000000038 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::hasCodeSignature(unsigned int&, unsigned int&) const
[ 1194]   1194     Code            0x000000000003c1b8 0x0000000102c641b8 0x000000000000009c 0x001e0000 dyld3::MachOAnalyzer::chainedPointerFormat() const
[ 1195]   1195     Code            0x000000000003c254 0x0000000102c64254 0x0000000000000028 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::hasInitializer(Diagnostics&) const
[ 1196]   1196     Code            0x000000000003c27c 0x0000000102c6427c 0x00000000000000a8 0x001e0000 dyld3::MachOAnalyzer::forEachInitializerPointerSection(Diagnostics&, void (unsigned int, unsigned int, unsigned char const*, bool&) block_pointer) const
[ 1197]   1197     Code            0x000000000003c324 0x0000000102c64324 0x0000000000000018 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::hasInitializer(Diagnostics&) const
[ 1198]   1198     Code            0x000000000003c33c 0x0000000102c6433c 0x0000000000000024 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::hasInitializer(Diagnostics&) const
[ 1199]   1199     Code            0x000000000003c360 0x0000000102c64360 0x0000000000000100 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::forEachInitializerPointerSection(Diagnostics&, void (unsigned int, unsigned int, unsigned char const*, bool&) block_pointer) const
[ 1200]   1200     Code            0x000000000003c460 0x0000000102c64460 0x000000000000002c 0x000e0000 __Block_byref_object_copy_
[ 1201]   1201     Code            0x000000000003c48c 0x0000000102c6448c 0x0000000000000024 0x000e0000 __Block_byref_object_dispose_
[ 1202]   1202     Code            0x000000000003c4b0 0x0000000102c644b0 0x000000000000004c 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&, dyld3::MachOAnalyzer::VMAddrConverter const&, void (unsigned int) block_pointer, void const*) const
[ 1203]   1203     Code            0x000000000003c4fc 0x0000000102c644fc 0x0000000000000104 0x001e0080 dyld3::OverflowSafeArray<dyld3::SegmentRanges::SegmentRange, 4294967295ul>::push_back(dyld3::SegmentRanges::SegmentRange const&)
[ 1204]   1204     Code            0x000000000003c600 0x0000000102c64600 0x00000000000000d8 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&, dyld3::MachOAnalyzer::VMAddrConverter const&, void (unsigned int) block_pointer, void const*) const
[ 1205]   1205     Code            0x000000000003c6d8 0x0000000102c646d8 0x0000000000000188 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&, dyld3::MachOAnalyzer::VMAddrConverter const&, void (unsigned int) block_pointer, void const*) const
[ 1206]   1206     Code            0x000000000003c860 0x0000000102c64860 0x0000000000000170 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&, dyld3::MachOAnalyzer::VMAddrConverter const&, void (unsigned int) block_pointer, void const*) const
[ 1207]   1207     Code            0x000000000003c9d0 0x0000000102c649d0 0x00000000000000a4 0x001e0000 dyld3::MachOAnalyzer::hasTerminators(Diagnostics&, dyld3::MachOAnalyzer::VMAddrConverter const&) const
[ 1208]   1208     Code            0x000000000003ca74 0x0000000102c64a74 0x00000000000001b4 0x001e0000 dyld3::MachOAnalyzer::forEachTerminator(Diagnostics&, dyld3::MachOAnalyzer::VMAddrConverter const&, void (unsigned int) block_pointer) const
[ 1209]   1209     Code            0x000000000003cc28 0x0000000102c64c28 0x0000000000000014 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::hasTerminators(Diagnostics&, dyld3::MachOAnalyzer::VMAddrConverter const&) const
[ 1210]   1210     Code            0x000000000003cc3c 0x0000000102c64c3c 0x000000000000004c 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::forEachTerminator(Diagnostics&, dyld3::MachOAnalyzer::VMAddrConverter const&, void (unsigned int) block_pointer) const
[ 1211]   1211     Code            0x000000000003cc88 0x0000000102c64c88 0x000000000000020c 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::forEachTerminator(Diagnostics&, dyld3::MachOAnalyzer::VMAddrConverter const&, void (unsigned int) block_pointer) const
[ 1212]   1212     Code            0x000000000003ce94 0x0000000102c64e94 0x0000000000000030 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::forEachRPath(void (char const*, bool&) block_pointer) const
[ 1213]   1213     Code            0x000000000003cec4 0x0000000102c64ec4 0x00000000000000c8 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::hasObjC() const
[ 1214]   1214     Code            0x000000000003cf8c 0x0000000102c64f8c 0x0000000000000138 0x001e0000 dyld3::MachOAnalyzer::hasPlusLoadMethod(Diagnostics&) const
[ 1215]   1215     Code            0x000000000003d0c4 0x0000000102c650c4 0x00000000000000cc 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::hasPlusLoadMethod(Diagnostics&) const
[ 1216]   1216     Code            0x000000000003d190 0x0000000102c65190 0x0000000000000088 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::hasPlusLoadMethod(Diagnostics&) const
[ 1217]   1217     Code            0x000000000003d218 0x0000000102c65218 0x0000000000000090 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::getEntry(unsigned long long&, bool&) const
[ 1218]   1218     Code            0x000000000003d2a8 0x0000000102c652a8 0x000000000000006c 0x001e0000 dyld3::MachOAnalyzer::forEachDOFSection(Diagnostics&, void (unsigned int) block_pointer) const
[ 1219]   1219     Code            0x000000000003d314 0x0000000102c65314 0x0000000000000030 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::forEachDOFSection(Diagnostics&, void (unsigned int) block_pointer) const
[ 1220]   1220     Code            0x000000000003d344 0x0000000102c65344 0x0000000000000090 0x001e0000 dyld3::MachOAnalyzer::forEachCDHash(void (unsigned char const*) block_pointer) const
[ 1221]   1221     Code            0x000000000003d3d4 0x0000000102c653d4 0x0000000000000014 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::neverUnload() const
[ 1222]   1222     Code            0x000000000003d3e8 0x0000000102c653e8 0x0000000000000084 0x001e0000 dyld3::MachOAnalyzer::chainedFixupsHeader() const
[ 1223]   1223     Code            0x000000000003d46c 0x0000000102c6546c 0x00000000000001c4 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::withChainStarts(Diagnostics&, unsigned long long, void (dyld_chained_starts_in_image const*) block_pointer) const
[ 1224]   1224     Code            0x000000000003d630 0x0000000102c65630 0x00000000000000c0 0x001e0000 dyld3::MachOAnalyzer::ObjCClassInfo::getReadOnlyDataField(dyld3::MachOAnalyzer::ObjCClassInfo::ReadOnlyDataField, unsigned int) const
[ 1225]   1225     Code            0x000000000003d718 0x0000000102c65718 0x00000000000001d0 0x001e0000 dyld3::MachOAnalyzer::forEachObjCClass(unsigned long long, unsigned long long, dyld3::MachOAnalyzer::VMAddrConverter const&, void (unsigned long long, unsigned long long, unsigned long long, dyld3::MachOAnalyzer::ObjCClassInfo const&, bool, bool&) block_pointer&) const
[ 1226]   1226     Code            0x000000000003d8e8 0x0000000102c658e8 0x00000000000001b4 0x001e0000 dyld3::MachOAnalyzer::parseObjCClass(dyld3::MachOAnalyzer::VMAddrConverter const&, unsigned long long, void (unsigned long long, unsigned long long, dyld3::MachOAnalyzer::ObjCClassInfo const&) block_pointer) const
[ 1227]   1227     Code            0x000000000003da9c 0x0000000102c65a9c 0x00000000000000d8 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::forEachObjCClass(unsigned long long, unsigned long long, dyld3::MachOAnalyzer::VMAddrConverter const&, void (unsigned long long, unsigned long long, unsigned long long, dyld3::MachOAnalyzer::ObjCClassInfo const&, bool, bool&) block_pointer&) const
[ 1228]   1228     Code            0x000000000003db74 0x0000000102c65b74 0x0000000000000034 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::forEachObjCClass(unsigned long long, unsigned long long, dyld3::MachOAnalyzer::VMAddrConverter const&, void (unsigned long long, unsigned long long, unsigned long long, dyld3::MachOAnalyzer::ObjCClassInfo const&, bool, bool&) block_pointer&) const
[ 1229]   1229     Code            0x000000000003dba8 0x0000000102c65ba8 0x00000000000000d8 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::forEachObjCClass(unsigned long long, unsigned long long, dyld3::MachOAnalyzer::VMAddrConverter const&, void (unsigned long long, unsigned long long, unsigned long long, dyld3::MachOAnalyzer::ObjCClassInfo const&, bool, bool&) block_pointer&) const
[ 1230]   1230     Code            0x000000000003dc80 0x0000000102c65c80 0x0000000000000034 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::forEachObjCClass(unsigned long long, unsigned long long, dyld3::MachOAnalyzer::VMAddrConverter const&, void (unsigned long long, unsigned long long, unsigned long long, dyld3::MachOAnalyzer::ObjCClassInfo const&, bool, bool&) block_pointer&) const
[ 1231]   1231     Code            0x000000000003dcb4 0x0000000102c65cb4 0x00000000000000cc 0x001e0000 dyld3::MachOAnalyzer::findObjCDataSection(char const*, unsigned long long&, unsigned long long&) const
[ 1232]   1232     Code            0x000000000003dd80 0x0000000102c65d80 0x00000000000001d8 0x001e0000 dyld3::MachOAnalyzer::forEachObjCCategory(unsigned long long, unsigned long long, dyld3::MachOAnalyzer::VMAddrConverter const&, void (unsigned long long, dyld3::MachOAnalyzer::ObjCCategory const&, bool&) block_pointer&) const
[ 1233]   1233     Code            0x000000000003df58 0x0000000102c65f58 0x00000000000001f8 0x001e0000 dyld3::MachOAnalyzer::forEachObjCProtocol(unsigned long long, unsigned long long, dyld3::MachOAnalyzer::VMAddrConverter const&, void (unsigned long long, dyld3::MachOAnalyzer::ObjCProtocol const&, bool&) block_pointer&) const
[ 1234]   1234     Code            0x000000000003e150 0x0000000102c66150 0x00000000000000b0 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::findObjCDataSection(char const*, unsigned long long&, unsigned long long&) const
[ 1235]   1235     Code            0x000000000003e200 0x0000000102c66200 0x00000000000000b8 0x001e0000 dyld3::MachOAnalyzer::forEachObjCDuplicateClassToIgnore(void (char const*) block_pointer) const
[ 1236]   1236     Code            0x000000000003e2b8 0x0000000102c662b8 0x0000000000000070 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::hasObjCMessageReferences() const
[ 1237]   1237     Code            0x000000000003e328 0x0000000102c66328 0x00000000000000e0 0x001e0000 dyld3::MachOAnalyzer::objcImageInfo() const
[ 1238]   1238     Code            0x000000000003e408 0x0000000102c66408 0x0000000000000080 0x001e0000 dyld3::MachOAnalyzer::getFixupsLoadCommandFileOffset() const
[ 1239]   1239     Code            0x000000000003e488 0x0000000102c66488 0x0000000000000054 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::inCodeSection(unsigned int) const
[ 1240]   1240     Code            0x000000000003e4dc 0x0000000102c664dc 0x0000000000000054 0x001e0000 dyld3::MachOAnalyzer::forEachTreatAsWeakDef(void (char const*) block_pointer)
[ 1241]   1241     Code            0x000000000003e530 0x0000000102c66530 0x00000000000000fc 0x001e0000 dyld3::MachOAnalyzer::forEachThreadLocalVariable(Diagnostics&, void (dyld3::MachOAnalyzer::TLV_Thunk&) block_pointer) const
[ 1242]   1242     Code            0x000000000003e62c 0x0000000102c6662c 0x000000000000000c 0x000e0000 __Block_byref_object_copy_.536
[ 1243]   1243     Code            0x000000000003e638 0x0000000102c66638 0x0000000000000004 0x000e0000 __Block_byref_object_dispose_.537
[ 1244]   1244     Code            0x000000000003e63c 0x0000000102c6663c 0x00000000000000d8 0x001e0000 dyld3::MachOAnalyzer::forEachBindTarget(Diagnostics&, bool, void (dyld3::MachOAnalyzer::BindTargetInfo const&, bool&) block_pointer, void (dyld3::MachOAnalyzer::BindTargetInfo const&, bool&) block_pointer) const
[ 1245]   1245     Code            0x000000000003e714 0x0000000102c66714 0x0000000000000154 0x001e0000 dyld3::MachOAnalyzer::forEachBindTarget_ChainedFixups(Diagnostics&, void (dyld3::MachOAnalyzer::BindTargetInfo const&, bool&) block_pointer) const
[ 1246]   1246     Code            0x000000000003e868 0x0000000102c66868 0x00000000000000f4 0x001e0000 dyld3::MachOAnalyzer::forEachBindTarget_Opcodes(Diagnostics&, bool, void (dyld3::MachOAnalyzer::BindTargetInfo const&, bool&) block_pointer, void (dyld3::MachOAnalyzer::BindTargetInfo const&, bool&) block_pointer) const
[ 1247]   1247     Code            0x000000000003e95c 0x0000000102c6695c 0x00000000000001a0 0x001e0000 dyld3::MachOAnalyzer::forEachBindTarget_Relocations(Diagnostics&, void (dyld3::MachOAnalyzer::BindTargetInfo const&, bool&) block_pointer) const
[ 1248]   1248     Code            0x000000000003eafc 0x0000000102c66afc 0x000000000000034c 0x001e0000 dyld3::MachOAnalyzer::forEachBindUnified_Opcodes(Diagnostics&, bool, void (unsigned long long, dyld3::MachOAnalyzer::BindTargetInfo const&, bool&) block_pointer, void (unsigned long long, dyld3::MachOAnalyzer::BindTargetInfo const&, bool&) block_pointer) const
[ 1249]   1249     Code            0x000000000003ee48 0x0000000102c66e48 0x0000000000000014 0x000e0000 __Block_byref_object_copy_.541
[ 1250]   1250     Code            0x000000000003ee5c 0x0000000102c66e5c 0x0000000000000004 0x000e0000 __Block_byref_object_dispose_.542
[ 1251]   1251     Code            0x000000000003ee60 0x0000000102c66e60 0x00000000000000d0 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::forEachBindUnified_Opcodes(Diagnostics&, bool, void (unsigned long long, dyld3::MachOAnalyzer::BindTargetInfo const&, bool&) block_pointer, void (unsigned long long, dyld3::MachOAnalyzer::BindTargetInfo const&, bool&) block_pointer) const
[ 1252]   1252     Code            0x000000000003ef30 0x0000000102c66f30 0x0000000000000500 0x001e0000 dyld3::MachOAnalyzer::forEachBind_OpcodesRegular(Diagnostics&, dyld3::MachOLoaded::LinkEditInfo const&, dyld3::MachOFile::SegmentInfo const*, void (char const*, dyld3::MachOLoaded::LinkEditInfo const&, dyld3::MachOFile::SegmentInfo const*, bool, bool, unsigned int, int, unsigned int, unsigned char, unsigned long long, unsigned char, char const*, bool, bool, unsigned long long, bool, bool&) block_pointer) const
[ 1253]   1253     Code            0x000000000003f464 0x0000000102c67464 0x0000000000000274 0x001e0000 dyld3::MachOAnalyzer::forEachBind_OpcodesLazy(Diagnostics&, dyld3::MachOLoaded::LinkEditInfo const&, dyld3::MachOFile::SegmentInfo const*, void (char const*, dyld3::MachOLoaded::LinkEditInfo const&, dyld3::MachOFile::SegmentInfo const*, bool, bool, unsigned int, int, unsigned int, unsigned char, unsigned long long, unsigned char, char const*, bool, bool, unsigned long long, bool, bool&) block_pointer) const
[ 1254]   1254     Code            0x000000000003f700 0x0000000102c67700 0x00000000000000cc 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::forEachBindUnified_Opcodes(Diagnostics&, bool, void (unsigned long long, dyld3::MachOAnalyzer::BindTargetInfo const&, bool&) block_pointer, void (unsigned long long, dyld3::MachOAnalyzer::BindTargetInfo const&, bool&) block_pointer) const
[ 1255]   1255     Code            0x000000000003f7cc 0x0000000102c677cc 0x0000000000000004 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::forEachBindUnified_Opcodes(Diagnostics&, bool, void (unsigned long long, dyld3::MachOAnalyzer::BindTargetInfo const&, bool&) block_pointer, void (unsigned long long, dyld3::MachOAnalyzer::BindTargetInfo const&, bool&) block_pointer) const
[ 1256]   1256     Code            0x000000000003f7d0 0x0000000102c677d0 0x00000000000004a8 0x001e0000 dyld3::MachOAnalyzer::forEachBind_OpcodesWeak(Diagnostics&, dyld3::MachOLoaded::LinkEditInfo const&, dyld3::MachOFile::SegmentInfo const*, void (char const*, dyld3::MachOLoaded::LinkEditInfo const&, dyld3::MachOFile::SegmentInfo const*, bool, bool, unsigned int, int, unsigned int, unsigned char, unsigned long long, unsigned char, char const*, bool, bool, unsigned long long, bool, bool&) block_pointer, void (char const*) block_pointer) const
[ 1257]   1257     Code            0x000000000003fcac 0x0000000102c67cac 0x0000000000000064 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::forEachBindTarget_Opcodes(Diagnostics&, bool, void (dyld3::MachOAnalyzer::BindTargetInfo const&, bool&) block_pointer, void (dyld3::MachOAnalyzer::BindTargetInfo const&, bool&) block_pointer) const
[ 1258]   1258     Code            0x000000000003fd10 0x0000000102c67d10 0x0000000000000064 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::forEachBindTarget_Opcodes(Diagnostics&, bool, void (dyld3::MachOAnalyzer::BindTargetInfo const&, bool&) block_pointer, void (dyld3::MachOAnalyzer::BindTargetInfo const&, bool&) block_pointer) const
[ 1259]   1259     Code            0x000000000003fd74 0x0000000102c67d74 0x000000000000006c 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::forEachBindTarget_ChainedFixups(Diagnostics&, void (dyld3::MachOAnalyzer::BindTargetInfo const&, bool&) block_pointer) const
[ 1260]   1260     Code            0x000000000003fde0 0x0000000102c67de0 0x0000000000000070 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::forEachBindTarget_ChainedFixups(Diagnostics&, void (dyld3::MachOAnalyzer::BindTargetInfo const&, bool&) block_pointer) const
[ 1261]   1261     Code            0x000000000003fe50 0x0000000102c67e50 0x00000000000003cc 0x001e0000 dyld3::MachOAnalyzer::forEachBind_Relocations(Diagnostics&, dyld3::MachOLoaded::LinkEditInfo const&, dyld3::MachOFile::SegmentInfo const*, bool, void (char const*, dyld3::MachOLoaded::LinkEditInfo const&, dyld3::MachOFile::SegmentInfo const*, bool, bool, unsigned int, int, unsigned int, unsigned char, unsigned long long, unsigned char, char const*, bool, bool, unsigned long long, bool, bool&) block_pointer) const
[ 1262]   1262     Code            0x000000000004021c 0x0000000102c6821c 0x0000000000000084 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::forEachBindTarget_Relocations(Diagnostics&, void (dyld3::MachOAnalyzer::BindTargetInfo const&, bool&) block_pointer) const
[ 1263]   1263     Code            0x00000000000402a0 0x0000000102c682a0 0x00000000000001c0 0x001e0000 dyld3::MachOAnalyzer::forEachBindLocation_Relocations(Diagnostics&, void (unsigned long long, unsigned int, bool&) block_pointer) const
[ 1264]   1264     Code            0x0000000000040460 0x0000000102c68460 0x0000000000000060 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::forEachBindLocation_Relocations(Diagnostics&, void (unsigned long long, unsigned int, bool&) block_pointer) const
[ 1265]   1265     Code            0x00000000000404c0 0x0000000102c684c0 0x0000000000000100 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::forEachBind_Relocations(Diagnostics&, dyld3::MachOLoaded::LinkEditInfo const&, dyld3::MachOFile::SegmentInfo const*, bool, void (char const*, dyld3::MachOLoaded::LinkEditInfo const&, dyld3::MachOFile::SegmentInfo const*, bool, bool, unsigned int, int, unsigned int, unsigned char, unsigned long long, unsigned char, char const*, bool, bool, unsigned long long, bool, bool&) block_pointer) const
[ 1266]   1266     Code            0x00000000000405c0 0x0000000102c685c0 0x00000000000000b4 0x001e0000 dyld3::MachOAnalyzer::forEachBindLocation_Opcodes(Diagnostics&, void (unsigned long long, unsigned int, bool&) block_pointer, void (unsigned long long, unsigned int, bool&) block_pointer) const
[ 1267]   1267     Code            0x0000000000040674 0x0000000102c68674 0x0000000000000014 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::forEachBindLocation_Opcodes(Diagnostics&, void (unsigned long long, unsigned int, bool&) block_pointer, void (unsigned long long, unsigned int, bool&) block_pointer) const
[ 1268]   1268     Code            0x0000000000040688 0x0000000102c68688 0x0000000000000014 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::forEachBindLocation_Opcodes(Diagnostics&, void (unsigned long long, unsigned int, bool&) block_pointer, void (unsigned long long, unsigned int, bool&) block_pointer) const
[ 1269]   1269     Code            0x000000000004069c 0x0000000102c6869c 0x00000000000001bc 0x001e0000 dyld3::MachOAnalyzer::forEachRebaseLocation_Opcodes(Diagnostics&, void (unsigned long long, bool&) block_pointer) const
[ 1270]   1270     Code            0x0000000000040858 0x0000000102c68858 0x0000000000000414 0x001e0000 dyld3::MachOAnalyzer::forEachRebase_Opcodes(Diagnostics&, dyld3::MachOLoaded::LinkEditInfo const&, dyld3::MachOFile::SegmentInfo const*, void (char const*, dyld3::MachOLoaded::LinkEditInfo const&, dyld3::MachOFile::SegmentInfo const*, bool, unsigned int, unsigned char, unsigned long long, dyld3::MachOAnalyzer::Rebase, bool&) block_pointer) const
[ 1271]   1271     Code            0x0000000000040c90 0x0000000102c68c90 0x000000000000002c 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::forEachRebaseLocation_Opcodes(Diagnostics&, void (unsigned long long, bool&) block_pointer) const
[ 1272]   1272     Code            0x0000000000040cbc 0x0000000102c68cbc 0x00000000000001bc 0x001e0000 dyld3::MachOAnalyzer::forEachRebaseLocation_Relocations(Diagnostics&, void (unsigned long long, bool&) block_pointer) const
[ 1273]   1273     Code            0x0000000000040e78 0x0000000102c68e78 0x0000000000000340 0x001e0000 dyld3::MachOAnalyzer::forEachRebase_Relocations(Diagnostics&, dyld3::MachOLoaded::LinkEditInfo const&, dyld3::MachOFile::SegmentInfo const*, void (char const*, dyld3::MachOLoaded::LinkEditInfo const&, dyld3::MachOFile::SegmentInfo const*, bool, unsigned int, unsigned char, unsigned long long, dyld3::MachOAnalyzer::Rebase, bool&) block_pointer) const
[ 1274]   1274     Code            0x00000000000411b8 0x0000000102c691b8 0x000000000000002c 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::forEachRebaseLocation_Relocations(Diagnostics&, void (unsigned long long, bool&) block_pointer) const
[ 1275]   1275     Code            0x00000000000411e4 0x0000000102c691e4 0x00000000000000d8 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::forEachRebase_Relocations(Diagnostics&, dyld3::MachOLoaded::LinkEditInfo const&, dyld3::MachOFile::SegmentInfo const*, void (char const*, dyld3::MachOLoaded::LinkEditInfo const&, dyld3::MachOFile::SegmentInfo const*, bool, unsigned int, unsigned char, unsigned long long, dyld3::MachOAnalyzer::Rebase, bool&) block_pointer) const
[ 1276]   1276     Code            0x00000000000412bc 0x0000000102c692bc 0x0000000000000014 0x000e0000 OUTLINED_FUNCTION_0
[ 1277]   1277     Code            0x00000000000412d0 0x0000000102c692d0 0x0000000000000014 0x000e0000 OUTLINED_FUNCTION_1
[ 1278]   1278     Code            0x00000000000412e4 0x0000000102c692e4 0x000000000000002c 0x001e0000 Diagnostics::error(char const*, ...)
[ 1279]   1279     Code            0x0000000000041310 0x0000000102c69310 0x0000000000000058 0x001e0000 Diagnostics::error(char const*, char*)
[ 1280]   1280     Code            0x0000000000041368 0x0000000102c69368 0x0000000000000050 0x001e0000 Diagnostics::appendError(char const*, ...)
[ 1281]   1281     Code            0x00000000000413b8 0x0000000102c693b8 0x000000000000003c 0x001e0000 Diagnostics::errorMessageContains(char const*) const
[ 1282]   1282     Code            0x00000000000413f4 0x0000000102c693f4 0x0000000000000018 0x001e0000 Diagnostics::errorMessage() const
[ 1283]   1283     Code            0x0000000000041468 0x0000000102c69468 0x00000000000001cc 0x001e0000 objc::PerfectHash::make_perfect(dyld3::OverflowSafeArray<objc::PerfectHash::key, 4294967295ul>&, objc::PerfectHash&)
[ 1284]   1284     Code            0x0000000000041634 0x0000000102c69634 0x000000000000074c 0x000e0000 objc::findhash(dyld3::OverflowSafeArray<objc::bstuff, 4294967295ul>&, unsigned int*, unsigned long long*, unsigned int*, unsigned int, dyld3::OverflowSafeArray<objc::PerfectHash::key, 4294967295ul>&)
[ 1285]   1285     Code            0x0000000000041d80 0x0000000102c69d80 0x00000000000000d0 0x001e0080 dyld3::OverflowSafeArray<unsigned char, 4294967295ul>::resize(unsigned long)
[ 1286]   1286     Code            0x0000000000041e50 0x0000000102c69e50 0x00000000000000e4 0x001e0080 dyld3::OverflowSafeArray<objc::PerfectHash::key, 4294967295ul>::push_back(objc::PerfectHash::key const&)
[ 1287]   1287     Code            0x0000000000041f34 0x0000000102c69f34 0x00000000000000ec 0x001e0080 dyld3::OverflowSafeArray<objc::bstuff, 4294967295ul>::resize(unsigned long)
[ 1288]   1288     Code            0x0000000000042020 0x0000000102c6a020 0x00000000000000d8 0x001e0080 dyld3::OverflowSafeArray<objc::qstuff, 4294967295ul>::resize(unsigned long)
[ 1289]   1289     Code            0x00000000000420f8 0x0000000102c6a0f8 0x00000000000000d8 0x001e0080 dyld3::OverflowSafeArray<objc::hstuff, 4294967295ul>::resize(unsigned long)
[ 1290]   1290     Code            0x00000000000421d0 0x0000000102c6a1d0 0x0000000000000014 0x000e0000 OUTLINED_FUNCTION_0
[ 1291]   1291     Code            0x00000000000421e4 0x0000000102c6a1e4 0x0000000000000014 0x000e0000 OUTLINED_FUNCTION_1
[ 1292]   1292     Code            0x00000000000421f8 0x0000000102c6a1f8 0x0000000000000074 0x001e0000 amfi_check_dyld_policy_self
[ 1293]   1293     Code            0x000000000004226c 0x0000000102c6a26c 0x000000000000016c 0x001e0000 arc4random
[ 1294]   1294     Code            0x00000000000423d8 0x0000000102c6a3d8 0x00000000000000d4 0x000e0000 arc4_fetch
[ 1295]   1295     Code            0x00000000000424ac 0x0000000102c6a4ac 0x00000000000000ec 0x000e0000 arc4_stir
[ 1296]   1296     Code            0x0000000000042598 0x0000000102c6a598 0x000000000000006c 0x001e0000 sysctlbyname
[ 1297]   1297     Code            0x0000000000042604 0x0000000102c6a604 0x0000000000000048 0x001e0000 _subsystem_init
[ 1298]   1298     Code            0x000000000004264c 0x0000000102c6a64c 0x0000000000000054 0x001e0000 strcat
[ 1299]   1299     Code            0x00000000000426a0 0x0000000102c6a6a0 0x0000000000000020 0x001e0000 os_log_simple_type_from_asl
[ 1300]   1300     Code            0x00000000000426c0 0x0000000102c6a6c0 0x0000000000000110 0x001e0000 __os_log_simple_offset
[ 1301]   1301     Code            0x00000000000427d0 0x0000000102c6a7d0 0x0000000000000178 0x001e0000 _os_log_simple_send
[ 1302]   1302     Code            0x0000000000042948 0x0000000102c6a948 0x0000000000000028 0x001e0000 _os_log_simple_shim
[ 1303]   1303     Code            0x0000000000042970 0x0000000102c6a970 0x00000000000000ac 0x001e0000 _simple_getenv
[ 1304]   1304     Code            0x0000000000042a1c 0x0000000102c6aa1c 0x0000000000000098 0x001e0000 _simple_asl_get_fd
[ 1305]   1305     Code            0x0000000000042ab4 0x0000000102c6aab4 0x00000000000000f4 0x000e0000 _simple_asl_connect_once
[ 1306]   1306     Code            0x0000000000042ba8 0x0000000102c6aba8 0x0000000000000084 0x001e0000 _simple_asl_log
[ 1307]   1307     Code            0x0000000000042c2c 0x0000000102c6ac2c 0x0000000000000018 0x000e0000 _simple_asl_init_context
[ 1308]   1308     Code            0x0000000000042c44 0x0000000102c6ac44 0x000000000000005c 0x001e0000 _simple_vdprintf
[ 1309]   1309     Code            0x0000000000042ca0 0x0000000102c6aca0 0x000000000000002c 0x000e0000 _flush_reset
[ 1310]   1310     Code            0x0000000000042ccc 0x0000000102c6accc 0x0000000000000780 0x000e0000 __simple_bprintf
[ 1311]   1311     Code            0x00000000000434a8 0x0000000102c6b4a8 0x0000000000000080 0x000e0000 _flush
[ 1312]   1312     Code            0x0000000000043528 0x0000000102c6b528 0x000000000000002c 0x001e0000 _simple_dprintf
[ 1313]   1313     Code            0x0000000000043554 0x0000000102c6b554 0x0000000000000084 0x001e0000 _simple_salloc
[ 1314]   1314     Code            0x00000000000435d8 0x0000000102c6b5d8 0x0000000000000140 0x000e0000 _enlarge
[ 1315]   1315     Code            0x0000000000043718 0x0000000102c6b718 0x0000000000000028 0x001e0000 _simple_vsprintf
[ 1316]   1316     Code            0x0000000000043740 0x0000000102c6b740 0x0000000000000038 0x001e0000 _simple_sprintf
[ 1317]   1317     Code            0x0000000000043778 0x0000000102c6b778 0x0000000000000010 0x001e0000 _simple_string
[ 1318]   1318     Code            0x0000000000043788 0x0000000102c6b788 0x0000000000000034 0x001e0000 _simple_sresize
[ 1319]   1319     Code            0x00000000000437bc 0x0000000102c6b7bc 0x0000000000000094 0x001e0000 _simple_sfree
[ 1320]   1320     Code            0x0000000000043850 0x0000000102c6b850 0x00000000000002f0 0x000e0000 dec
[ 1321]   1321     Code            0x0000000000043b40 0x0000000102c6bb40 0x00000000000001bc 0x000e0000 oct
[ 1322]   1322     Code            0x0000000000043cfc 0x0000000102c6bcfc 0x000000000000032c 0x000e0000 hex
[ 1323]   1323     Code            0x0000000000044028 0x0000000102c6c028 0x00000000000001cc 0x000e0000 udec
[ 1324]   1324     Code            0x00000000000441f4 0x0000000102c6c1f4 0x0000000000000230 0x000e0000 ydec
[ 1325]   1325     Code            0x0000000000044424 0x0000000102c6c424 0x000000000000000c 0x001e0000 os_lock_lock
[ 1326]   1326     Code            0x0000000000044430 0x0000000102c6c430 0x000000000000000c 0x001e0000 os_lock_unlock
[ 1327]   1327     Code            0x000000000004443c 0x0000000102c6c43c 0x0000000000000024 0x001e0000 os_unfair_lock_lock
[ 1328]   1328     Code            0x0000000000044460 0x0000000102c6c460 0x0000000000000150 0x000e0000 _os_unfair_lock_lock_slow
[ 1329]   1329     Code            0x00000000000445b0 0x0000000102c6c5b0 0x0000000000000020 0x001e0000 os_unfair_lock_lock_with_options
[ 1330]   1330     Code            0x00000000000445d0 0x0000000102c6c5d0 0x000000000000001c 0x001e0000 os_unfair_lock_unlock
[ 1331]   1331     Code            0x00000000000445ec 0x0000000102c6c5ec 0x00000000000000b0 0x000e0000 _os_unfair_lock_unlock_slow
[ 1332]   1332     Code            0x000000000004469c 0x0000000102c6c69c 0x0000000000000028 0x001e0000 _os_lock_unfair_lock
[ 1333]   1333     Code            0x00000000000446c4 0x0000000102c6c6c4 0x0000000000000020 0x001e0000 _os_lock_unfair_trylock
[ 1334]   1334     Code            0x00000000000446e4 0x0000000102c6c6e4 0x0000000000000020 0x001e0000 _os_lock_unfair_unlock
[ 1335]   1335     Code            0x0000000000044704 0x0000000102c6c704 0x00000000000000b0 0x000e0000 _os_once_gate_broadcast
[ 1336]   1336     Code            0x00000000000447b4 0x0000000102c6c7b4 0x0000000000000060 0x001e0000 _os_once
[ 1337]   1337     Code            0x0000000000044814 0x0000000102c6c814 0x0000000000000070 0x000e0000 _os_once_callout
[ 1338]   1338     Code            0x0000000000044884 0x0000000102c6c884 0x0000000000000194 0x000e0000 _os_once_gate_wait
[ 1339]   1339     Code            0x0000000000044a18 0x0000000102c6ca18 0x000000000000004c 0x001e0000 _os_alloc_once
[ 1340]   1340     Code            0x0000000000044a64 0x0000000102c6ca64 0x00000000000000b8 0x000e0000 _os_alloc
[ 1341]   1341     Code            0x0000000000044b1c 0x0000000102c6cb1c 0x000000000000013c 0x000e0000 _os_alloc_slow
[ 1342]   1342     Code            0x0000000000044c58 0x0000000102c6cc58 0x0000000000000030 0x001e0000 _os_semaphore_dispose
[ 1343]   1343     Code            0x0000000000044c88 0x0000000102c6cc88 0x0000000000000084 0x001e0000 _platform_strstr
[ 1344]   1344     Code            0x0000000000044d0c 0x0000000102c6cd0c 0x0000000000000004 0x001e0000 strstr
[ 1345]   1345     Code            0x0000000000044d10 0x0000000102c6cd10 0x0000000000000078 0x001e0000 _platform_strlcpy
[ 1346]   1346     Code            0x0000000000044d88 0x0000000102c6cd88 0x0000000000000080 0x001e0000 _platform_strncpy
[ 1347]   1347     Code            0x0000000000044e08 0x0000000102c6ce08 0x0000000000000004 0x001e0000 strncpy
[ 1348]   1348     Code            0x0000000000044e0c 0x0000000102c6ce0c 0x000000000000009c 0x001e0000 _platform_strlcat
[ 1349]   1349     Code            0x0000000000044ea8 0x0000000102c6cea8 0x0000000000000004 0x001e0000 strlcat
[ 1350]   1350     Code            0x0000000000044eac 0x0000000102c6ceac 0x0000000000000078 0x000e0000 _pthread_exit
[ 1351]   1351     Code            0x0000000000044f24 0x0000000102c6cf24 0x0000000000000078 0x000e0000 _pthread_joiner_wake
[ 1352]   1352     Code            0x0000000000044f9c 0x0000000102c6cf9c 0x0000000000000090 0x001e0000 pthread_exit
[ 1353]   1353     Code            0x000000000004502c 0x0000000102c6d02c 0x000000000000006c 0x000e0000 _pthread_set_self_dyld
[ 1354]   1354     Code            0x0000000000045098 0x0000000102c6d098 0x000000000000005c 0x000e0000 _pthread_terminate_invoke
[ 1355]   1355     Code            0x00000000000450f4 0x0000000102c6d0f4 0x0000000000000010 0x000e0000 _pthread_current_stack_address
[ 1356]   1356     Code            0x0000000000045104 0x0000000102c6d104 0x000000000000009c 0x000e0000 _pthread_introspection_hook_callout_thread_terminate
[ 1357]   1357     Code            0x00000000000451a0 0x0000000102c6d1a0 0x0000000000000068 0x000e0000 _pthread_introspection_hook_callout_thread_destroy
[ 1358]   1358     Code            0x0000000000045208 0x0000000102c6d208 0x000000000000002c 0x000e0000 _pthread_joiner_wake.cold.1
[ 1359]   1359     Code            0x0000000000045234 0x0000000102c6d234 0x000000000000002c 0x001e0000 _pthread_setcancelstate_exit
[ 1360]   1360     Code            0x0000000000045260 0x0000000102c6d260 0x0000000000000088 0x001e0000 _pthread_exit_if_canceled
[ 1361]   1361     Code            0x00000000000452e8 0x0000000102c6d2e8 0x0000000000000064 0x001e0000 _pthread_joiner_prepost_wake
[ 1362]   1362     Code            0x000000000004534c 0x0000000102c6d34c 0x000000000000001c 0x000e0000 OUTLINED_FUNCTION_0
[ 1363]   1363     Code            0x0000000000045368 0x0000000102c6d368 0x0000000000000018 0x000e0000 _pthread_exit_if_canceled.cold.1
[ 1364]   1364     Code            0x0000000000045380 0x0000000102c6d380 0x0000000000000020 0x000e0000 mutex_seq_atomic_cmpxchgv_relaxed
[ 1365]   1365     Code            0x00000000000453a0 0x0000000102c6d3a0 0x0000000000000020 0x000e0000 mutex_seq_atomic_cmpxchgv_acquire
[ 1366]   1366     Code            0x00000000000453c0 0x0000000102c6d3c0 0x0000000000000020 0x000e0000 mutex_seq_atomic_cmpxchgv_release
[ 1367]   1367     Code            0x00000000000453e0 0x0000000102c6d3e0 0x0000000000000118 0x001e0000 _pthread_mutex_fairshare_lock_slow
[ 1368]   1368     Code            0x00000000000454f8 0x0000000102c6d4f8 0x00000000000000c4 0x000e0000 _pthread_mutex_fairshare_lock_wait
[ 1369]   1369     Code            0x00000000000455bc 0x0000000102c6d5bc 0x000000000000012c 0x001e0000 _pthread_mutex_fairshare_unlock_slow
[ 1370]   1370     Code            0x00000000000456e8 0x0000000102c6d6e8 0x000000000000006c 0x000e0000 _pthread_mutex_fairshare_unlock_drop
[ 1371]   1371     Code            0x0000000000045754 0x0000000102c6d754 0x0000000000000110 0x000e0000 _pthread_mutex_ulock_lock_slow
[ 1372]   1372     Code            0x0000000000045864 0x0000000102c6d864 0x00000000000000c0 0x000e0000 _pthread_mutex_ulock_unlock_slow
[ 1373]   1373     Code            0x0000000000045924 0x0000000102c6d924 0x0000000000000114 0x001e0000 _pthread_mutex_firstfit_unlock_slow
[ 1374]   1374     Code            0x0000000000045a38 0x0000000102c6da38 0x0000000000000064 0x000e0000 _pthread_mutex_firstfit_wake
[ 1375]   1375     Code            0x0000000000045a9c 0x0000000102c6da9c 0x000000000000014c 0x001e0000 _pthread_mutex_firstfit_lock_slow
[ 1376]   1376     Code            0x0000000000045be8 0x0000000102c6dbe8 0x00000000000000a8 0x000e0000 _pthread_mutex_firstfit_lock_wait
[ 1377]   1377     Code            0x0000000000045c90 0x0000000102c6dc90 0x00000000000000e4 0x001e0000 _pthread_mutex_lock_init_slow
[ 1378]   1378     Code            0x0000000000045d74 0x0000000102c6dd74 0x00000000000000ec 0x001e0000 pthread_mutex_unlock
[ 1379]   1379     Code            0x0000000000045e60 0x0000000102c6de60 0x00000000000000cc 0x000e0000 _pthread_mutex_unlock_init_slow
[ 1380]   1380     Code            0x0000000000045f2c 0x0000000102c6df2c 0x0000000000000068 0x000e0000 _pthread_mutex_fairshare_unlock
[ 1381]   1381     Code            0x0000000000045f94 0x0000000102c6df94 0x0000000000000178 0x000e0000 _pthread_mutex_check_init_slow
[ 1382]   1382     Code            0x000000000004610c 0x0000000102c6e10c 0x0000000000000098 0x000e0000 _pthread_mutex_fairshare_lock
[ 1383]   1383     Code            0x00000000000461a4 0x0000000102c6e1a4 0x0000000000000004 0x001e0000 _pthread_tsd_cleanup
[ 1384]   1384     Code            0x00000000000461a8 0x0000000102c6e1a8 0x0000000000000084 0x000e0000 sandbox_warn
[ 1385]   1385     Code            0x000000000004622c 0x0000000102c6e22c 0x0000000000000070 0x001e0000 sandbox_check
[ 1386]   1386     Code            0x000000000004629c 0x0000000102c6e29c 0x000000000000006c 0x000e0000 sandbox_operation_fixup
[ 1387]   1387     Code            0x0000000000046308 0x0000000102c6e308 0x00000000000001f8 0x000e0000 sandbox_check_common
[ 1388]   1388     Code            0x0000000000046544 0x0000000102c6e544 0x0000000000000094 0x001e0000 _mach_continuous_time
[ 1389]   1389     Code            0x00000000000465d8 0x0000000102c6e5d8 0x0000000000000078 0x001e0000 mach_continuous_time
[ 1390]   1390     Code            0x0000000000046650 0x0000000102c6e650 0x00000000000000c0 0x000e0000 mach_init_doit
[ 1391]   1391     Code            0x0000000000046710 0x0000000102c6e710 0x00000000000000fc 0x001e0000 mach_msg
[ 1392]   1392     Code            0x000000000004680c 0x0000000102c6e80c 0x0000000000000128 0x001e0000 mach_msg_overwrite
[ 1393]   1393     Code            0x0000000000046934 0x0000000102c6e934 0x000000000000015c 0x001e0000 mach_msg_destroy
[ 1394]   1394     Code            0x0000000000046aa4 0x0000000102c6eaa4 0x000000000000011c 0x000e0000 mach_msg_destroy_port
[ 1395]   1395     Code            0x0000000000046bd8 0x0000000102c6ebd8 0x0000000000000034 0x001e0000 mig_get_reply_port
[ 1396]   1396     Code            0x0000000000046c0c 0x0000000102c6ec0c 0x000000000000007c 0x001e0000 mig_dealloc_reply_port
[ 1397]   1397     Code            0x0000000000046c88 0x0000000102c6ec88 0x0000000000000004 0x001e0000 mig_put_reply_port
[ 1398]   1398     Code            0x0000000000046c8c 0x0000000102c6ec8c 0x000000000000001c 0x001e0000 __error
[ 1399]   1399     Code            0x0000000000046ca8 0x0000000102c6eca8 0x0000000000000034 0x001e0000 cerror
[ 1400]   1400     Code            0x0000000000046cdc 0x0000000102c6ecdc 0x0000000000000038 0x001e0000 proc_pidinfo
[ 1401]   1401     Code            0x0000000000046d14 0x0000000102c6ed14 0x00000000000000dc 0x001e0000 chmod
[ 1402]   1402     Code            0x0000000000046df0 0x0000000102c6edf0 0x00000000000000dc 0x001e0000 fchmod
[ 1403]   1403     Code            0x0000000000046ecc 0x0000000102c6eecc 0x0000000000000004 0x001e0000 terminate_with_payload
[ 1404]   1404     Code            0x0000000000046ed0 0x0000000102c6eed0 0x0000000000000084 0x001e0000 fcntl
[ 1405]   1405     Code            0x0000000000046f54 0x0000000102c6ef54 0x0000000000000030 0x001e0000 ioctl
[ 1406]   1406     Code            0x0000000000046f84 0x0000000102c6ef84 0x00000000000000a4 0x001e0000 mmap
[ 1407]   1407     Code            0x0000000000047028 0x0000000102c6f028 0x0000000000000084 0x001e0000 kdebug_typefilter
[ 1408]   1408     Code            0x00000000000470ac 0x0000000102c6f0ac 0x0000000000000080 0x001e0000 kdebug_trace
[ 1409]   1409     Code            0x000000000004712c 0x0000000102c6f12c 0x000000000000008c 0x001e0000 kdebug_trace_string
[ 1410]   1410     Code            0x00000000000471b8 0x0000000102c6f1b8 0x0000000000000030 0x001e0000 unlink
[ 1411]   1411     Code            0x00000000000471e8 0x0000000102c6f1e8 0x0000000000000030 0x001e0000 rename
[ 1412]   1412     Code            0x0000000000047218 0x0000000102c6f218 0x0000000000000014 0x001e0000 __inc_remove_counter
[ 1413]   1413     Code            0x000000000004722c 0x0000000102c6f22c 0x0000000000000014 0x001e0000 _get_cpu_capabilities
[ 1414]   1414     Code            0x0000000000047240 0x0000000102c6f240 0x0000000000000004 0x001e0000 _init_cpu_capabilities
[ 1415]   1415     Code            0x0000000000047244 0x0000000102c6f244 0x0000000000000030 0x001e0000 open_dprotected_np
[ 1416]   1416     Code            0x0000000000047274 0x0000000102c6f274 0x000000000000005c 0x001e0000 mach_port_deallocate
[ 1417]   1417     Code            0x00000000000472d0 0x0000000102c6f2d0 0x0000000000000078 0x001e0000 mach_port_mod_refs
[ 1418]   1418     Code            0x0000000000047348 0x0000000102c6f348 0x0000000000000078 0x001e0000 mach_port_insert_right
[ 1419]   1419     Code            0x00000000000473c0 0x0000000102c6f3c0 0x0000000000000004 0x001e0000 mach_port_extract_right
[ 1420]   1420     Code            0x00000000000473c4 0x0000000102c6f3c4 0x0000000000000068 0x001e0000 thread_destruct_special_reply_port
[ 1421]   1421     Code            0x000000000004742c 0x0000000102c6f42c 0x0000000000000078 0x001e0000 mach_port_construct
[ 1422]   1422     Code            0x00000000000474a4 0x0000000102c6f4a4 0x0000000000000078 0x001e0000 mach_port_destruct
[ 1423]   1423     Code            0x000000000004751c 0x0000000102c6f51c 0x0000000000000070 0x001e0000 mach_port_unguard
[ 1424]   1424     Code            0x000000000004758c 0x0000000102c6f58c 0x00000000000000ac 0x001e0000 mach_vm_allocate
[ 1425]   1425     Code            0x0000000000047638 0x0000000102c6f638 0x00000000000000a4 0x001e0000 mach_vm_deallocate
[ 1426]   1426     Code            0x00000000000476dc 0x0000000102c6f6dc 0x000000000000008c 0x001e0000 mach_vm_protect
[ 1427]   1427     Code            0x0000000000047768 0x0000000102c6f768 0x0000000000000004 0x001e0000 vm_deallocate
[ 1428]   1428     Code            0x000000000004776c 0x0000000102c6f76c 0x0000000000000004 0x001e0000 vm_protect
[ 1429]   1429     Code            0x0000000000047770 0x0000000102c6f770 0x0000000000000134 0x001e0000 mach_vm_map
[ 1430]   1430     Code            0x00000000000478a4 0x0000000102c6f8a4 0x000000000000012c 0x001e0000 _kernelrpc_mach_port_deallocate
[ 1431]   1431     Code            0x00000000000479d0 0x0000000102c6f9d0 0x0000000000000128 0x001e0000 _kernelrpc_mach_port_mod_refs
[ 1432]   1432     Code            0x0000000000047af8 0x0000000102c6faf8 0x0000000000000138 0x001e0000 _kernelrpc_mach_port_insert_right
[ 1433]   1433     Code            0x0000000000047c30 0x0000000102c6fc30 0x000000000000017c 0x001e0000 _kernelrpc_mach_port_extract_right
[ 1434]   1434     Code            0x0000000000047dac 0x0000000102c6fdac 0x0000000000000158 0x001e0000 _kernelrpc_mach_port_construct
[ 1435]   1435     Code            0x0000000000047f04 0x0000000102c6ff04 0x0000000000000128 0x001e0000 _kernelrpc_mach_port_destruct
[ 1436]   1436     Code            0x000000000004802c 0x0000000102c7002c 0x0000000000000128 0x001e0000 _kernelrpc_mach_port_unguard
[ 1437]   1437     Code            0x0000000000048154 0x0000000102c70154 0x0000000000000148 0x001e0000 _kernelrpc_mach_vm_allocate
[ 1438]   1438     Code            0x000000000004829c 0x0000000102c7029c 0x0000000000000128 0x001e0000 _kernelrpc_mach_vm_deallocate
[ 1439]   1439     Code            0x00000000000483c4 0x0000000102c703c4 0x0000000000000130 0x001e0000 _kernelrpc_mach_vm_protect
[ 1440]   1440     Code            0x00000000000484f4 0x0000000102c704f4 0x000000000000017c 0x001e0000 _kernelrpc_mach_vm_map
[ 1441]   1441     Code            0x0000000000048670 0x0000000102c70670 0x0000000000000128 0x001e0000 semaphore_destroy
[ 1442]   1442     Code            0x0000000000048798 0x0000000102c70798 0x000000000000002c 0x001e0000 __abort_with_payload
[ 1443]   1443     Code            0x00000000000487c4 0x0000000102c707c4 0x000000000000002c 0x001e0000 __bsdthread_create
[ 1444]   1444     Code            0x00000000000487f0 0x0000000102c707f0 0x000000000000002c 0x001e0000 __bsdthread_ctl
[ 1445]   1445     Code            0x000000000004881c 0x0000000102c7081c 0x000000000000002c 0x001e0000 __bsdthread_register
[ 1446]   1446     Code            0x0000000000048848 0x0000000102c70848 0x000000000000002c 0x001e0000 __bsdthread_terminate
[ 1447]   1447     Code            0x0000000000048874 0x0000000102c70874 0x000000000000002c 0x001e0000 __chmod
[ 1448]   1448     Code            0x00000000000488a0 0x0000000102c708a0 0x000000000000002c 0x001e0000 connect
[ 1449]   1449     Code            0x00000000000488a0 0x0000000102c708a0 0x000000000000002c 0x001e0000 __connect
[ 1450]   1450     Code            0x00000000000488cc 0x0000000102c708cc 0x000000000000002c 0x001e0000 __disable_threadsignal
[ 1451]   1451     Code            0x00000000000488f8 0x0000000102c708f8 0x000000000000002c 0x001e0000 __execve
[ 1452]   1452     Code            0x0000000000048924 0x0000000102c70924 0x000000000000002c 0x001e0000 _exit
[ 1453]   1453     Code            0x0000000000048924 0x0000000102c70924 0x000000000000002c 0x001e0000 __exit
[ 1454]   1454     Code            0x0000000000048950 0x0000000102c70950 0x000000000000002c 0x001e0000 __fchmod
[ 1455]   1455     Code            0x000000000004897c 0x0000000102c7097c 0x0000000000000050 0x001e0000 getpid
[ 1456]   1456     Code            0x000000000004897c 0x0000000102c7097c 0x0000000000000050 0x001e0000 __getpid
[ 1457]   1457     Code            0x00000000000489cc 0x0000000102c709cc 0x000000000000002c 0x001e0000 __gettimeofday_with_mach
[ 1458]   1458     Code            0x00000000000489f8 0x0000000102c709f8 0x0000000000000030 0x001e0000 __gettimeofday
[ 1459]   1459     Code            0x0000000000048a28 0x0000000102c70a28 0x000000000000002c 0x001e0000 __ioctl
[ 1460]   1460     Code            0x0000000000048a54 0x0000000102c70a54 0x000000000000002c 0x001e0000 __kdebug_trace64
[ 1461]   1461     Code            0x0000000000048a80 0x0000000102c70a80 0x000000000000002c 0x001e0000 __kdebug_trace_string
[ 1462]   1462     Code            0x0000000000048aac 0x0000000102c70aac 0x000000000000002c 0x001e0000 __kdebug_typefilter
[ 1463]   1463     Code            0x0000000000048ad8 0x0000000102c70ad8 0x000000000000002c 0x001e0000 __kqueue_workloop_ctl
[ 1464]   1464     Code            0x0000000000048b04 0x0000000102c70b04 0x000000000000002c 0x001e0000 __munmap
[ 1465]   1465     Code            0x0000000000048b30 0x0000000102c70b30 0x000000000000002c 0x001e0000 __open_dprotected_np
[ 1466]   1466     Code            0x0000000000048b5c 0x0000000102c70b5c 0x000000000000002c 0x001e0000 __openat
[ 1467]   1467     Code            0x0000000000048b88 0x0000000102c70b88 0x000000000000002c 0x001e0000 __posix_spawn
[ 1468]   1468     Code            0x0000000000048bb4 0x0000000102c70bb4 0x000000000000002c 0x001e0000 __proc_info_extended_id
[ 1469]   1469     Code            0x0000000000048be0 0x0000000102c70be0 0x000000000000002c 0x001e0000 __process_policy
[ 1470]   1470     Code            0x0000000000048c0c 0x0000000102c70c0c 0x000000000000002c 0x001e0000 __psynch_cvbroad
[ 1471]   1471     Code            0x0000000000048c38 0x0000000102c70c38 0x000000000000002c 0x001e0000 __psynch_cvclrprepost
[ 1472]   1472     Code            0x0000000000048c64 0x0000000102c70c64 0x000000000000002c 0x001e0000 __psynch_cvsignal
[ 1473]   1473     Code            0x0000000000048c90 0x0000000102c70c90 0x000000000000002c 0x001e0000 __psynch_cvwait
[ 1474]   1474     Code            0x0000000000048cbc 0x0000000102c70cbc 0x000000000000002c 0x001e0000 __psynch_mutexdrop
[ 1475]   1475     Code            0x0000000000048ce8 0x0000000102c70ce8 0x000000000000002c 0x001e0000 __psynch_mutexwait
[ 1476]   1476     Code            0x0000000000048d14 0x0000000102c70d14 0x000000000000002c 0x001e0000 __pthread_canceled
[ 1477]   1477     Code            0x0000000000048d40 0x0000000102c70d40 0x000000000000002c 0x001e0000 __pthread_kill
[ 1478]   1478     Code            0x0000000000048d6c 0x0000000102c70d6c 0x000000000000002c 0x001e0000 __pthread_markcancel
[ 1479]   1479     Code            0x0000000000048d98 0x0000000102c70d98 0x000000000000002c 0x001e0000 __pthread_sigmask
[ 1480]   1480     Code            0x0000000000048dc4 0x0000000102c70dc4 0x000000000000002c 0x001e0000 __rename
[ 1481]   1481     Code            0x0000000000048df0 0x0000000102c70df0 0x000000000000002c 0x001e0000 __semwait_signal_nocancel
[ 1482]   1482     Code            0x0000000000048e1c 0x0000000102c70e1c 0x000000000000002c 0x001e0000 sendto
[ 1483]   1483     Code            0x0000000000048e1c 0x0000000102c70e1c 0x000000000000002c 0x001e0000 __sendto
[ 1484]   1484     Code            0x0000000000048e48 0x0000000102c70e48 0x000000000000002c 0x001e0000 __shared_region_check_np
[ 1485]   1485     Code            0x0000000000048e74 0x0000000102c70e74 0x000000000000002c 0x001e0000 __shared_region_map_and_slide_2_np
[ 1486]   1486     Code            0x0000000000048ea0 0x0000000102c70ea0 0x000000000000002c 0x001e0000 __sigwait
[ 1487]   1487     Code            0x0000000000048ecc 0x0000000102c70ecc 0x000000000000002c 0x001e0000 __sysctlbyname
[ 1488]   1488     Code            0x0000000000048ef8 0x0000000102c70ef8 0x000000000000002c 0x001e0000 __terminate_with_payload
[ 1489]   1489     Code            0x0000000000048f24 0x0000000102c70f24 0x000000000000002c 0x001e0000 __ulock_wait
[ 1490]   1490     Code            0x0000000000048f50 0x0000000102c70f50 0x000000000000002c 0x001e0000 __ulock_wait2
[ 1491]   1491     Code            0x0000000000048f7c 0x0000000102c70f7c 0x000000000000002c 0x001e0000 __ulock_wake
[ 1492]   1492     Code            0x0000000000048fa8 0x0000000102c70fa8 0x000000000000002c 0x001e0000 __unlink
[ 1493]   1493     Code            0x0000000000048fd4 0x0000000102c70fd4 0x000000000000002c 0x001e0000 __workq_kernreturn
[ 1494]   1494     Code            0x0000000000049000 0x0000000102c71000 0x000000000000002c 0x001e0000 __workq_open
[ 1495]   1495     Code            0x000000000004902c 0x0000000102c7102c 0x000000000000002c 0x001e0000 fsetxattr
[ 1496]   1496     Code            0x0000000000049058 0x0000000102c71058 0x000000000000002c 0x001e0000 fstat64
[ 1497]   1497     Code            0x0000000000049058 0x0000000102c71058 0x000000000000002c 0x001e0000 fstat
[ 1498]   1498     Code            0x0000000000049084 0x0000000102c71084 0x000000000000002c 0x001e0000 ftruncate
[ 1499]   1499     Code            0x00000000000490b0 0x0000000102c710b0 0x000000000000002c 0x001e0000 getattrlistbulk
[ 1500]   1500     Code            0x00000000000490dc 0x0000000102c710dc 0x000000000000002c 0x001e0000 getentropy
[ 1501]   1501     Code            0x0000000000049108 0x0000000102c71108 0x000000000000002c 0x001e0000 getgid
[ 1502]   1502     Code            0x0000000000049134 0x0000000102c71134 0x000000000000002c 0x001e0000 getuid
[ 1503]   1503     Code            0x0000000000049160 0x0000000102c71160 0x000000000000002c 0x001e0000 getxattr
[ 1504]   1504     Code            0x000000000004918c 0x0000000102c7118c 0x000000000000002c 0x001e0000 mkdir
[ 1505]   1505     Code            0x00000000000491b8 0x0000000102c711b8 0x000000000000002c 0x001e0000 mremap_encrypted
[ 1506]   1506     Code            0x00000000000491e4 0x0000000102c711e4 0x000000000000002c 0x001e0000 os_fault_with_payload
[ 1507]   1507     Code            0x0000000000049210 0x0000000102c71210 0x000000000000002c 0x001e0000 pread
[ 1508]   1508     Code            0x000000000004923c 0x0000000102c7123c 0x000000000000002c 0x001e0000 proc_rlimit_control
[ 1509]   1509     Code            0x0000000000049268 0x0000000102c71268 0x000000000000002c 0x001e0000 pwrite
[ 1510]   1510     Code            0x0000000000049294 0x0000000102c71294 0x000000000000002c 0x001e0000 read
[ 1511]   1511     Code            0x00000000000492c0 0x0000000102c712c0 0x000000000000002c 0x001e0000 setxattr
[ 1512]   1512     Code            0x00000000000492ec 0x0000000102c712ec 0x000000000000002c 0x001e0000 sigprocmask
[ 1513]   1513     Code            0x0000000000049318 0x0000000102c71318 0x000000000000002c 0x001e0000 socket
[ 1514]   1514     Code            0x0000000000049344 0x0000000102c71344 0x000000000000002c 0x001e0000 statfs64
[ 1515]   1515     Code            0x0000000000049344 0x0000000102c71344 0x000000000000002c 0x001e0000 statfs
[ 1516]   1516     Code            0x0000000000049370 0x0000000102c71370 0x000000000000002c 0x001e0000 write
[ 1517]   1517     Code            0x000000000004939c 0x0000000102c7139c 0x0000000000000010 0x001e0000 _thread_set_tsd_base
[ 1518]   1518     Code            0x00000000000493ac 0x0000000102c713ac 0x0000000000000080 0x000e0000 ccsha384_vng_arm_compress
[ 1519]   1519     Code            0x000000000004942c 0x0000000102c7142c 0x00000000000001cc 0x001e0000 ccdigest_final_64be
[ 1520]   1520     Code            0x00000000000495f8 0x0000000102c715f8 0x0000000000000048 0x001e0000 ccdigest_init
[ 1521]   1521     Code            0x0000000000049640 0x0000000102c71640 0x0000000000000160 0x001e0000 ccdigest_update
[ 1522]   1522     Code            0x00000000000497a0 0x0000000102c717a0 0x0000000000000100 0x000e0000 K256
[ 1523]   1523     Code            0x00000000000498a0 0x0000000102c718a0 0x0000000000000304 0x001e0000 AccelerateCrypto_SHA256_compress
[ 1524]   1524     Code            0x0000000000049ba4 0x0000000102c71ba4 0x000000000000000c 0x001e0000 ccsha1_di
[ 1525]   1525     Code            0x0000000000049bb0 0x0000000102c71bb0 0x0000000000000010 0x000e0000 ccsha1_vng_arm_compress
[ 1526]   1526     Code            0x0000000000049bc0 0x0000000102c71bc0 0x0000000000000880 0x001e0000 AccelerateCrypto_SHA512_compress_hwassist
[ 1527]   1527     Code            0x000000000004a440 0x0000000102c72440 0x0000000000000040 0x000e0000 K_XMM_AR
[ 1528]   1528     Code            0x000000000004a480 0x0000000102c72480 0x0000000000000404 0x001e0000 AccelerateCrypto_SHA1_compress
[ 1529]   1529     Code            0x000000000004a884 0x0000000102c72884 0x0000000000000004 0x000e0000 ccsha256_vng_arm_compress
[ 1530]   1530     Code            0x000000000004a888 0x0000000102c72888 0x00000000000001c8 0x001e0000 ccsha512_final
[ 1531]   1531     Code            0x000000000004aa50 0x0000000102c72a50 0x0000000000000014 0x001e0000 cc_clear
[ 1532]   1532     Code            0x000000000004aa64 0x0000000102c72a64 0x000000000000000c 0x001e0000 ccsha256_di
[ 1533]   1533     Code            0x000000000004aa70 0x0000000102c72a70 0x000000000000000c 0x001e0000 ccsha384_di
[ 1534]   1534     Code            0x000000000004aa7c 0x0000000102c72a7c 0x000000000000002c 0x001e0000 __chkstk_darwin_probe
[ 1535]   1535     Code            0x000000000004aaa8 0x0000000102c72aa8 0x0000000000000008 0x001e0000 ___chkstk_darwin
[ 1536]   1536     Code            0x000000000004aab0 0x0000000102c72ab0 0x0000000000000028 0x000e0000 dyld3::OverflowSafeArray<dyld4::Loader*, 4294967295ul>::push_back(dyld4::Loader* const&) (.cold.1)
[ 1537]   1537     Code            0x000000000004aad8 0x0000000102c72ad8 0x000000000000002c 0x000e0000 dyld4::Vector<dyld4::AuthenticatedValue<dyld4::Loader const*> >::erase(dyld4::AuthenticatedValue<dyld4::Loader const*>*) (.cold.1)
[ 1538]   1538     Code            0x000000000004ab04 0x0000000102c72b04 0x000000000000002c 0x000e0000 dyld4::Vector<dyld4::AuthenticatedValue<dyld4::Loader const*> >::reserve(unsigned long) (.cold.1)
[ 1539]   1539     Code            0x000000000004ab30 0x0000000102c72b30 0x0000000000000028 0x000e0000 dyld3::Map<char const*, dyld4::WeakDefMapValue, dyld3::HashCString, dyld3::EqualCString>::Map() (.cold.1)
[ 1540]   1540     Code            0x000000000004ab58 0x0000000102c72b58 0x0000000000000028 0x000e0000 dyld3::Map<char const*, dyld4::WeakDefMapValue, dyld3::HashCString, dyld3::EqualCString>::Map() (.cold.2)
[ 1541]   1541     Code            0x000000000004ab80 0x0000000102c72b80 0x0000000000000028 0x000e0000 dyld3::OverflowSafeArray<unsigned long, 4294967295ul>::push_back(unsigned long const&) (.cold.1)
[ 1542]   1542     Code            0x000000000004aba8 0x0000000102c72ba8 0x0000000000000028 0x000e0000 dyld4::ProcessConfig::Process::strdup(char const*) const (.cold.1)
[ 1543]   1543     Code            0x000000000004abd0 0x0000000102c72bd0 0x0000000000000028 0x000e0000 dyld4::ProcessConfig::PathOverrides::addPathOverride(dyld4::ProcessConfig::Process const&, char const*, char const*) (.cold.1)
[ 1544]   1544     Code            0x000000000004abf8 0x0000000102c72bf8 0x000000000000002c 0x000e0000 dyld4::RuntimeState::appLoadAddress(unsigned short) (.cold.1)
[ 1545]   1545     Code            0x000000000004ac24 0x0000000102c72c24 0x000000000000002c 0x000e0000 dyld4::RuntimeState::appLoadAddress(unsigned short) (.cold.2)
[ 1546]   1546     Code            0x000000000004ac50 0x0000000102c72c50 0x000000000000002c 0x000e0000 dyld4::RuntimeState::setAppLoadAddress(unsigned short, dyld3::MachOLoaded const*) (.cold.1)
[ 1547]   1547     Code            0x000000000004ac7c 0x0000000102c72c7c 0x000000000000002c 0x000e0000 dyld4::RuntimeState::setAppLoadAddress(unsigned short, dyld3::MachOLoaded const*) (.cold.2)
[ 1548]   1548     Code            0x000000000004aca8 0x0000000102c72ca8 0x000000000000002c 0x000e0000 dyld4::RuntimeState::cachedDylibLoadAddress(unsigned short) (.cold.1)
[ 1549]   1549     Code            0x000000000004acd4 0x0000000102c72cd4 0x0000000000000028 0x000e0000 dyld4::RuntimeState::PermanentRanges::make(dyld4::RuntimeState&, dyld3::Array<dyld4::Loader const*> const&) (.cold.1)
[ 1550]   1550     Code            0x000000000004acfc 0x0000000102c72cfc 0x0000000000000028 0x000e0000 dyld3::OverflowSafeArray<dyld4::RuntimeState::PermanentRanges::Range, 4294967295ul>::push_back(dyld4::RuntimeState::PermanentRanges::Range const&) (.cold.1)
[ 1551]   1551     Code            0x000000000004ad24 0x0000000102c72d24 0x0000000000000028 0x000e0000 dyld3::OverflowSafeArray<dyld4::RuntimeState::HiddenCacheAddr, 4294967295ul>::push_back(dyld4::RuntimeState::HiddenCacheAddr const&) (.cold.1)
[ 1552]   1552     Code            0x000000000004ad4c 0x0000000102c72d4c 0x0000000000000028 0x000e0000 dyld4::RuntimeState::appendInterposingTuples(dyld4::Loader const*, unsigned char const*, unsigned int) (.cold.1)
[ 1553]   1553     Code            0x000000000004ad74 0x0000000102c72d74 0x000000000000002c 0x000e0000 invocation function for block in dyld4::RuntimeState::appendInterposingTuples(dyld4::Loader const*, unsigned char const*, unsigned int)
[ 1554]   1554     Code            0x000000000004ada0 0x0000000102c72da0 0x0000000000000028 0x000e0000 dyld3::OverflowSafeArray<void const*, 4294967295ul>::push_back(void const* const&) (.cold.1)
[ 1555]   1555     Code            0x000000000004adc8 0x0000000102c72dc8 0x0000000000000028 0x000e0000 dyld3::OverflowSafeArray<char const*, 4294967295ul>::push_back(char const* const&) (.cold.1)
[ 1556]   1556     Code            0x000000000004adf0 0x0000000102c72df0 0x0000000000000028 0x000e0000 invocation function for block in dyld4::RuntimeState::appendInterposingTuples(dyld4::Loader const*, unsigned char const*, unsigned int)
[ 1557]   1557     Code            0x000000000004ae18 0x0000000102c72e18 0x0000000000000028 0x000e0000 invocation function for block in dyld4::RuntimeState::appendInterposingTuples(dyld4::Loader const*, unsigned char const*, unsigned int)
[ 1558]   1558     Code            0x000000000004ae40 0x0000000102c72e40 0x0000000000000028 0x000e0000 invocation function for block in dyld4::RuntimeState::appendInterposingTuples(dyld4::Loader const*, unsigned char const*, unsigned int)
[ 1559]   1559     Code            0x000000000004ae68 0x0000000102c72e68 0x0000000000000028 0x000e0000 invocation function for block in dyld4::RuntimeState::appendInterposingTuples(dyld4::Loader const*, unsigned char const*, unsigned int)
[ 1560]   1560     Code            0x000000000004ae90 0x0000000102c72e90 0x0000000000000028 0x000e0000 invocation function for block in dyld4::RuntimeState::appendInterposingTuples(dyld4::Loader const*, unsigned char const*, unsigned int)
[ 1561]   1561     Code            0x000000000004aeb8 0x0000000102c72eb8 0x0000000000000028 0x000e0000 invocation function for block in dyld4::RuntimeState::appendInterposingTuples(dyld4::Loader const*, unsigned char const*, unsigned int)
[ 1562]   1562     Code            0x000000000004aee0 0x0000000102c72ee0 0x0000000000000028 0x000e0000 invocation function for block in dyld4::RuntimeState::appendInterposingTuples(dyld4::Loader const*, unsigned char const*, unsigned int)
[ 1563]   1563     Code            0x000000000004af08 0x0000000102c72f08 0x0000000000000028 0x000e0000 invocation function for block in dyld4::RuntimeState::appendInterposingTuples(dyld4::Loader const*, unsigned char const*, unsigned int)
[ 1564]   1564     Code            0x000000000004af30 0x0000000102c72f30 0x0000000000000028 0x000e0000 invocation function for block in dyld4::RuntimeState::appendInterposingTuples(dyld4::Loader const*, unsigned char const*, unsigned int)
[ 1565]   1565     Code            0x000000000004af58 0x0000000102c72f58 0x0000000000000028 0x000e0000 invocation function for block in dyld4::RuntimeState::appendInterposingTuples(dyld4::Loader const*, unsigned char const*, unsigned int)
[ 1566]   1566     Code            0x000000000004af80 0x0000000102c72f80 0x0000000000000028 0x000e0000 dyld4::Vector<dyld4::InterposeTupleAll>::reserve(unsigned long) (.cold.1)
[ 1567]   1567     Code            0x000000000004afa8 0x0000000102c72fa8 0x0000000000000028 0x000e0000 dyld4::Vector<dyld4::InterposeTupleSpecific>::reserve(unsigned long) (.cold.1)
[ 1568]   1568     Code            0x000000000004afd0 0x0000000102c72fd0 0x000000000000002c 0x000e0000 dyld4::Vector<dyld4::RuntimeState::DlopenCount>::erase(dyld4::RuntimeState::DlopenCount*) (.cold.1)
[ 1569]   1569     Code            0x000000000004affc 0x0000000102c72ffc 0x0000000000000028 0x000e0000 dyld3::OverflowSafeArray<__cxa_range_t, 4294967295ul>::push_back(__cxa_range_t const&) (.cold.1)
[ 1570]   1570     Code            0x000000000004b024 0x0000000102c73024 0x0000000000000028 0x000e0000 dyld4::RuntimeState::garbageCollectInner() (.cold.1)
[ 1571]   1571     Code            0x000000000004b04c 0x0000000102c7304c 0x0000000000000028 0x000e0000 dyld3::Array<dyld4::Reaper::LoaderAndUse>::push_back(dyld4::Reaper::LoaderAndUse const&) (.cold.1)
[ 1572]   1572     Code            0x000000000004b074 0x0000000102c73074 0x0000000000000028 0x000e0000 dyld4::RuntimeState::notifyUnload(dyld3::Array<dyld4::Loader const*> const&) (.cold.1)
[ 1573]   1573     Code            0x000000000004b09c 0x0000000102c7309c 0x0000000000000028 0x000e0000 dyld4::RuntimeState::notifyUnload(dyld3::Array<dyld4::Loader const*> const&) (.cold.2)
[ 1574]   1574     Code            0x000000000004b0c4 0x0000000102c730c4 0x0000000000000028 0x000e0000 dyld4::RuntimeState::notifyDebuggerLoad(dyld3::Array<dyld4::Loader const*> const&) (.cold.1)
[ 1575]   1575     Code            0x000000000004b0ec 0x0000000102c730ec 0x0000000000000028 0x000e0000 dyld4::RuntimeState::notifyDebuggerLoad(dyld3::Array<dyld4::Loader const*> const&) (.cold.2)
[ 1576]   1576     Code            0x000000000004b114 0x0000000102c73114 0x0000000000000028 0x000e0000 dyld4::RuntimeState::notifyDebuggerUnload(dyld3::Array<dyld4::Loader const*> const&) (.cold.1)
[ 1577]   1577     Code            0x000000000004b13c 0x0000000102c7313c 0x0000000000000028 0x000e0000 dyld4::RuntimeState::notifyDebuggerUnload(dyld3::Array<dyld4::Loader const*> const&) (.cold.2)
[ 1578]   1578     Code            0x000000000004b164 0x0000000102c73164 0x0000000000000028 0x000e0000 dyld4::RuntimeState::notifyLoad(dyld3::Array<dyld4::Loader const*> const&) (.cold.1)
[ 1579]   1579     Code            0x000000000004b18c 0x0000000102c7318c 0x0000000000000028 0x000e0000 dyld4::RuntimeState::notifyLoad(dyld3::Array<dyld4::Loader const*> const&) (.cold.2)
[ 1580]   1580     Code            0x000000000004b1b4 0x0000000102c731b4 0x0000000000000028 0x000e0000 invocation function for block in dyld4::RuntimeState::notifyLoad(dyld3::Array<dyld4::Loader const*> const&)
[ 1581]   1581     Code            0x000000000004b1dc 0x0000000102c731dc 0x0000000000000028 0x000e0000 invocation function for block in dyld4::RuntimeState::notifyLoad(dyld3::Array<dyld4::Loader const*> const&)
[ 1582]   1582     Code            0x000000000004b204 0x0000000102c73204 0x0000000000000028 0x000e0000 invocation function for block in dyld4::RuntimeState::setObjCNotifiers(void (*)(unsigned int, char const* const*, mach_header const* const*), void (*)(char const*, mach_header const*), void (*)(char const*, mach_header const*))
[ 1583]   1583     Code            0x000000000004b22c 0x0000000102c7322c 0x0000000000000028 0x000e0000 invocation function for block in dyld4::RuntimeState::setObjCNotifiers(void (*)(unsigned int, char const* const*, mach_header const* const*), void (*)(char const*, mach_header const*), void (*)(char const*, mach_header const*))
[ 1584]   1584     Code            0x000000000004b254 0x0000000102c73254 0x0000000000000028 0x000e0000 invocation function for block in dyld4::RuntimeState::setObjCNotifiers(void (*)(unsigned int, char const* const*, mach_header const* const*), void (*)(char const*, mach_header const*), void (*)(char const*, mach_header const*))
[ 1585]   1585     Code            0x000000000004b27c 0x0000000102c7327c 0x0000000000000028 0x000e0000 invocation function for block in dyld4::RuntimeState::setObjCNotifiers(void (*)(unsigned int, char const* const*, mach_header const* const*), void (*)(char const*, mach_header const*), void (*)(char const*, mach_header const*))
[ 1586]   1586     Code            0x000000000004b2a4 0x0000000102c732a4 0x0000000000000028 0x000e0000 dyld3::Array<unsigned char>::push_back(unsigned char const&) (.cold.1)
[ 1587]   1587     Code            0x000000000004b2cc 0x0000000102c732cc 0x000000000000002c 0x000e0000 dyld4::RuntimeState::findPrebuiltLoader(char const*) const (.cold.1)
[ 1588]   1588     Code            0x000000000004b2f8 0x0000000102c732f8 0x000000000000002c 0x000e0000 dyld4::RuntimeState::initializeClosureMode() (.cold.1)
[ 1589]   1589     Code            0x000000000004b324 0x0000000102c73324 0x0000000000000028 0x000e0000 dyld4::Vector<dyld4::RuntimeState::DynamicReference>::reserve(unsigned long) (.cold.1)
[ 1590]   1590     Code            0x000000000004b34c 0x0000000102c7334c 0x0000000000000028 0x000e0000 dyld4::Vector<dyld4::RuntimeState::MissingFlatSymbol>::reserve(unsigned long) (.cold.1)
[ 1591]   1591     Code            0x000000000004b374 0x0000000102c73374 0x0000000000000028 0x000e0000 dyld4::Vector<dyld4::RuntimeState::DlopenCount>::reserve(unsigned long) (.cold.1)
[ 1592]   1592     Code            0x000000000004b39c 0x0000000102c7339c 0x0000000000000028 0x000e0000 dyld4::Vector<dyld4::RuntimeState::RegisteredDOF>::reserve(unsigned long) (.cold.1)
[ 1593]   1593     Code            0x000000000004b3c4 0x0000000102c733c4 0x0000000000000028 0x000e0000 dyld4::Vector<void (*)(mach_header const*, long)>::reserve(unsigned long) (.cold.1)
[ 1594]   1594     Code            0x000000000004b3ec 0x0000000102c733ec 0x0000000000000028 0x000e0000 dyld4::Vector<dyld4::Loader const*>::reserve(unsigned long) (.cold.1)
[ 1595]   1595     Code            0x000000000004b414 0x0000000102c73414 0x0000000000000028 0x000e0000 dyld4::Vector<void (*)(mach_header const*, char const*, bool)>::reserve(unsigned long) (.cold.1)
[ 1596]   1596     Code            0x000000000004b43c 0x0000000102c7343c 0x0000000000000028 0x000e0000 dyld4::Vector<void (*)(unsigned int, mach_header const**, char const**)>::reserve(unsigned long) (.cold.1)
[ 1597]   1597     Code            0x000000000004b464 0x0000000102c73464 0x0000000000000028 0x000e0000 dyld4::Vector<dyld4::RuntimeState::TLV_Info>::reserve(unsigned long) (.cold.1)
[ 1598]   1598     Code            0x000000000004b48c 0x0000000102c7348c 0x000000000000002c 0x000e0000 dyld4::Loader::path() const (.cold.1)
[ 1599]   1599     Code            0x000000000004b4b8 0x0000000102c734b8 0x000000000000002c 0x000e0000 dyld4::Loader::loadAddress(dyld4::RuntimeState&) const (.cold.1)
[ 1600]   1600     Code            0x000000000004b4e4 0x0000000102c734e4 0x000000000000002c 0x000e0000 dyld4::Loader::contains(dyld4::RuntimeState&, void const*, void const**, unsigned long long*, unsigned char*) const (.cold.1)
[ 1601]   1601     Code            0x000000000004b510 0x0000000102c73510 0x000000000000002c 0x000e0000 dyld4::Loader::matchesPath(char const*) const (.cold.1)
[ 1602]   1602     Code            0x000000000004b53c 0x0000000102c7353c 0x000000000000002c 0x000e0000 dyld4::Loader::fileID() const (.cold.1)
[ 1603]   1603     Code            0x000000000004b568 0x0000000102c73568 0x000000000000002c 0x000e0000 dyld4::Loader::dependentCount() const (.cold.1)
[ 1604]   1604     Code            0x000000000004b594 0x0000000102c73594 0x000000000000002c 0x000e0000 dyld4::Loader::dependent(dyld4::RuntimeState const&, unsigned int, dyld4::Loader::DependentKind*) const (.cold.1)
[ 1605]   1605     Code            0x000000000004b5c0 0x0000000102c735c0 0x000000000000002c 0x000e0000 dyld4::Loader::loadDependents(Diagnostics&, dyld4::RuntimeState&, dyld4::Loader::LoadOptions const&) (.cold.1)
[ 1606]   1606     Code            0x000000000004b5ec 0x0000000102c735ec 0x000000000000002c 0x000e0000 dyld4::Loader::getExportsTrie(unsigned long long&, unsigned int&) const (.cold.1)
[ 1607]   1607     Code            0x000000000004b618 0x0000000102c73618 0x000000000000002c 0x000e0000 dyld4::Loader::hiddenFromFlat(bool) const (.cold.1)
[ 1608]   1608     Code            0x000000000004b644 0x0000000102c73644 0x000000000000002c 0x000e0000 dyld4::Loader::representsCachedDylibIndex(unsigned short) const (.cold.1)
[ 1609]   1609     Code            0x000000000004b670 0x0000000102c73670 0x000000000000002c 0x000e0000 dyld4::Loader::applyFixups(Diagnostics&, dyld4::RuntimeState&, dyld4::DyldCacheDataConstLazyScopedWriter&, bool) const (.cold.1)
[ 1610]   1610     Code            0x000000000004b69c 0x0000000102c7369c 0x000000000000002c 0x000e0000 dyld4::Loader::overridesDylibInCache(dyld4::Loader::DylibPatch const*&, unsigned short&) const (.cold.1)
[ 1611]   1611     Code            0x000000000004b6c8 0x0000000102c736c8 0x000000000000002c 0x000e0000 dyld4::Loader::unmap(dyld4::RuntimeState&, bool) const (.cold.1)
[ 1612]   1612     Code            0x000000000004b6f4 0x0000000102c736f4 0x000000000000002c 0x000e0000 dyld4::Loader::hasBeenFixedUp(dyld4::RuntimeState&) const (.cold.1)
[ 1613]   1613     Code            0x000000000004b720 0x0000000102c73720 0x000000000000002c 0x000e0000 dyld4::Loader::beginInitializers(dyld4::RuntimeState&) (.cold.1)
[ 1614]   1614     Code            0x000000000004b74c 0x0000000102c7374c 0x000000000000002c 0x000e0000 dyld4::Loader::runInitializers(dyld4::RuntimeState&) const (.cold.1)
[ 1615]   1615     Code            0x000000000004b778 0x0000000102c73778 0x0000000000000028 0x000e0000 dyld4::Loader::LoaderRef::loader(dyld4::RuntimeState const&) const (.cold.1)
[ 1616]   1616     Code            0x000000000004b7a0 0x0000000102c737a0 0x0000000000000028 0x000e0000 dyld4::Loader::LoaderRef::loader(dyld4::RuntimeState const&) const (.cold.2)
[ 1617]   1617     Code            0x000000000004b7c8 0x0000000102c737c8 0x0000000000000028 0x000e0000 invocation function for block in dyld4::Loader::applyFixupsGeneric(Diagnostics&, dyld4::RuntimeState&, dyld3::Array<void const*> const&, dyld3::Array<void const*> const&, bool, dyld3::Array<dyld4::Loader::MissingFlatLazySymbol> const&) const
[ 1618]   1618     Code            0x000000000004b7f0 0x0000000102c737f0 0x0000000000000028 0x000e0000 invocation function for block in dyld4::Loader::applyFixupsGeneric(Diagnostics&, dyld4::RuntimeState&, dyld3::Array<void const*> const&, dyld3::Array<void const*> const&, bool, dyld3::Array<dyld4::Loader::MissingFlatLazySymbol> const&) const
[ 1619]   1619     Code            0x000000000004b818 0x0000000102c73818 0x0000000000000028 0x000e0000 invocation function for block in dyld4::Loader::applyFixupsGeneric(Diagnostics&, dyld4::RuntimeState&, dyld3::Array<void const*> const&, dyld3::Array<void const*> const&, bool, dyld3::Array<dyld4::Loader::MissingFlatLazySymbol> const&) const
[ 1620]   1620     Code            0x000000000004b840 0x0000000102c73840 0x000000000000002c 0x000e0000 dyld3::Array<dyld4::Loader const*>::push_back(dyld4::Loader const* const&) (.cold.1)
[ 1621]   1621     Code            0x000000000004b86c 0x0000000102c7386c 0x0000000000000028 0x000e0000 dyld3::Map<char const*, dyld4::WeakDefMapValue, dyld3::HashCString, dyld3::EqualCString>::find(char const* const&) (.cold.1)
[ 1622]   1622     Code            0x000000000004b894 0x0000000102c73894 0x000000000000002c 0x000e0000 invocation function for block in dyld4::Loader::resolveSymbol(Diagnostics&, dyld4::RuntimeState&, int, char const*, bool, bool, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&) block_pointer, bool) const
[ 1623]   1623     Code            0x000000000004b8c0 0x0000000102c738c0 0x000000000000002c 0x000e0000 dyld4::Loader::applyCachePatchesToOverride(dyld4::RuntimeState&, dyld4::Loader const*, unsigned short, dyld4::Loader::DylibPatch const*, dyld4::DyldCacheDataConstLazyScopedWriter&) const (.cold.1)
[ 1624]   1624     Code            0x000000000004b8ec 0x0000000102c738ec 0x000000000000002c 0x000e0000 dyld4::Loader::applyCachePatchesToOverride(dyld4::RuntimeState&, dyld4::Loader const*, unsigned short, dyld4::Loader::DylibPatch const*, dyld4::DyldCacheDataConstLazyScopedWriter&) const (.cold.2)
[ 1625]   1625     Code            0x000000000004b918 0x0000000102c73918 0x0000000000000028 0x000e0000 dyld4::Loader::indexOfUnzipperedTwin(dyld4::RuntimeState const&, unsigned short) (.cold.1)
[ 1626]   1626     Code            0x000000000004b940 0x0000000102c73940 0x000000000000002c 0x000e0000 dyld3::Map<char const*, dyld4::WeakDefMapValue, dyld3::HashCString, dyld3::EqualCString>::insert(std::__1::pair<char const*, dyld4::WeakDefMapValue>&&) (.cold.1)
[ 1627]   1627     Code            0x000000000004b96c 0x0000000102c7396c 0x0000000000000028 0x000e0000 dyld3::Map<char const*, dyld4::WeakDefMapValue, dyld3::HashCString, dyld3::EqualCString>::insert(std::__1::pair<char const*, dyld4::WeakDefMapValue>&&) (.cold.2)
[ 1628]   1628     Code            0x000000000004b994 0x0000000102c73994 0x0000000000000028 0x000e0000 dyld3::Map<char const*, dyld4::WeakDefMapValue, dyld3::HashCString, dyld3::EqualCString>::insert(std::__1::pair<char const*, dyld4::WeakDefMapValue>&&) (.cold.3)
[ 1629]   1629     Code            0x000000000004b9bc 0x0000000102c739bc 0x0000000000000028 0x000e0000 dyld3::Map<char const*, dyld4::WeakDefMapValue, dyld3::HashCString, dyld3::EqualCString>::insert(std::__1::pair<char const*, dyld4::WeakDefMapValue>&&) (.cold.4)
[ 1630]   1630     Code            0x000000000004b9e4 0x0000000102c739e4 0x0000000000000028 0x000e0000 dyld3::Map<char const*, dyld4::WeakDefMapValue, dyld3::HashCString, dyld3::EqualCString>::insert(std::__1::pair<char const*, dyld4::WeakDefMapValue>&&) (.cold.5)
[ 1631]   1631     Code            0x000000000004ba0c 0x0000000102c73a0c 0x0000000000000028 0x000e0000 dyld3::OverflowSafeArray<unsigned long, 4294967295ul>::reserve(unsigned long) (.cold.1)
[ 1632]   1632     Code            0x000000000004ba34 0x0000000102c73a34 0x0000000000000028 0x000e0000 dyld3::OverflowSafeArray<std::__1::pair<char const*, dyld4::WeakDefMapValue>, 4294967295ul>::push_back(std::__1::pair<char const*, dyld4::WeakDefMapValue> const&) (.cold.1)
[ 1633]   1633     Code            0x000000000004ba5c 0x0000000102c73a5c 0x000000000000002c 0x000e0000 dyld4::JustInTimeLoader::makePatchTable(dyld4::RuntimeState&, unsigned int) const (.cold.1)
[ 1634]   1634     Code            0x000000000004ba88 0x0000000102c73a88 0x000000000000002c 0x000e0000 dyld4::JustInTimeLoader::dependentKind(unsigned int) (.cold.1)
[ 1635]   1635     Code            0x000000000004bab4 0x0000000102c73ab4 0x000000000000002c 0x000e0000 dyld4::JustInTimeLoader::dependentKind(unsigned int) (.cold.2)
[ 1636]   1636     Code            0x000000000004bae0 0x0000000102c73ae0 0x000000000000002c 0x000e0000 dyld4::JustInTimeLoader::dependent(dyld4::RuntimeState const&, unsigned int, dyld4::Loader::DependentKind*) const (.cold.1)
[ 1637]   1637     Code            0x000000000004bb0c 0x0000000102c73b0c 0x000000000000002c 0x000e0000 dyld3::OverflowSafeArray<dyld4::Loader::MissingFlatLazySymbol, 4294967295ul>::push_back(dyld4::Loader::MissingFlatLazySymbol const&) (.cold.1)
[ 1638]   1638     Code            0x000000000004bb38 0x0000000102c73b38 0x000000000000002c 0x000e0000 dyld4::JustInTimeLoader::unmap(dyld4::RuntimeState&, bool) const (.cold.1)
[ 1639]   1639     Code            0x000000000004bb64 0x0000000102c73b64 0x000000000000002c 0x000e0000 invocation function for block in dyld4::JustInTimeLoader::forEachBindTarget(Diagnostics&, dyld4::RuntimeState&, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&, bool&) block_pointer, void (dyld4::Loader::ResolvedSymbol const&, bool&) block_pointer) const
[ 1640]   1640     Code            0x000000000004bb90 0x0000000102c73b90 0x000000000000002c 0x000e0000 invocation function for block in dyld4::JustInTimeLoader::forEachBindTarget(Diagnostics&, dyld4::RuntimeState&, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&, bool&) block_pointer, void (dyld4::Loader::ResolvedSymbol const&, bool&) block_pointer) const
[ 1641]   1641     Code            0x000000000004bbbc 0x0000000102c73bbc 0x000000000000002c 0x000e0000 dyld3::Array<dyld4::Loader::Region>::push_back(dyld4::Loader::Region const&) (.cold.1)
[ 1642]   1642     Code            0x000000000004bbe8 0x0000000102c73be8 0x000000000000002c 0x000e0000 dyld4::PrebuiltLoader::BindTargetRef::BindTargetRef(dyld4::Loader::ResolvedSymbol const&) (.cold.1)
[ 1643]   1643     Code            0x000000000004bc14 0x0000000102c73c14 0x000000000000002c 0x000e0000 dyld4::PrebuiltLoader::BindTargetRef::BindTargetRef(dyld4::Loader::ResolvedSymbol const&) (.cold.2)
[ 1644]   1644     Code            0x000000000004bc40 0x0000000102c73c40 0x000000000000002c 0x000e0000 dyld4::PrebuiltLoader::BindTargetRef::offset() const (.cold.1)
[ 1645]   1645     Code            0x000000000004bc6c 0x0000000102c73c6c 0x0000000000000028 0x000e0000 dyld4::PrebuiltLoader::BindTargetRef::makeAbsolute(unsigned long long) (.cold.1)
[ 1646]   1646     Code            0x000000000004bc94 0x0000000102c73c94 0x000000000000002c 0x000e0000 dyld4::PrebuiltLoader::BindTargetRef::BindTargetRef(dyld4::Loader::BindTarget const&) (.cold.1)
[ 1647]   1647     Code            0x000000000004bcc0 0x0000000102c73cc0 0x000000000000002c 0x000e0000 dyld4::PrebuiltLoader::setLoadAddress(dyld4::RuntimeState&, dyld3::MachOLoaded const*) const (.cold.1)
[ 1648]   1648     Code            0x000000000004bcec 0x0000000102c73cec 0x000000000000002c 0x000e0000 dyld4::PrebuiltLoader::dependent(dyld4::RuntimeState const&, unsigned int, dyld4::Loader::DependentKind*) const (.cold.1)
[ 1649]   1649     Code            0x000000000004bd18 0x0000000102c73d18 0x0000000000000028 0x000e0000 dyld4::PrebuiltLoader::applyFixups(Diagnostics&, dyld4::RuntimeState&, dyld4::DyldCacheDataConstLazyScopedWriter&, bool) const (.cold.1)
[ 1650]   1650     Code            0x000000000004bd40 0x0000000102c73d40 0x0000000000000028 0x000e0000 dyld4::PrebuiltLoader::applyFixups(Diagnostics&, dyld4::RuntimeState&, dyld4::DyldCacheDataConstLazyScopedWriter&, bool) const (.cold.2)
[ 1651]   1651     Code            0x000000000004bd68 0x0000000102c73d68 0x000000000000002c 0x000e0000 dyld4::PrebuiltLoader::recursiveMarkBeingValidated(dyld4::RuntimeState const&) const (.cold.1)
[ 1652]   1652     Code            0x000000000004bd94 0x0000000102c73d94 0x0000000000000028 0x000e0000 dyld4::PrebuiltLoader::isValid(dyld4::RuntimeState const&) const (.cold.1)
[ 1653]   1653     Code            0x000000000004bdbc 0x0000000102c73dbc 0x0000000000000028 0x000e0000 dyld4::PrebuiltLoader::isValid(dyld4::RuntimeState const&) const (.cold.2)
[ 1654]   1654     Code            0x000000000004bde4 0x0000000102c73de4 0x0000000000000028 0x000e0000 dyld3::OverflowSafeArray<dyld4::PrebuiltLoader const*, 4294967295ul>::push_back(dyld4::PrebuiltLoader const* const&) (.cold.1)
[ 1655]   1655     Code            0x000000000004be0c 0x0000000102c73e0c 0x000000000000002c 0x000e0000 dyld4::PrebuiltLoader::beginInitializers(dyld4::RuntimeState&) (.cold.1)
[ 1656]   1656     Code            0x000000000004be38 0x0000000102c73e38 0x0000000000000028 0x000e0000 invocation function for block in dyld4::PrebuiltLoader::applyObjCFixups(dyld4::RuntimeState&) const
[ 1657]   1657     Code            0x000000000004be60 0x0000000102c73e60 0x0000000000000028 0x000e0000 invocation function for block in dyld4::PrebuiltLoader::applyObjCFixups(dyld4::RuntimeState&) const
[ 1658]   1658     Code            0x000000000004be88 0x0000000102c73e88 0x0000000000000028 0x000e0000 dyld4::PrebuiltLoader::serialize(Diagnostics&, dyld4::RuntimeState&, DyldSharedCache const*, dyld4::JustInTimeLoader const&, dyld4::Loader::LoaderRef, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&) block_pointer, dyld4::PrebuiltObjC const&, dyld4::BumpAllocator&) (.cold.1)
[ 1659]   1659     Code            0x000000000004beb0 0x0000000102c73eb0 0x000000000000002c 0x000e0000 dyld4::PrebuiltLoader::serialize(Diagnostics&, dyld4::RuntimeState&, DyldSharedCache const*, dyld4::JustInTimeLoader const&, dyld4::Loader::LoaderRef, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&) block_pointer, dyld4::PrebuiltObjC const&, dyld4::BumpAllocator&) (.cold.2)
[ 1660]   1660     Code            0x000000000004bedc 0x0000000102c73edc 0x000000000000002c 0x000e0000 dyld4::PrebuiltLoader::serialize(Diagnostics&, dyld4::RuntimeState&, DyldSharedCache const*, dyld4::JustInTimeLoader const&, dyld4::Loader::LoaderRef, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&) block_pointer, dyld4::PrebuiltObjC const&, dyld4::BumpAllocator&) (.cold.3)
[ 1661]   1661     Code            0x000000000004bf08 0x0000000102c73f08 0x000000000000002c 0x000e0000 dyld4::PrebuiltLoader::serialize(Diagnostics&, dyld4::RuntimeState&, DyldSharedCache const*, dyld4::JustInTimeLoader const&, dyld4::Loader::LoaderRef, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&) block_pointer, dyld4::PrebuiltObjC const&, dyld4::BumpAllocator&) (.cold.4)
[ 1662]   1662     Code            0x000000000004bf34 0x0000000102c73f34 0x000000000000002c 0x000e0000 dyld4::BumpAllocator::zeroFill(unsigned long) (.cold.1)
[ 1663]   1663     Code            0x000000000004bf60 0x0000000102c73f60 0x000000000000002c 0x000e0000 dyld4::BumpAllocator::zeroFill(unsigned long) (.cold.2)
[ 1664]   1664     Code            0x000000000004bf8c 0x0000000102c73f8c 0x0000000000000028 0x000e0000 invocation function for block in dyld4::PrebuiltLoader::serialize(Diagnostics&, dyld4::RuntimeState&, DyldSharedCache const*, dyld4::JustInTimeLoader const&, dyld4::Loader::LoaderRef, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&) block_pointer, dyld4::PrebuiltObjC const&, dyld4::BumpAllocator&)
[ 1665]   1665     Code            0x000000000004bfb4 0x0000000102c73fb4 0x000000000000002c 0x000e0000 invocation function for block in dyld4::PrebuiltLoader::serialize(Diagnostics&, dyld4::RuntimeState&, DyldSharedCache const*, dyld4::JustInTimeLoader const&, dyld4::Loader::LoaderRef, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&) block_pointer, dyld4::PrebuiltObjC const&, dyld4::BumpAllocator&)
[ 1666]   1666     Code            0x000000000004bfe0 0x0000000102c73fe0 0x000000000000002c 0x000e0000 invocation function for block in dyld4::PrebuiltLoader::serialize(Diagnostics&, dyld4::RuntimeState&, DyldSharedCache const*, dyld4::JustInTimeLoader const&, dyld4::Loader::LoaderRef, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&) block_pointer, dyld4::PrebuiltObjC const&, dyld4::BumpAllocator&)
[ 1667]   1667     Code            0x000000000004c00c 0x0000000102c7400c 0x0000000000000028 0x000e0000 dyld3::OverflowSafeArray<dyld4::PrebuiltLoader::BindTargetRef, 4294967295ul>::push_back(dyld4::PrebuiltLoader::BindTargetRef const&) (.cold.1)
[ 1668]   1668     Code            0x000000000004c034 0x0000000102c74034 0x0000000000000028 0x000e0000 dyld4::PrebuiltLoaderSet::isValid(dyld4::RuntimeState&) const (.cold.1)
[ 1669]   1669     Code            0x000000000004c05c 0x0000000102c7405c 0x0000000000000028 0x000e0000 dyld4::PrebuiltLoaderSet::findLoader(char const*) const (.cold.1)
[ 1670]   1670     Code            0x000000000004c084 0x0000000102c74084 0x0000000000000028 0x000e0000 dyld4::PrebuiltLoaderSet::findIndex(char const*, unsigned short&) const (.cold.1)
[ 1671]   1671     Code            0x000000000004c0ac 0x0000000102c740ac 0x0000000000000028 0x000e0000 invocation function for block in dyld4::PrebuiltLoaderSet::logDuplicateObjCClasses(dyld4::RuntimeState&) const
[ 1672]   1672     Code            0x000000000004c0d4 0x0000000102c740d4 0x0000000000000028 0x000e0000 invocation function for block in dyld4::PrebuiltLoaderSet::logDuplicateObjCClasses(dyld4::RuntimeState&) const
[ 1673]   1673     Code            0x000000000004c0fc 0x0000000102c740fc 0x0000000000000028 0x000e0000 invocation function for block in dyld4::PrebuiltLoaderSet::logDuplicateObjCClasses(dyld4::RuntimeState&) const
[ 1674]   1674     Code            0x000000000004c124 0x0000000102c74124 0x0000000000000028 0x000e0000 invocation function for block in dyld4::PrebuiltLoaderSet::logDuplicateObjCClasses(dyld4::RuntimeState&) const
[ 1675]   1675     Code            0x000000000004c14c 0x0000000102c7414c 0x0000000000000028 0x000e0000 dyld3::Map<char const*, bool, dyld3::HashCString, dyld3::EqualCString>::find(char const* const&) (.cold.1)
[ 1676]   1676     Code            0x000000000004c174 0x0000000102c74174 0x0000000000000028 0x000e0000 dyld3::Map<char const*, bool, dyld3::HashCString, dyld3::EqualCString>::find(char const* const&) (.cold.2)
[ 1677]   1677     Code            0x000000000004c19c 0x0000000102c7419c 0x000000000000002c 0x000e0000 dyld4::PrebuiltLoaderSet::makeLaunchSet(Diagnostics&, dyld4::RuntimeState&, dyld4::MissingPaths const&) (.cold.1)
[ 1678]   1678     Code            0x000000000004c1c8 0x0000000102c741c8 0x0000000000000028 0x000e0000 dyld3::OverflowSafeArray<dyld4::PrebuiltLoaderSet::CachePatch, 4294967295ul>::push_back(dyld4::PrebuiltLoaderSet::CachePatch const&) (.cold.1)
[ 1679]   1679     Code            0x000000000004c1f0 0x0000000102c741f0 0x0000000000000028 0x000e0000 dyld3::Map<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString>::Map() (.cold.1)
[ 1680]   1680     Code            0x000000000004c218 0x0000000102c74218 0x0000000000000028 0x000e0000 dyld3::Map<char const*, bool, dyld3::HashCString, dyld3::EqualCString>::Map() (.cold.1)
[ 1681]   1681     Code            0x000000000004c240 0x0000000102c74240 0x000000000000002c 0x000e0000 dyld3::Map<char const*, bool, dyld3::HashCString, dyld3::EqualCString>::insert(std::__1::pair<char const*, bool>&&) (.cold.1)
[ 1682]   1682     Code            0x000000000004c26c 0x0000000102c7426c 0x0000000000000028 0x000e0000 dyld3::Map<char const*, bool, dyld3::HashCString, dyld3::EqualCString>::insert(std::__1::pair<char const*, bool>&&) (.cold.2)
[ 1683]   1683     Code            0x000000000004c294 0x0000000102c74294 0x0000000000000028 0x000e0000 dyld3::Map<char const*, bool, dyld3::HashCString, dyld3::EqualCString>::insert(std::__1::pair<char const*, bool>&&) (.cold.3)
[ 1684]   1684     Code            0x000000000004c2bc 0x0000000102c742bc 0x0000000000000028 0x000e0000 dyld3::Map<char const*, bool, dyld3::HashCString, dyld3::EqualCString>::insert(std::__1::pair<char const*, bool>&&) (.cold.4)
[ 1685]   1685     Code            0x000000000004c2e4 0x0000000102c742e4 0x0000000000000028 0x000e0000 dyld3::Map<char const*, bool, dyld3::HashCString, dyld3::EqualCString>::insert(std::__1::pair<char const*, bool>&&) (.cold.5)
[ 1686]   1686     Code            0x000000000004c30c 0x0000000102c7430c 0x0000000000000028 0x000e0000 dyld3::OverflowSafeArray<std::__1::pair<char const*, bool>, 4294967295ul>::push_back(std::__1::pair<char const*, bool> const&) (.cold.1)
[ 1687]   1687     Code            0x000000000004c334 0x0000000102c74334 0x000000000000002c 0x000e0000 dyld4::SyscallDelegate::getFileAttribute(char const*, char const*, dyld3::Array<unsigned char>&) const (.cold.1)
[ 1688]   1688     Code            0x000000000004c360 0x0000000102c74360 0x000000000000002c 0x000e0000 dyld4::Vector<dyld_image_info>::reserve(unsigned long) (.cold.1)
[ 1689]   1689     Code            0x000000000004c38c 0x0000000102c7438c 0x000000000000002c 0x000e0000 dyld4::Vector<dyld_image_info>::erase(dyld_image_info*) (.cold.1)
[ 1690]   1690     Code            0x000000000004c3b8 0x0000000102c743b8 0x000000000000002c 0x000e0000 dyld4::Vector<dyld_uuid_info>::erase(dyld_uuid_info*) (.cold.1)
[ 1691]   1691     Code            0x000000000004c3e4 0x0000000102c743e4 0x0000000000000058 0x000e0000 dyld4::Vector<dyld_uuid_info>::reserve(unsigned long) (.cold.1)
[ 1692]   1692     Code            0x000000000004c43c 0x0000000102c7443c 0x000000000000002c 0x000e0000 invocation function for block in dyld4::APIs::dlopen_from(char const*, int, void*)
[ 1693]   1693     Code            0x000000000004c468 0x0000000102c74468 0x000000000000002c 0x000e0000 invocation function for block in dyld4::APIs::dlopen_from(char const*, int, void*)
[ 1694]   1694     Code            0x000000000004c494 0x0000000102c74494 0x000000000000002c 0x000e0000 invocation function for block in dyld4::APIs::dlopen_from(char const*, int, void*)
[ 1695]   1695     Code            0x000000000004c4c0 0x0000000102c744c0 0x000000000000002c 0x000e0000 dyld3::OverflowSafeArray<dyld4::Loader const*, 4294967295ul>::push_back(dyld4::Loader const* const&) (.cold.1)
[ 1696]   1696     Code            0x000000000004c4ec 0x0000000102c744ec 0x000000000000002c 0x000e0000 objc::objc_headeropt_rw_t<unsigned long>::isLoaded(unsigned int) const (.cold.1)
[ 1697]   1697     Code            0x000000000004c518 0x0000000102c74518 0x000000000000002c 0x000e0000 dyld4::objc_headeropt_rw_t::isLoaded(unsigned int) const (.cold.1)
[ 1698]   1698     Code            0x000000000004c544 0x0000000102c74544 0x0000000000000028 0x000e0000 unsigned int SwiftHashTable::getPotentialTarget<SwiftTypeProtocolConformanceLocationKey, SwiftTypeProtocolConformanceLocationKey>(SwiftTypeProtocolConformanceLocationKey const&, unsigned char const*) const (.cold.1)
[ 1699]   1699     Code            0x000000000004c56c 0x0000000102c7456c 0x0000000000000028 0x000e0000 unsigned int SwiftHashTable::getIndex<SwiftTypeProtocolConformanceLocationKey, SwiftTypeProtocolConformanceLocationKey>(SwiftTypeProtocolConformanceLocationKey const&, unsigned char const*) const (.cold.1)
[ 1700]   1700     Code            0x000000000004c594 0x0000000102c74594 0x0000000000000028 0x000e0000 unsigned int SwiftHashTable::getIndex<SwiftTypeProtocolConformanceLocationKey, SwiftTypeProtocolConformanceLocationKey>(SwiftTypeProtocolConformanceLocationKey const&, unsigned char const*) const (.cold.2)
[ 1701]   1701     Code            0x000000000004c5bc 0x0000000102c745bc 0x0000000000000028 0x000e0000 unsigned int SwiftHashTable::getPotentialTarget<SwiftMetadataProtocolConformanceLocationKey, SwiftMetadataProtocolConformanceLocationKey>(SwiftMetadataProtocolConformanceLocationKey const&, unsigned char const*) const (.cold.1)
[ 1702]   1702     Code            0x000000000004c5e4 0x0000000102c745e4 0x0000000000000028 0x000e0000 unsigned int SwiftHashTable::getIndex<SwiftMetadataProtocolConformanceLocationKey, SwiftMetadataProtocolConformanceLocationKey>(SwiftMetadataProtocolConformanceLocationKey const&, unsigned char const*) const (.cold.1)
[ 1703]   1703     Code            0x000000000004c60c 0x0000000102c7460c 0x0000000000000028 0x000e0000 unsigned int SwiftHashTable::getIndex<SwiftMetadataProtocolConformanceLocationKey, SwiftMetadataProtocolConformanceLocationKey>(SwiftMetadataProtocolConformanceLocationKey const&, unsigned char const*) const (.cold.2)
[ 1704]   1704     Code            0x000000000004c634 0x0000000102c74634 0x0000000000000028 0x000e0000 unsigned int SwiftHashTable::getPotentialTarget<SwiftForeignTypeProtocolConformanceLookupKey, SwiftForeignTypeProtocolConformanceLocationKey>(SwiftForeignTypeProtocolConformanceLookupKey const&, unsigned char const*) const (.cold.1)
[ 1705]   1705     Code            0x000000000004c65c 0x0000000102c7465c 0x0000000000000028 0x000e0000 unsigned int SwiftHashTable::getIndex<SwiftForeignTypeProtocolConformanceLookupKey, SwiftForeignTypeProtocolConformanceLocationKey>(SwiftForeignTypeProtocolConformanceLookupKey const&, unsigned char const*) const (.cold.1)
[ 1706]   1706     Code            0x000000000004c684 0x0000000102c74684 0x0000000000000028 0x000e0000 unsigned int SwiftHashTable::getIndex<SwiftForeignTypeProtocolConformanceLookupKey, SwiftForeignTypeProtocolConformanceLocationKey>(SwiftForeignTypeProtocolConformanceLookupKey const&, unsigned char const*) const (.cold.2)
[ 1707]   1707     Code            0x000000000004c6ac 0x0000000102c746ac 0x0000000000000028 0x000e0000 dyld4::ObjCStringTable::getPotentialTarget(char const*) const (.cold.1)
[ 1708]   1708     Code            0x000000000004c6d4 0x0000000102c746d4 0x000000000000002c 0x000e0000 dyld4::ObjCStringTable::write(objc::PerfectHash const&, dyld3::Array<std::__1::pair<char const*, dyld4::Loader::BindTarget> > const&) (.cold.1)
[ 1709]   1709     Code            0x000000000004c700 0x0000000102c74700 0x0000000000000028 0x000e0000 dyld4::ObjCStringTable::write(objc::PerfectHash const&, dyld3::Array<std::__1::pair<char const*, dyld4::Loader::BindTarget> > const&) (.cold.2)
[ 1710]   1710     Code            0x000000000004c728 0x0000000102c74728 0x0000000000000028 0x000e0000 dyld4::ObjCStringTable::write(objc::PerfectHash const&, dyld3::Array<std::__1::pair<char const*, dyld4::Loader::BindTarget> > const&) (.cold.3)
[ 1711]   1711     Code            0x000000000004c750 0x0000000102c74750 0x0000000000000028 0x000e0000 dyld4::ObjCStringTable::write(objc::PerfectHash const&, dyld3::Array<std::__1::pair<char const*, dyld4::Loader::BindTarget> > const&) (.cold.4)
[ 1712]   1712     Code            0x000000000004c778 0x0000000102c74778 0x0000000000000028 0x000e0000 dyld4::ObjCStringTable::write(objc::PerfectHash const&, dyld3::Array<std::__1::pair<char const*, dyld4::Loader::BindTarget> > const&) (.cold.5)
[ 1713]   1713     Code            0x000000000004c7a0 0x0000000102c747a0 0x0000000000000028 0x000e0000 dyld4::ObjCClassOpt::forEachClass(char const*, dyld4::RuntimeState&, void (void*, bool, bool*) block_pointer) const (.cold.1)
[ 1714]   1714     Code            0x000000000004c7c8 0x0000000102c747c8 0x000000000000002c 0x000e0000 dyld4::ObjCClassOpt::forEachClass(char const*, dyld4::RuntimeState&, void (void*, bool, bool*) block_pointer) const (.cold.2)
[ 1715]   1715     Code            0x000000000004c7f4 0x0000000102c747f4 0x0000000000000028 0x000e0000 dyld4::ObjCClassOpt::forEachClass(char const*, dyld4::RuntimeState&, void (void*, bool, bool*) block_pointer) const (.cold.3)
[ 1716]   1716     Code            0x000000000004c81c 0x0000000102c7481c 0x0000000000000028 0x000e0000 dyld4::ObjCClassOpt::forEachClass(char const*, dyld4::RuntimeState&, void (void*, bool, bool*) block_pointer) const (.cold.4)
[ 1717]   1717     Code            0x000000000004c844 0x0000000102c74844 0x0000000000000028 0x000e0000 dyld4::ObjCClassOpt::forEachClass(char const*, dyld4::RuntimeState&, void (void*, bool, bool*) block_pointer) const (.cold.5)
[ 1718]   1718     Code            0x000000000004c86c 0x0000000102c7486c 0x0000000000000028 0x000e0000 dyld4::ObjCStringTable::getIndex(char const*) const (.cold.1)
[ 1719]   1719     Code            0x000000000004c894 0x0000000102c74894 0x0000000000000028 0x000e0000 dyld4::ObjCClassOpt::forEachClass(dyld4::RuntimeState&, void (dyld4::PrebuiltLoader::BindTargetRef const&, dyld3::Array<dyld4::PrebuiltLoader::BindTargetRef> const&) block_pointer) const (.cold.1)
[ 1720]   1720     Code            0x000000000004c8bc 0x0000000102c748bc 0x000000000000002c 0x000e0000 dyld4::ObjCClassOpt::forEachClass(dyld4::RuntimeState&, void (dyld4::PrebuiltLoader::BindTargetRef const&, dyld3::Array<dyld4::PrebuiltLoader::BindTargetRef> const&) block_pointer) const (.cold.2)
[ 1721]   1721     Code            0x000000000004c8e8 0x0000000102c748e8 0x000000000000002c 0x000e0000 dyld4::ObjCClassOpt::forEachClass(dyld4::RuntimeState&, void (dyld4::PrebuiltLoader::BindTargetRef const&, dyld3::Array<dyld4::PrebuiltLoader::BindTargetRef> const&) block_pointer) const (.cold.3)
[ 1722]   1722     Code            0x000000000004c914 0x0000000102c74914 0x0000000000000028 0x000e0000 dyld4::ObjCClassOpt::forEachClass(dyld4::RuntimeState&, void (dyld4::PrebuiltLoader::BindTargetRef const&, dyld3::Array<dyld4::PrebuiltLoader::BindTargetRef> const&) block_pointer) const (.cold.4)
[ 1723]   1723     Code            0x000000000004c93c 0x0000000102c7493c 0x0000000000000028 0x000e0000 dyld4::ObjCClassOpt::forEachClass(dyld4::RuntimeState&, void (dyld4::PrebuiltLoader::BindTargetRef const&, dyld3::Array<dyld4::PrebuiltLoader::BindTargetRef> const&) block_pointer) const (.cold.5)
[ 1724]   1724     Code            0x000000000004c964 0x0000000102c74964 0x000000000000002c 0x000e0000 dyld4::ObjCClassOpt::write(objc::PerfectHash const&, dyld3::Array<std::__1::pair<char const*, dyld4::Loader::BindTarget> > const&, dyld3::MultiMap<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString> const&, unsigned int, unsigned int) (.cold.1)
[ 1725]   1725     Code            0x000000000004c990 0x0000000102c74990 0x0000000000000028 0x000e0000 dyld4::ObjCClassOpt::write(objc::PerfectHash const&, dyld3::Array<std::__1::pair<char const*, dyld4::Loader::BindTarget> > const&, dyld3::MultiMap<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString> const&, unsigned int, unsigned int) (.cold.2)
[ 1726]   1726     Code            0x000000000004c9b8 0x0000000102c749b8 0x0000000000000028 0x000e0000 dyld3::MultiMap<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString>::forEachEntry(void (char const* const&, dyld4::Loader::BindTarget const**, unsigned long long) block_pointer) const (.cold.1)
[ 1727]   1727     Code            0x000000000004c9e0 0x0000000102c749e0 0x0000000000000028 0x000e0000 dyld3::MultiMap<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString>::forEachEntry(void (char const* const&, dyld4::Loader::BindTarget const**, unsigned long long) block_pointer) const (.cold.2)
[ 1728]   1728     Code            0x000000000004ca08 0x0000000102c74a08 0x000000000000002c 0x000e0000 invocation function for block in dyld4::ObjCClassOpt::write(objc::PerfectHash const&, dyld3::Array<std::__1::pair<char const*, dyld4::Loader::BindTarget> > const&, dyld3::MultiMap<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString> const&, unsigned int, unsigned int)
[ 1729]   1729     Code            0x000000000004ca34 0x0000000102c74a34 0x0000000000000028 0x000e0000 invocation function for block in dyld4::ObjCClassOpt::write(objc::PerfectHash const&, dyld3::Array<std::__1::pair<char const*, dyld4::Loader::BindTarget> > const&, dyld3::MultiMap<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString> const&, unsigned int, unsigned int)
[ 1730]   1730     Code            0x000000000004ca5c 0x0000000102c74a5c 0x0000000000000028 0x000e0000 invocation function for block in dyld4::ObjCClassOpt::write(objc::PerfectHash const&, dyld3::Array<std::__1::pair<char const*, dyld4::Loader::BindTarget> > const&, dyld3::MultiMap<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString> const&, unsigned int, unsigned int)
[ 1731]   1731     Code            0x000000000004ca84 0x0000000102c74a84 0x000000000000002c 0x000e0000 invocation function for block in dyld4::ObjCClassOpt::write(objc::PerfectHash const&, dyld3::Array<std::__1::pair<char const*, dyld4::Loader::BindTarget> > const&, dyld3::MultiMap<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString> const&, unsigned int, unsigned int)
[ 1732]   1732     Code            0x000000000004cab0 0x0000000102c74ab0 0x0000000000000028 0x000e0000 invocation function for block in dyld4::ObjCClassOpt::write(objc::PerfectHash const&, dyld3::Array<std::__1::pair<char const*, dyld4::Loader::BindTarget> > const&, dyld3::MultiMap<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString> const&, unsigned int, unsigned int)
[ 1733]   1733     Code            0x000000000004cad8 0x0000000102c74ad8 0x000000000000002c 0x000e0000 dyld3::Array<dyld4::PrebuiltLoader::BindTargetRef>::push_back(dyld4::PrebuiltLoader::BindTargetRef const&) (.cold.1)
[ 1734]   1734     Code            0x000000000004cb04 0x0000000102c74b04 0x0000000000000028 0x000e0000 dyld3::Map<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString>::find(char const* const&) const (.cold.1)
[ 1735]   1735     Code            0x000000000004cb2c 0x0000000102c74b2c 0x0000000000000028 0x000e0000 dyld3::Map<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString>::find(char const* const&) const (.cold.2)
[ 1736]   1736     Code            0x000000000004cb54 0x0000000102c74b54 0x0000000000000028 0x000e0000 dyld3::Map<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString>::insert(std::__1::pair<char const*, dyld4::Loader::BindTarget>&&) (.cold.1)
[ 1737]   1737     Code            0x000000000004cb7c 0x0000000102c74b7c 0x0000000000000028 0x000e0000 dyld3::Map<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString>::insert(std::__1::pair<char const*, dyld4::Loader::BindTarget>&&) (.cold.2)
[ 1738]   1738     Code            0x000000000004cba4 0x0000000102c74ba4 0x0000000000000028 0x000e0000 dyld3::Map<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString>::insert(std::__1::pair<char const*, dyld4::Loader::BindTarget>&&) (.cold.3)
[ 1739]   1739     Code            0x000000000004cbcc 0x0000000102c74bcc 0x0000000000000028 0x000e0000 dyld3::Map<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString>::insert(std::__1::pair<char const*, dyld4::Loader::BindTarget>&&) (.cold.4)
[ 1740]   1740     Code            0x000000000004cbf4 0x0000000102c74bf4 0x0000000000000028 0x000e0000 dyld3::Map<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString>::insert(std::__1::pair<char const*, dyld4::Loader::BindTarget>&&) (.cold.5)
[ 1741]   1741     Code            0x000000000004cc1c 0x0000000102c74c1c 0x0000000000000028 0x000e0000 dyld3::OverflowSafeArray<dyld4::PrebuiltObjC::ObjCOptimizerImage::ObjCObject, 4294967295ul>::push_back(dyld4::PrebuiltObjC::ObjCOptimizerImage::ObjCObject const&) (.cold.1)
[ 1742]   1742     Code            0x000000000004cc44 0x0000000102c74c44 0x0000000000000028 0x000e0000 dyld3::OverflowSafeArray<bool, 4294967295ul>::push_back(bool const&) (.cold.1)
[ 1743]   1743     Code            0x000000000004cc6c 0x0000000102c74c6c 0x000000000000002c 0x000e0000 dyld4::writeClassOrProtocolHashTable(dyld4::RuntimeState&, bool, dyld3::Array<dyld4::PrebuiltObjC::ObjCOptimizerImage>&, dyld3::OverflowSafeArray<unsigned char, 4294967295ul>&, dyld3::Map<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString> const&) (.cold.1)
[ 1744]   1744     Code            0x000000000004cc98 0x0000000102c74c98 0x0000000000000028 0x000e0000 dyld4::writeClassOrProtocolHashTable(dyld4::RuntimeState&, bool, dyld3::Array<dyld4::PrebuiltObjC::ObjCOptimizerImage>&, dyld3::OverflowSafeArray<unsigned char, 4294967295ul>&, dyld3::Map<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString> const&) (.cold.2)
[ 1745]   1745     Code            0x000000000004ccc0 0x0000000102c74cc0 0x0000000000000028 0x000e0000 dyld4::writeClassOrProtocolHashTable(dyld4::RuntimeState&, bool, dyld3::Array<dyld4::PrebuiltObjC::ObjCOptimizerImage>&, dyld3::OverflowSafeArray<unsigned char, 4294967295ul>&, dyld3::Map<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString> const&) (.cold.3)
[ 1746]   1746     Code            0x000000000004cce8 0x0000000102c74ce8 0x0000000000000028 0x000e0000 dyld4::writeClassOrProtocolHashTable(dyld4::RuntimeState&, bool, dyld3::Array<dyld4::PrebuiltObjC::ObjCOptimizerImage>&, dyld3::OverflowSafeArray<unsigned char, 4294967295ul>&, dyld3::Map<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString> const&) (.cold.4)
[ 1747]   1747     Code            0x000000000004cd10 0x0000000102c74d10 0x0000000000000028 0x000e0000 dyld4::PrebuiltObjC::generatePerImageFixups(dyld4::RuntimeState&, unsigned int) (.cold.1)
[ 1748]   1748     Code            0x000000000004cd38 0x0000000102c74d38 0x0000000000000028 0x000e0000 dyld4::PrebuiltObjC::generatePerImageFixups(dyld4::RuntimeState&, unsigned int) (.cold.2)
[ 1749]   1749     Code            0x000000000004cd60 0x0000000102c74d60 0x0000000000000028 0x000e0000 dyld4::PrebuiltObjC::generatePerImageFixups(dyld4::RuntimeState&, unsigned int) (.cold.3)
[ 1750]   1750     Code            0x000000000004cd88 0x0000000102c74d88 0x000000000000002c 0x000e0000 dyld4::PrebuiltObjC::generatePerImageFixups(dyld4::RuntimeState&, unsigned int) (.cold.4)
[ 1751]   1751     Code            0x000000000004cdb4 0x0000000102c74db4 0x0000000000000028 0x000e0000 dyld3::OverflowSafeArray<dyld4::PrebuiltObjC::ObjCImageFixups, 4294967295ul>::default_constuct_back() (.cold.1)
[ 1752]   1752     Code            0x000000000004cddc 0x0000000102c74ddc 0x0000000000000028 0x000e0000 dyld3::OverflowSafeArray<unsigned char, 4294967295ul>::reserve(unsigned long) (.cold.1)
[ 1753]   1753     Code            0x000000000004ce04 0x0000000102c74e04 0x0000000000000028 0x000e0000 dyld3::OverflowSafeArray<unsigned char, 4294967295ul>::push_back(unsigned char const&) (.cold.1)
[ 1754]   1754     Code            0x000000000004ce2c 0x0000000102c74e2c 0x0000000000000028 0x000e0000 dyld4::PrebuiltObjC::make(Diagnostics&, dyld4::RuntimeState&) (.cold.1)
[ 1755]   1755     Code            0x000000000004ce54 0x0000000102c74e54 0x0000000000000028 0x000e0000 dyld4::PrebuiltObjC::make(Diagnostics&, dyld4::RuntimeState&) (.cold.2)
[ 1756]   1756     Code            0x000000000004ce7c 0x0000000102c74e7c 0x000000000000002c 0x000e0000 dyld4::PrebuiltObjC::make(Diagnostics&, dyld4::RuntimeState&) (.cold.3)
[ 1757]   1757     Code            0x000000000004cea8 0x0000000102c74ea8 0x000000000000002c 0x000e0000 dyld4::PrebuiltObjC::make(Diagnostics&, dyld4::RuntimeState&) (.cold.4)
[ 1758]   1758     Code            0x000000000004ced4 0x0000000102c74ed4 0x000000000000002c 0x000e0000 dyld4::PrebuiltObjC::make(Diagnostics&, dyld4::RuntimeState&) (.cold.5)
[ 1759]   1759     Code            0x000000000004cf00 0x0000000102c74f00 0x000000000000002c 0x000e0000 dyld4::PrebuiltObjC::make(Diagnostics&, dyld4::RuntimeState&) (.cold.6)
[ 1760]   1760     Code            0x000000000004cf2c 0x0000000102c74f2c 0x000000000000002c 0x000e0000 dyld4::PrebuiltObjC::make(Diagnostics&, dyld4::RuntimeState&) (.cold.7)
[ 1761]   1761     Code            0x000000000004cf58 0x0000000102c74f58 0x0000000000000028 0x000e0000 dyld3::Map<unsigned short, std::__1::pair<dyld3::MachOAnalyzer const*, dyld4::Loader const*>, dyld4::HashUInt16, dyld4::EqualUInt16>::insert(std::__1::pair<unsigned short, std::__1::pair<dyld3::MachOAnalyzer const*, dyld4::Loader const*> >&&) (.cold.1)
[ 1762]   1762     Code            0x000000000004cf80 0x0000000102c74f80 0x0000000000000028 0x000e0000 dyld3::Map<unsigned short, std::__1::pair<dyld3::MachOAnalyzer const*, dyld4::Loader const*>, dyld4::HashUInt16, dyld4::EqualUInt16>::insert(std::__1::pair<unsigned short, std::__1::pair<dyld3::MachOAnalyzer const*, dyld4::Loader const*> >&&) (.cold.2)
[ 1763]   1763     Code            0x000000000004cfa8 0x0000000102c74fa8 0x0000000000000028 0x000e0000 dyld3::Map<unsigned short, std::__1::pair<dyld3::MachOAnalyzer const*, dyld4::Loader const*>, dyld4::HashUInt16, dyld4::EqualUInt16>::insert(std::__1::pair<unsigned short, std::__1::pair<dyld3::MachOAnalyzer const*, dyld4::Loader const*> >&&) (.cold.3)
[ 1764]   1764     Code            0x000000000004cfd0 0x0000000102c74fd0 0x0000000000000028 0x000e0000 dyld3::Map<unsigned short, std::__1::pair<dyld3::MachOAnalyzer const*, dyld4::Loader const*>, dyld4::HashUInt16, dyld4::EqualUInt16>::insert(std::__1::pair<unsigned short, std::__1::pair<dyld3::MachOAnalyzer const*, dyld4::Loader const*> >&&) (.cold.4)
[ 1765]   1765     Code            0x000000000004cff8 0x0000000102c74ff8 0x0000000000000028 0x000e0000 dyld3::Map<unsigned short, std::__1::pair<dyld3::MachOAnalyzer const*, dyld4::Loader const*>, dyld4::HashUInt16, dyld4::EqualUInt16>::insert(std::__1::pair<unsigned short, std::__1::pair<dyld3::MachOAnalyzer const*, dyld4::Loader const*> >&&) (.cold.5)
[ 1766]   1766     Code            0x000000000004d020 0x0000000102c75020 0x0000000000000028 0x000e0000 void dyld3::OverflowSafeArray<dyld4::PrebuiltObjC::ObjCOptimizerImage, 4294967295ul>::emplace_back<dyld4::JustInTimeLoader const*, unsigned long long, unsigned int&>(dyld4::JustInTimeLoader const*&&, unsigned long long&&, unsigned int&) (.cold.1)
[ 1767]   1767     Code            0x000000000004d048 0x0000000102c75048 0x000000000000002c 0x000e0000 dyld4::PrebuiltObjC::serializeFixups(dyld4::Loader const&, dyld4::BumpAllocator&) const (.cold.1)
[ 1768]   1768     Code            0x000000000004d074 0x0000000102c75074 0x000000000000002c 0x000e0000 dyld4::PrebuiltObjC::serializeFixups(dyld4::Loader const&, dyld4::BumpAllocator&) const (.cold.2)
[ 1769]   1769     Code            0x000000000004d0a0 0x0000000102c750a0 0x0000000000000028 0x000e0000 dyld4::PrebuiltObjC::serializeFixups(dyld4::Loader const&, dyld4::BumpAllocator&) const (.cold.3)
[ 1770]   1770     Code            0x000000000004d0c8 0x0000000102c750c8 0x000000000000002c 0x000e0000 legacy_objc_opt::getPreoptimizedHeaderRW(legacy_objc_opt::header_info const*, void*, void*) (.cold.1)
[ 1771]   1771     Code            0x000000000004d0f4 0x0000000102c750f4 0x000000000000002c 0x000e0000 legacy_objc_opt::objc_headeropt_ro_t::index(legacy_objc_opt::header_info const*) const (.cold.1)
[ 1772]   1772     Code            0x000000000004d120 0x0000000102c75120 0x000000000000002c 0x000e0000 legacy_objc_opt::objc_headeropt_ro_t::index(legacy_objc_opt::header_info const*) const (.cold.2)
[ 1773]   1773     Code            0x000000000004d14c 0x0000000102c7514c 0x0000000000000028 0x000e0000 dyld3::Map<unsigned short, std::__1::pair<dyld3::MachOAnalyzer const*, dyld4::Loader const*>, dyld4::HashUInt16, dyld4::EqualUInt16>::find(unsigned short const&) const (.cold.1)
[ 1774]   1774     Code            0x000000000004d174 0x0000000102c75174 0x0000000000000028 0x000e0000 dyld3::Map<unsigned short, std::__1::pair<dyld3::MachOAnalyzer const*, dyld4::Loader const*>, dyld4::HashUInt16, dyld4::EqualUInt16>::find(unsigned short const&) const (.cold.2)
[ 1775]   1775     Code            0x000000000004d19c 0x0000000102c7519c 0x0000000000000028 0x000e0000 dyld3::Map<unsigned long long, unsigned int, dyld4::HashUInt64, dyld4::EqualUInt64>::find(unsigned long long const&) (.cold.1)
[ 1776]   1776     Code            0x000000000004d1c4 0x0000000102c751c4 0x0000000000000028 0x000e0000 dyld3::Map<unsigned long long, unsigned int, dyld4::HashUInt64, dyld4::EqualUInt64>::find(unsigned long long const&) (.cold.2)
[ 1777]   1777     Code            0x000000000004d1ec 0x0000000102c751ec 0x000000000000002c 0x000e0000 dyld3::MultiMap<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString>::insert(std::__1::pair<char const*, dyld4::Loader::BindTarget>&&) (.cold.1)
[ 1778]   1778     Code            0x000000000004d218 0x0000000102c75218 0x0000000000000028 0x000e0000 dyld3::MultiMap<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString>::insert(std::__1::pair<char const*, dyld4::Loader::BindTarget>&&) (.cold.2)
[ 1779]   1779     Code            0x000000000004d240 0x0000000102c75240 0x0000000000000028 0x000e0000 dyld3::MultiMap<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString>::insert(std::__1::pair<char const*, dyld4::Loader::BindTarget>&&) (.cold.3)
[ 1780]   1780     Code            0x000000000004d268 0x0000000102c75268 0x0000000000000028 0x000e0000 dyld3::MultiMap<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString>::insert(std::__1::pair<char const*, dyld4::Loader::BindTarget>&&) (.cold.4)
[ 1781]   1781     Code            0x000000000004d290 0x0000000102c75290 0x0000000000000028 0x000e0000 dyld3::MultiMap<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString>::insert(std::__1::pair<char const*, dyld4::Loader::BindTarget>&&) (.cold.5)
[ 1782]   1782     Code            0x000000000004d2b8 0x0000000102c752b8 0x0000000000000028 0x000e0000 dyld3::MultiMap<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString>::insert(std::__1::pair<char const*, dyld4::Loader::BindTarget>&&) (.cold.6)
[ 1783]   1783     Code            0x000000000004d2e0 0x0000000102c752e0 0x0000000000000028 0x000e0000 dyld3::MultiMap<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString>::MultiMap() (.cold.1)
[ 1784]   1784     Code            0x000000000004d308 0x0000000102c75308 0x0000000000000028 0x000e0000 dyld3::OverflowSafeArray<std::__1::tuple<char const*, dyld4::Loader::BindTarget, dyld3::MultiMap<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString>::NextNode>, 4294967295ul>::push_back(std::__1::tuple<char const*, dyld4::Loader::BindTarget, dyld3::MultiMap<char const*, dyld4::Loader::BindTarget, dyld3::HashCString, dyld3::EqualCString>::NextNode> const&) (.cold.1)
[ 1785]   1785     Code            0x000000000004d330 0x0000000102c75330 0x0000000000000028 0x000e0000 objc::objc_headeropt_ro_t<unsigned long long>::get(mach_header const*) (.cold.1)
[ 1786]   1786     Code            0x000000000004d358 0x0000000102c75358 0x0000000000000028 0x000e0000 objc::objc_headeropt_ro_t<unsigned long long>::index(objc::objc_header_info_ro_t<unsigned long long> const*) const (.cold.1)
[ 1787]   1787     Code            0x000000000004d380 0x0000000102c75380 0x000000000000002c 0x000e0000 objc::objc_headeropt_ro_t<unsigned long long>::index(objc::objc_header_info_ro_t<unsigned long long> const*) const (.cold.2)
[ 1788]   1788     Code            0x000000000004d3ac 0x0000000102c753ac 0x0000000000000028 0x000e0000 objc::objc_headeropt_ro_t<unsigned int>::get(mach_header const*) (.cold.1)
[ 1789]   1789     Code            0x000000000004d3d4 0x0000000102c753d4 0x0000000000000028 0x000e0000 objc::objc_headeropt_ro_t<unsigned int>::index(objc::objc_header_info_ro_t<unsigned int> const*) const (.cold.1)
[ 1790]   1790     Code            0x000000000004d3fc 0x0000000102c753fc 0x000000000000002c 0x000e0000 objc::objc_headeropt_ro_t<unsigned int>::index(objc::objc_header_info_ro_t<unsigned int> const*) const (.cold.2)
[ 1791]   1791     Code            0x000000000004d428 0x0000000102c75428 0x0000000000000028 0x000e0000 dyld3::Map<unsigned long long, unsigned int, dyld4::HashUInt64, dyld4::EqualUInt64>::Map() (.cold.1)
[ 1792]   1792     Code            0x000000000004d450 0x0000000102c75450 0x0000000000000028 0x000e0000 dyld3::OverflowSafeArray<std::__1::pair<char const*, dyld4::Loader::BindTarget>, 4294967295ul>::push_back(std::__1::pair<char const*, dyld4::Loader::BindTarget> const&) (.cold.1)
[ 1793]   1793     Code            0x000000000004d478 0x0000000102c75478 0x0000000000000028 0x000e0000 dyld3::Map<unsigned long long, unsigned int, dyld4::HashUInt64, dyld4::EqualUInt64>::insert(std::__1::pair<unsigned long long, unsigned int>&&) (.cold.1)
[ 1794]   1794     Code            0x000000000004d4a0 0x0000000102c754a0 0x0000000000000028 0x000e0000 dyld3::Map<unsigned long long, unsigned int, dyld4::HashUInt64, dyld4::EqualUInt64>::insert(std::__1::pair<unsigned long long, unsigned int>&&) (.cold.2)
[ 1795]   1795     Code            0x000000000004d4c8 0x0000000102c754c8 0x0000000000000028 0x000e0000 dyld3::Map<unsigned long long, unsigned int, dyld4::HashUInt64, dyld4::EqualUInt64>::insert(std::__1::pair<unsigned long long, unsigned int>&&) (.cold.3)
[ 1796]   1796     Code            0x000000000004d4f0 0x0000000102c754f0 0x0000000000000028 0x000e0000 dyld3::Map<unsigned long long, unsigned int, dyld4::HashUInt64, dyld4::EqualUInt64>::insert(std::__1::pair<unsigned long long, unsigned int>&&) (.cold.4)
[ 1797]   1797     Code            0x000000000004d518 0x0000000102c75518 0x0000000000000028 0x000e0000 dyld3::Map<unsigned long long, unsigned int, dyld4::HashUInt64, dyld4::EqualUInt64>::insert(std::__1::pair<unsigned long long, unsigned int>&&) (.cold.5)
[ 1798]   1798     Code            0x000000000004d540 0x0000000102c75540 0x0000000000000028 0x000e0000 dyld3::OverflowSafeArray<std::__1::pair<unsigned long long, unsigned int>, 4294967295ul>::push_back(std::__1::pair<unsigned long long, unsigned int> const&) (.cold.1)
[ 1799]   1799     Code            0x000000000004d568 0x0000000102c75568 0x0000000000000028 0x000e0000 dyld3::Map<unsigned short, std::__1::pair<dyld3::MachOAnalyzer const*, dyld4::Loader const*>, dyld4::HashUInt16, dyld4::EqualUInt16>::Map() (.cold.1)
[ 1800]   1800     Code            0x000000000004d590 0x0000000102c75590 0x0000000000000028 0x000e0000 dyld3::OverflowSafeArray<std::__1::pair<unsigned short, std::__1::pair<dyld3::MachOAnalyzer const*, dyld4::Loader const*> >, 4294967295ul>::push_back(std::__1::pair<unsigned short, std::__1::pair<dyld3::MachOAnalyzer const*, dyld4::Loader const*> > const&) (.cold.1)
[ 1801]   1801     Code            0x000000000004d5b8 0x0000000102c755b8 0x000000000000002c 0x000e0000 dyld4::Allocator::~Allocator() (.cold.1)
[ 1802]   1802     Code            0x000000000004d5e4 0x0000000102c755e4 0x000000000000002c 0x000e0000 dyld4::Allocator::allocate_buffer(unsigned long, unsigned long, bool) (.cold.1)
[ 1803]   1803     Code            0x000000000004d610 0x0000000102c75610 0x000000000000002c 0x000e0000 dyld4::Allocator::allocate_buffer(unsigned long, unsigned long, bool) (.cold.2)
[ 1804]   1804     Code            0x000000000004d63c 0x0000000102c7563c 0x000000000000002c 0x000e0000 dyld4::Allocator::allocate_buffer(unsigned long, unsigned long, bool) (.cold.3)
[ 1805]   1805     Code            0x000000000004d668 0x0000000102c75668 0x000000000000002c 0x000e0000 dyld4::Allocator::removeRegion(dyld4::Allocator::Buffer const&) (.cold.1)
[ 1806]   1806     Code            0x000000000004d694 0x0000000102c75694 0x000000000000002c 0x000e0000 dyld4::Allocator::FreeListEntry::isolateRegion(dyld4::Allocator::Buffer) (.cold.1)
[ 1807]   1807     Code            0x000000000004d6c0 0x0000000102c756c0 0x000000000000002c 0x000e0000 dyld4::Allocator::FreeListEntry::isolateRegion(dyld4::Allocator::Buffer) (.cold.2)
[ 1808]   1808     Code            0x000000000004d6ec 0x0000000102c756ec 0x000000000000002c 0x000e0000 dyld4::Allocator::FreeListEntry::isolateRegion(dyld4::Allocator::Buffer) (.cold.3)
[ 1809]   1809     Code            0x000000000004d718 0x0000000102c75718 0x000000000000002c 0x000e0000 dyld4::Allocator::FreeListEntry::split(unsigned long) (.cold.1)
[ 1810]   1810     Code            0x000000000004d744 0x0000000102c75744 0x000000000000002c 0x000e0000 dyld4::Allocator::FreeListEntry::split(unsigned long) (.cold.2)
[ 1811]   1811     Code            0x000000000004d770 0x0000000102c75770 0x000000000000002c 0x000e0000 dyld4::Allocator::FreeListEntry::split(unsigned long) (.cold.3)
[ 1812]   1812     Code            0x000000000004d79c 0x0000000102c7579c 0x000000000000002c 0x000e0000 dyld4::Allocator::free(void*) (.cold.1)
[ 1813]   1813     Code            0x000000000004d7c8 0x0000000102c757c8 0x000000000000002c 0x000e0000 dyld4::Allocator::free(void*) (.cold.2)
[ 1814]   1814     Code            0x000000000004d7f4 0x0000000102c757f4 0x0000000000000018 0x001e0000 abort
[ 1815]   1815     Code            0x000000000004d80c 0x0000000102c7580c 0x0000000000000050 0x001e0000 abort_report_np
[ 1816]   1816     Code            0x000000000004d85c 0x0000000102c7585c 0x000000000000003c 0x001e0000 __assert_rtn
[ 1817]   1817     Code            0x000000000004d898 0x0000000102c75898 0x000000000000002c 0x000e0000 DyldSharedCache::patchableExportCount(unsigned int) const (.cold.1)
[ 1818]   1818     Code            0x000000000004d8c4 0x0000000102c758c4 0x000000000000002c 0x000e0000 DyldSharedCache::forEachPatchableExport(unsigned int, void (unsigned int, char const*) block_pointer) const (.cold.1)
[ 1819]   1819     Code            0x000000000004d8f0 0x0000000102c758f0 0x000000000000002c 0x000e0000 DyldSharedCache::shouldPatchClientOfImage(unsigned int, unsigned int) const (.cold.1)
[ 1820]   1820     Code            0x000000000004d91c 0x0000000102c7591c 0x000000000000002c 0x000e0000 DyldSharedCache::forEachPatchableUseOfExportInImage(unsigned int, unsigned int, unsigned int, void (unsigned int, dyld3::MachOLoaded::PointerMetaData, unsigned long long) block_pointer) const (.cold.1)
[ 1821]   1821     Code            0x000000000004d948 0x0000000102c75948 0x000000000000002c 0x000e0000 DyldSharedCache::forEachPatchableUseOfExportInImage(unsigned int, unsigned int, unsigned int, void (unsigned int, dyld3::MachOLoaded::PointerMetaData, unsigned long long) block_pointer) const (.cold.2)
[ 1822]   1822     Code            0x000000000004d974 0x0000000102c75974 0x000000000000002c 0x000e0000 DyldSharedCache::forEachPatchableUseOfExportInImage(unsigned int, unsigned int, unsigned int, void (unsigned int, dyld3::MachOLoaded::PointerMetaData, unsigned long long) block_pointer) const (.cold.3)
[ 1823]   1823     Code            0x000000000004d9a0 0x0000000102c759a0 0x000000000000002c 0x000e0000 DyldSharedCache::forEachPatchableUseOfExportInImage(unsigned int, unsigned int, unsigned int, void (unsigned int, dyld3::MachOLoaded::PointerMetaData, unsigned long long) block_pointer) const (.cold.4)
[ 1824]   1824     Code            0x000000000004d9cc 0x0000000102c759cc 0x000000000000002c 0x000e0000 invocation function for block in DyldSharedCache::forEachPatchableUseOfExportInImage(unsigned int, unsigned int, unsigned int, void (unsigned int, dyld3::MachOLoaded::PointerMetaData, unsigned long long) block_pointer) const
[ 1825]   1825     Code            0x000000000004d9f8 0x0000000102c759f8 0x000000000000002c 0x000e0000 DyldSharedCache::forEachPatchableUseOfExport(unsigned int, unsigned int, void (unsigned long long, dyld3::MachOLoaded::PointerMetaData, unsigned long long) block_pointer) const (.cold.1)
[ 1826]   1826     Code            0x000000000004da24 0x0000000102c75a24 0x000000000000002c 0x000e0000 dyld3::MachOFile::entryAddrFromThreadCmd(thread_command const*) const (.cold.1)
[ 1827]   1827     Code            0x000000000004da50 0x0000000102c75a50 0x000000000000002c 0x000e0000 dyld3::OverflowSafeArray<unsigned int, 4294967295ul>::push_back(unsigned int const&) (.cold.1)
[ 1828]   1828     Code            0x000000000004da7c 0x0000000102c75a7c 0x000000000000002c 0x000e0000 dyld3::MachOLoaded::ChainedFixupPointerOnDisk::Arm64e::unpackTarget() const (.cold.1)
[ 1829]   1829     Code            0x000000000004daa8 0x0000000102c75aa8 0x000000000000002c 0x000e0000 dyld3::MachOLoaded::ChainedFixupPointerOnDisk::Arm64e::unpackTarget() const (.cold.2)
[ 1830]   1830     Code            0x000000000004dad4 0x0000000102c75ad4 0x000000000000002c 0x000e0000 dyld3::MachOLoaded::ChainedFixupPointerOnDisk::Arm64e::signExtendedAddend() const (.cold.1)
[ 1831]   1831     Code            0x000000000004db00 0x0000000102c75b00 0x000000000000002c 0x000e0000 dyld3::MachOLoaded::ChainedFixupPointerOnDisk::Arm64e::signExtendedAddend() const (.cold.2)
[ 1832]   1832     Code            0x000000000004db2c 0x0000000102c75b2c 0x000000000000002c 0x000e0000 dyld3::MachOLoaded::ChainedFixupPointerOnDisk::Arm64e::keyName(unsigned char) (.cold.1)
[ 1833]   1833     Code            0x000000000004db58 0x0000000102c75b58 0x000000000000002c 0x000e0000 dyld3::MachOLoaded::ChainedFixupPointerOnDisk::Arm64e::signPointer(unsigned long long, void*, bool, unsigned short, unsigned char) (.cold.1)
[ 1834]   1834     Code            0x000000000004db84 0x0000000102c75b84 0x000000000000002c 0x000e0000 dyld3::MachOLoaded::ChainedFixupPointerOnDisk::Arm64e::signPointer(void*, unsigned long long) const (.cold.1)
[ 1835]   1835     Code            0x000000000004dbb0 0x0000000102c75bb0 0x000000000000002c 0x000e0000 dyld3::MachOLoaded::ChainedFixupPointerOnDisk::isRebase(unsigned short, unsigned long long, unsigned long long&) const (.cold.1)
[ 1836]   1836     Code            0x000000000004dbdc 0x0000000102c75bdc 0x000000000000002c 0x000e0000 dyld3::MachOLoaded::ChainedFixupPointerOnDisk::isBind(unsigned short, unsigned int&, long long&) const (.cold.1)
[ 1837]   1837     Code            0x000000000004dc08 0x0000000102c75c08 0x000000000000002c 0x000e0000 dyld3::MachOLoaded::walkChain(Diagnostics&, dyld3::MachOLoaded::ChainedFixupPointerOnDisk*, unsigned short, bool, unsigned int, void (dyld3::MachOLoaded::ChainedFixupPointerOnDisk*, bool&) block_pointer) const (.cold.1)
[ 1838]   1838     Code            0x000000000004dc34 0x0000000102c75c34 0x0000000000000028 0x000e0000 dyld3::OverflowSafeArray<relocation_info, 4294967295ul>::push_back(relocation_info const&) (.cold.1)
[ 1839]   1839     Code            0x000000000004dc5c 0x0000000102c75c5c 0x0000000000000028 0x000e0000 dyld3::MachOAnalyzer::sortRelocations(dyld3::Array<relocation_info>&) const (.cold.1)
[ 1840]   1840     Code            0x000000000004dc84 0x0000000102c75c84 0x0000000000000028 0x000e0000 dyld3::MachOAnalyzer::sortRelocations(dyld3::Array<relocation_info>&) const (.cold.2)
[ 1841]   1841     Code            0x000000000004dcac 0x0000000102c75cac 0x0000000000000028 0x000e0000 dyld3::MachOAnalyzer::sortRelocations(dyld3::Array<relocation_info>&) const (.cold.3)
[ 1842]   1842     Code            0x000000000004dcd4 0x0000000102c75cd4 0x000000000000002c 0x000e0000 dyld3::MachOAnalyzer::chainedPointerFormat() const (.cold.1)
[ 1843]   1843     Code            0x000000000004dd00 0x0000000102c75d00 0x0000000000000028 0x000e0000 dyld3::OverflowSafeArray<dyld3::SegmentRanges::SegmentRange, 4294967295ul>::push_back(dyld3::SegmentRanges::SegmentRange const&) (.cold.1)
[ 1844]   1844     Code            0x000000000004dd28 0x0000000102c75d28 0x000000000000002c 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::withChainStarts(Diagnostics&, unsigned long long, void (dyld_chained_starts_in_image const*) block_pointer) const
[ 1845]   1845     Code            0x000000000004dd54 0x0000000102c75d54 0x000000000000002c 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::withChainStarts(Diagnostics&, unsigned long long, void (dyld_chained_starts_in_image const*) block_pointer) const
[ 1846]   1846     Code            0x000000000004dd80 0x0000000102c75d80 0x000000000000002c 0x000e0000 invocation function for block in dyld3::MachOAnalyzer::withChainStarts(Diagnostics&, unsigned long long, void (dyld_chained_starts_in_image const*) block_pointer) const
[ 1847]   1847     Code            0x000000000004ddac 0x0000000102c75dac 0x000000000000002c 0x000e0000 dyld3::MachOAnalyzer::forEachRebase_Opcodes(Diagnostics&, dyld3::MachOLoaded::LinkEditInfo const&, dyld3::MachOFile::SegmentInfo const*, void (char const*, dyld3::MachOLoaded::LinkEditInfo const&, dyld3::MachOFile::SegmentInfo const*, bool, unsigned int, unsigned char, unsigned long long, dyld3::MachOAnalyzer::Rebase, bool&) block_pointer) const (.cold.1)
[ 1848]   1848     Code            0x000000000004ddd8 0x0000000102c75dd8 0x0000000000000024 0x000e0000 Diagnostics::assertNoError() const (.cold.1)
[ 1849]   1849     Code            0x000000000004ddfc 0x0000000102c75dfc 0x0000000000000028 0x000e0000 objc::PerfectHash::make_perfect(dyld3::OverflowSafeArray<objc::PerfectHash::key, 4294967295ul>&, objc::PerfectHash&) (.cold.1)
[ 1850]   1850     Code            0x000000000004de24 0x0000000102c75e24 0x0000000000000028 0x000e0000 objc::findhash(dyld3::OverflowSafeArray<objc::bstuff, 4294967295ul>&, unsigned int*, unsigned long long*, unsigned int*, unsigned int, dyld3::OverflowSafeArray<objc::PerfectHash::key, 4294967295ul>&) (.cold.1)
[ 1851]   1851     Code            0x000000000004de4c 0x0000000102c75e4c 0x0000000000000028 0x000e0000 objc::findhash(dyld3::OverflowSafeArray<objc::bstuff, 4294967295ul>&, unsigned int*, unsigned long long*, unsigned int*, unsigned int, dyld3::OverflowSafeArray<objc::PerfectHash::key, 4294967295ul>&) (.cold.2)
[ 1852]   1852     Code            0x000000000004de74 0x0000000102c75e74 0x0000000000000028 0x000e0000 objc::findhash(dyld3::OverflowSafeArray<objc::bstuff, 4294967295ul>&, unsigned int*, unsigned long long*, unsigned int*, unsigned int, dyld3::OverflowSafeArray<objc::PerfectHash::key, 4294967295ul>&) (.cold.3)
[ 1853]   1853     Code            0x000000000004de9c 0x0000000102c75e9c 0x0000000000000028 0x000e0000 objc::findhash(dyld3::OverflowSafeArray<objc::bstuff, 4294967295ul>&, unsigned int*, unsigned long long*, unsigned int*, unsigned int, dyld3::OverflowSafeArray<objc::PerfectHash::key, 4294967295ul>&) (.cold.4)
[ 1854]   1854     Code            0x000000000004dec4 0x0000000102c75ec4 0x0000000000000028 0x000e0000 objc::findhash(dyld3::OverflowSafeArray<objc::bstuff, 4294967295ul>&, unsigned int*, unsigned long long*, unsigned int*, unsigned int, dyld3::OverflowSafeArray<objc::PerfectHash::key, 4294967295ul>&) (.cold.5)
[ 1855]   1855     Code            0x000000000004deec 0x0000000102c75eec 0x0000000000000028 0x000e0000 objc::findhash(dyld3::OverflowSafeArray<objc::bstuff, 4294967295ul>&, unsigned int*, unsigned long long*, unsigned int*, unsigned int, dyld3::OverflowSafeArray<objc::PerfectHash::key, 4294967295ul>&) (.cold.6)
[ 1856]   1856     Code            0x000000000004df14 0x0000000102c75f14 0x0000000000000028 0x000e0000 objc::findhash(dyld3::OverflowSafeArray<objc::bstuff, 4294967295ul>&, unsigned int*, unsigned long long*, unsigned int*, unsigned int, dyld3::OverflowSafeArray<objc::PerfectHash::key, 4294967295ul>&) (.cold.7)
[ 1857]   1857     Code            0x000000000004df3c 0x0000000102c75f3c 0x0000000000000028 0x000e0000 objc::findhash(dyld3::OverflowSafeArray<objc::bstuff, 4294967295ul>&, unsigned int*, unsigned long long*, unsigned int*, unsigned int, dyld3::OverflowSafeArray<objc::PerfectHash::key, 4294967295ul>&) (.cold.8)
[ 1858]   1858     Code            0x000000000004df64 0x0000000102c75f64 0x0000000000000028 0x000e0000 objc::findhash(dyld3::OverflowSafeArray<objc::bstuff, 4294967295ul>&, unsigned int*, unsigned long long*, unsigned int*, unsigned int, dyld3::OverflowSafeArray<objc::PerfectHash::key, 4294967295ul>&) (.cold.9)
[ 1859]   1859     Code            0x000000000004df8c 0x0000000102c75f8c 0x0000000000000028 0x000e0000 objc::findhash(dyld3::OverflowSafeArray<objc::bstuff, 4294967295ul>&, unsigned int*, unsigned long long*, unsigned int*, unsigned int, dyld3::OverflowSafeArray<objc::PerfectHash::key, 4294967295ul>&) (.cold.10)
[ 1860]   1860     Code            0x000000000004dfb4 0x0000000102c75fb4 0x0000000000000028 0x000e0000 objc::findhash(dyld3::OverflowSafeArray<objc::bstuff, 4294967295ul>&, unsigned int*, unsigned long long*, unsigned int*, unsigned int, dyld3::OverflowSafeArray<objc::PerfectHash::key, 4294967295ul>&) (.cold.11)
[ 1861]   1861     Code            0x000000000004dfdc 0x0000000102c75fdc 0x0000000000000028 0x000e0000 objc::findhash(dyld3::OverflowSafeArray<objc::bstuff, 4294967295ul>&, unsigned int*, unsigned long long*, unsigned int*, unsigned int, dyld3::OverflowSafeArray<objc::PerfectHash::key, 4294967295ul>&) (.cold.12)
[ 1862]   1862     Code            0x000000000004e004 0x0000000102c76004 0x0000000000000028 0x000e0000 objc::findhash(dyld3::OverflowSafeArray<objc::bstuff, 4294967295ul>&, unsigned int*, unsigned long long*, unsigned int*, unsigned int, dyld3::OverflowSafeArray<objc::PerfectHash::key, 4294967295ul>&) (.cold.13)
[ 1863]   1863     Code            0x000000000004e02c 0x0000000102c7602c 0x0000000000000028 0x000e0000 objc::findhash(dyld3::OverflowSafeArray<objc::bstuff, 4294967295ul>&, unsigned int*, unsigned long long*, unsigned int*, unsigned int, dyld3::OverflowSafeArray<objc::PerfectHash::key, 4294967295ul>&) (.cold.14)
[ 1864]   1864     Code            0x000000000004e054 0x0000000102c76054 0x0000000000000028 0x000e0000 dyld3::OverflowSafeArray<unsigned char, 4294967295ul>::resize(unsigned long) (.cold.1)
[ 1865]   1865     Code            0x000000000004e07c 0x0000000102c7607c 0x0000000000000028 0x000e0000 objc::PerfectHash::make_perfect(dyld3::OverflowSafeArray<char const*, 4294967295ul> const&, objc::PerfectHash&) (.cold.1)
[ 1866]   1866     Code            0x000000000004e0a4 0x0000000102c760a4 0x0000000000000028 0x000e0000 dyld3::OverflowSafeArray<objc::PerfectHash::key, 4294967295ul>::push_back(objc::PerfectHash::key const&) (.cold.1)
[ 1867]   1867     Code            0x000000000004e0cc 0x0000000102c760cc 0x0000000000000028 0x000e0000 dyld3::OverflowSafeArray<objc::bstuff, 4294967295ul>::resize(unsigned long) (.cold.1)
[ 1868]   1868     Code            0x000000000004e0f4 0x0000000102c760f4 0x0000000000000028 0x000e0000 dyld3::OverflowSafeArray<objc::qstuff, 4294967295ul>::resize(unsigned long) (.cold.1)
[ 1869]   1869     Code            0x000000000004e11c 0x0000000102c7611c 0x0000000000000028 0x000e0000 dyld3::OverflowSafeArray<objc::hstuff, 4294967295ul>::resize(unsigned long) (.cold.1)
[ 1870]   1870     Code            0x000000000004e144 0x0000000102c76144 0x0000000000000028 0x000e0000 _enlarge.cold.1
[ 1871]   1871     Code            0x000000000004e16c 0x0000000102c7616c 0x0000000000000028 0x001e0000 _os_unfair_lock_recursive_abort
[ 1872]   1872     Code            0x000000000004e194 0x0000000102c76194 0x0000000000000028 0x001e0000 _os_unfair_lock_unowned_abort
[ 1873]   1873     Code            0x000000000004e1bc 0x0000000102c761bc 0x000000000000005c 0x001e0000 _os_unfair_lock_corruption_abort
[ 1874]   1874     Code            0x000000000004e218 0x0000000102c76218 0x0000000000000028 0x001e0000 _os_once_gate_recursive_abort
[ 1875]   1875     Code            0x000000000004e240 0x0000000102c76240 0x0000000000000028 0x001e0000 _os_once_gate_unowned_abort
[ 1876]   1876     Code            0x000000000004e268 0x0000000102c76268 0x0000000000000028 0x001e0000 _os_once_gate_corruption_abort
[ 1877]   1877     Code            0x000000000004e290 0x0000000102c76290 0x0000000000000028 0x000e0000 _os_alloc.cold.1
[ 1878]   1878     Code            0x000000000004e2b8 0x0000000102c762b8 0x0000000000000028 0x000e0000 _os_semaphore_dispose.cold.1
[ 1879]   1879     Code            0x000000000004e2e0 0x0000000102c762e0 0x0000000000000020 0x001e0000 _pthread_mutex_corruption_abort
[ 1880]   1880     Code            0x000000000004e300 0x0000000102c76300 0x0000000000000020 0x001e0000 abort_with_reason
[ 1881]   1881     Code            0x000000000004e320 0x0000000102c76320 0x000000000000008c 0x000e0000 abort_with_payload_wrapper_internal
[ 1882]   1882     Code            0x000000000004e3ac 0x0000000102c763ac 0x0000000000000010 0x001e0000 abort_with_payload
[ 1883]   1883     Data            0x000000000004e3c0 0x0000000102c763c0 0x0000000000000004 0x001e0000 SANDBOX_CHECK_NO_REPORT
[ 1884]   1884     Data            0x000000000004e3c4 0x0000000102c763c4 0x0000000000000024 0x001e0000 ccsha256_initial_state
[ 1885]   1885     Data            0x000000000004e3e8 0x0000000102c763e8 0x0000000000000028 0x001e0000 dyldVersionString
[ 1886]   1886     Data            0x000000000004e410 0x0000000102c76410 0x0000000000000068 0x001e0000 dyldVersionNumber
[ 1887]   1887     Data            0x000000000004e478 0x0000000102c76478 0x0000000000000398 0x000e0000 dyld3::sVersionMap
[ 1888]   1888     Data            0x000000000004e810 0x0000000102c76810 0x00000000000002d0 0x000e0000 dyld3::sVersionMap
[ 1889]   1889     Data            0x000000000004eae0 0x0000000102c76ae0 0x0000000000000098 0x000e0000 dyld4::APIs::deriveVersionFromDylibs(dyld3::MachOFile const*)::versionMapping
[ 1890]   1890     Data            0x000000000004eb78 0x0000000102c76b78 0x0000000000000024 0x001e0000 dyld3::GradedArchs::arm64e_keysoff
[ 1891]   1891     Data            0x000000000004eb9c 0x0000000102c76b9c 0x0000000000000024 0x001e0000 dyld3::GradedArchs::arm64e_keysoff_pb
[ 1892]   1892     Data            0x000000000004ebc0 0x0000000102c76bc0 0x0000000000000024 0x001e0000 dyld3::GradedArchs::arm64e
[ 1893]   1893     Data            0x000000000004ebe4 0x0000000102c76be4 0x0000000000000054 0x001e0000 dyld3::GradedArchs::arm64e_pb
[ 1894]   1894     Data            0x000000000004ec38 0x0000000102c76c38 0x0000000000000010 0x000e0000 dyld3::hashPriorities_watchOS_dylibs
[ 1895]   1895     Data            0x000000000004ec48 0x0000000102c76c48 0x0000000000000078 0x000e0000 dyld3::hashPriorities
[ 1896]   1896     Data            0x000000000004ecc0 0x0000000102c76cc0 0x0000000000000008 0x000e0000 os_log_simple_type_from_asl._level2ostype
[ 1897]   1897     Data            0x000000000004ecc8 0x0000000102c76cc8 0x0000000000000010 0x000e0000 UUID_NULL
[ 1898]   1898     Data            0x000000000004ecd8 0x0000000102c76cd8 0x0000000000000008 0x000e0000 _0x
[ 1899]   1899     Data            0x000000000004ece0 0x0000000102c76ce0 0x00000000000000b0 0x000e0000 _os_lock_type_base
[ 1900]   1900     Data            0x000000000004ed90 0x0000000102c76d90 0x0000000000000280 0x001e0000 ccsha512_K
[ 1901]   1901     Data            0x000000000004f010 0x0000000102c77010 0x0000000000000018 0x001e0000 ccsha1_initial_state
[ 1902]   1902     Data            0x000000000004f028 0x0000000102c77028 0x0000000000000048 0x001e0000 ccsha384_initial_state
[ 1903]   1903     Data            0x000000000004f070 0x0000000102c77070 0x0000000000000280 0x001e0000 sha512_K
[ 1904]   1904     Data            0x00000000000571d3 0x0000000102c7f1d3 0x0000000000000011 0x000e0000 _H
[ 1905]   1905     Data            0x00000000000571e4 0x0000000102c7f1e4 0x0000000000000676 0x000e0000 _h
[ 1906]   1906     Data            0x0000000000058070 0x0000000102c80070 0x0000000000000160 0x001e0000 dyld4::sConfigBuffer
[ 1907]   1907     Data            0x00000000000581d0 0x0000000102c801d0 0x0000000000000030 0x000e0000 __block_descriptor_tmp
[ 1908]   1908     Data            0x0000000000058200 0x0000000102c80200 0x0000000000000020 0x000e0000 __block_descriptor_tmp.5
[ 1909]   1909     Data            0x0000000000058220 0x0000000102c80220 0x0000000000000030 0x000e0000 __block_descriptor_tmp.14
[ 1910]   1910     Data            0x0000000000058250 0x0000000102c80250 0x0000000000000030 0x000e0000 __block_descriptor_tmp.21
[ 1911]   1911     Data            0x0000000000058280 0x0000000102c80280 0x0000000000000020 0x000e0000 __block_descriptor_tmp.25
[ 1912]   1912     Data            0x00000000000582a0 0x0000000102c802a0 0x0000000000000020 0x000e0000 __block_descriptor_tmp.27
[ 1913]   1913     Data            0x00000000000582c0 0x0000000102c802c0 0x0000000000000030 0x000e0000 __block_descriptor_tmp
[ 1914]   1914     Data            0x00000000000582f0 0x0000000102c802f0 0x0000000000000020 0x000e0000 __block_descriptor_tmp.39
[ 1915]   1915     Data            0x0000000000058310 0x0000000102c80310 0x0000000000000020 0x000e0000 __block_descriptor_tmp.44
[ 1916]   1916     Data            0x0000000000058330 0x0000000102c80330 0x0000000000000020 0x000e0000 __block_descriptor_tmp.46
[ 1917]   1917     Data            0x0000000000058350 0x0000000102c80350 0x0000000000000020 0x000e0000 __block_descriptor_tmp.49
[ 1918]   1918     Data            0x0000000000058370 0x0000000102c80370 0x0000000000000020 0x000e0000 __block_descriptor_tmp.56
[ 1919]   1919     Data            0x0000000000058390 0x0000000102c80390 0x0000000000000020 0x000e0000 __block_descriptor_tmp.57
[ 1920]   1920     Data            0x00000000000583b0 0x0000000102c803b0 0x0000000000000020 0x000e0000 __block_descriptor_tmp.59
[ 1921]   1921     Data            0x00000000000583d0 0x0000000102c803d0 0x0000000000000020 0x000e0000 __block_descriptor_tmp.60
[ 1922]   1922     Data            0x00000000000583f0 0x0000000102c803f0 0x0000000000000030 0x000e0000 __block_descriptor_tmp.61
[ 1923]   1923     Data            0x0000000000058420 0x0000000102c80420 0x0000000000000030 0x000e0000 __block_descriptor_tmp.77
[ 1924]   1924     Data            0x0000000000058450 0x0000000102c80450 0x0000000000000030 0x000e0000 __block_descriptor_tmp.79
[ 1925]   1925     Data            0x0000000000058480 0x0000000102c80480 0x0000000000000030 0x000e0000 __block_descriptor_tmp.84
[ 1926]   1926     Data            0x00000000000584b0 0x0000000102c804b0 0x0000000000000030 0x000e0000 __block_descriptor_tmp.89
[ 1927]   1927     Data            0x00000000000584e0 0x0000000102c804e0 0x0000000000000030 0x000e0000 __block_descriptor_tmp.92
[ 1928]   1928     Data            0x0000000000058510 0x0000000102c80510 0x0000000000000030 0x000e0000 __block_descriptor_tmp.96
[ 1929]   1929     Data            0x0000000000058540 0x0000000102c80540 0x0000000000000030 0x000e0000 __block_descriptor_tmp.103
[ 1930]   1930     Data            0x0000000000058570 0x0000000102c80570 0x0000000000000030 0x000e0000 __block_descriptor_tmp.107
[ 1931]   1931     Data            0x00000000000585a0 0x0000000102c805a0 0x0000000000000128 0x000e0000 dyld4::dataConstApps_iOS14_5_arm64
[ 1932]   1932     Data            0x00000000000586c8 0x0000000102c806c8 0x0000000000000448 0x000e0000 dyld4::dataConstApps_iOS14_5_Intune_arm64
[ 1933]   1933     Data            0x0000000000058b10 0x0000000102c80b10 0x0000000000000170 0x000e0000 dyld4::dataConstApps_iOS15_0
[ 1934]   1934     Data            0x0000000000058c80 0x0000000102c80c80 0x0000000000000030 0x000e0000 __block_descriptor_tmp
[ 1935]   1935     Data            0x0000000000058cb0 0x0000000102c80cb0 0x0000000000000020 0x000e0000 __block_descriptor_tmp.14
[ 1936]   1936     Data            0x0000000000058cd0 0x0000000102c80cd0 0x0000000000000030 0x000e0000 __block_descriptor_tmp.19
[ 1937]   1937     Data            0x0000000000058d00 0x0000000102c80d00 0x0000000000000030 0x000e0000 __block_descriptor_tmp.32
[ 1938]   1938     Data            0x0000000000058d30 0x0000000102c80d30 0x0000000000000030 0x000e0000 __block_descriptor_tmp.37
[ 1939]   1939     Data            0x0000000000058d60 0x0000000102c80d60 0x0000000000000030 0x000e0000 __block_descriptor_tmp.41
[ 1940]   1940     Data            0x0000000000058d90 0x0000000102c80d90 0x0000000000000030 0x000e0000 __block_descriptor_tmp.46
[ 1941]   1941     Data            0x0000000000058dc0 0x0000000102c80dc0 0x0000000000000030 0x000e0000 __block_descriptor_tmp.51
[ 1942]   1942     Data            0x0000000000058df0 0x0000000102c80df0 0x0000000000000020 0x000e0000 __block_descriptor_tmp.54
[ 1943]   1943     Data            0x0000000000058e10 0x0000000102c80e10 0x0000000000000020 0x000e0000 __block_literal_global
[ 1944]   1944     Data            0x0000000000058e30 0x0000000102c80e30 0x0000000000000030 0x000e0000 __block_descriptor_tmp.61
[ 1945]   1945     Data            0x0000000000058e60 0x0000000102c80e60 0x0000000000000020 0x000e0000 __block_descriptor_tmp.63
[ 1946]   1946     Data            0x0000000000058e80 0x0000000102c80e80 0x0000000000000030 0x000e0000 __block_descriptor_tmp.73
[ 1947]   1947     Data            0x0000000000058eb0 0x0000000102c80eb0 0x0000000000000020 0x000e0000 __block_descriptor_tmp.77
[ 1948]   1948     Data            0x0000000000058ed0 0x0000000102c80ed0 0x0000000000000030 0x000e0000 __block_descriptor_tmp.82
[ 1949]   1949     Data            0x0000000000058f00 0x0000000102c80f00 0x0000000000000030 0x000e0000 __block_descriptor_tmp.85
[ 1950]   1950     Data            0x0000000000058f30 0x0000000102c80f30 0x0000000000000020 0x000e0000 __block_descriptor_tmp.88
[ 1951]   1951     Data            0x0000000000058f50 0x0000000102c80f50 0x0000000000000020 0x000e0000 __block_descriptor_tmp.92
[ 1952]   1952     Data            0x0000000000058f70 0x0000000102c80f70 0x0000000000000020 0x000e0000 __block_descriptor_tmp.94
[ 1953]   1953     Data            0x0000000000058f90 0x0000000102c80f90 0x0000000000000020 0x000e0000 __block_descriptor_tmp.96
[ 1954]   1954     Data            0x0000000000058fb0 0x0000000102c80fb0 0x0000000000000020 0x000e0000 __block_descriptor_tmp.100
[ 1955]   1955     Data            0x0000000000058fd0 0x0000000102c80fd0 0x0000000000000020 0x000e0000 __block_descriptor_tmp.101
[ 1956]   1956     Data            0x0000000000058ff0 0x0000000102c80ff0 0x0000000000000030 0x000e0000 __block_descriptor_tmp.104
[ 1957]   1957     Data            0x0000000000059020 0x0000000102c81020 0x0000000000000020 0x000e0000 __block_descriptor_tmp.106
[ 1958]   1958     Data            0x0000000000059040 0x0000000102c81040 0x0000000000000020 0x000e0000 __block_descriptor_tmp.107
[ 1959]   1959     Data            0x0000000000059060 0x0000000102c81060 0x0000000000000020 0x001e0000 vtable for dyld4::RuntimeState
[ 1960]   1960     Data            0x0000000000059080 0x0000000102c81080 0x0000000000000030 0x000e0000 __block_descriptor_tmp
[ 1961]   1961     Data            0x00000000000590b0 0x0000000102c810b0 0x0000000000000030 0x000e0000 __block_descriptor_tmp.27
[ 1962]   1962     Data            0x00000000000590e0 0x0000000102c810e0 0x0000000000000030 0x000e0000 __block_descriptor_tmp.38
[ 1963]   1963     Data            0x0000000000059110 0x0000000102c81110 0x0000000000000030 0x000e0000 __block_descriptor_tmp.47
[ 1964]   1964     Data            0x0000000000059140 0x0000000102c81140 0x0000000000000020 0x000e0000 __block_descriptor_tmp.66
[ 1965]   1965     Data            0x0000000000059160 0x0000000102c81160 0x0000000000000020 0x000e0000 __block_descriptor_tmp.68
[ 1966]   1966     Data            0x0000000000059180 0x0000000102c81180 0x0000000000000020 0x000e0000 __block_descriptor_tmp.71
[ 1967]   1967     Data            0x00000000000591a0 0x0000000102c811a0 0x0000000000000020 0x000e0000 __block_descriptor_tmp.74
[ 1968]   1968     Data            0x00000000000591c0 0x0000000102c811c0 0x0000000000000020 0x000e0000 __block_descriptor_tmp.77
[ 1969]   1969     Data            0x00000000000591e0 0x0000000102c811e0 0x0000000000000020 0x000e0000 __block_descriptor_tmp.78
[ 1970]   1970     Data            0x0000000000059200 0x0000000102c81200 0x0000000000000020 0x000e0000 __block_descriptor_tmp.79
[ 1971]   1971     Data            0x0000000000059220 0x0000000102c81220 0x0000000000000020 0x000e0000 __block_descriptor_tmp.82
[ 1972]   1972     Data            0x0000000000059240 0x0000000102c81240 0x0000000000000020 0x000e0000 __block_descriptor_tmp.85
[ 1973]   1973     Data            0x0000000000059260 0x0000000102c81260 0x0000000000000020 0x000e0000 __block_descriptor_tmp.88
[ 1974]   1974     Data            0x0000000000059280 0x0000000102c81280 0x0000000000000020 0x000e0000 __block_descriptor_tmp.90
[ 1975]   1975     Data            0x00000000000592a0 0x0000000102c812a0 0x0000000000000030 0x000e0000 __block_descriptor_tmp.94
[ 1976]   1976     Data            0x00000000000592d0 0x0000000102c812d0 0x0000000000000030 0x000e0000 __block_descriptor_tmp.97
[ 1977]   1977     Data            0x0000000000059300 0x0000000102c81300 0x0000000000000030 0x000e0000 __block_descriptor_tmp.105
[ 1978]   1978     Data            0x0000000000059330 0x0000000102c81330 0x0000000000000020 0x000e0000 __block_descriptor_tmp.111
[ 1979]   1979     Data            0x0000000000059350 0x0000000102c81350 0x0000000000000020 0x000e0000 __block_descriptor_tmp.113
[ 1980]   1980     Data            0x0000000000059370 0x0000000102c81370 0x0000000000000030 0x000e0000 __block_descriptor_tmp.120
[ 1981]   1981     Data            0x00000000000593a0 0x0000000102c813a0 0x0000000000000030 0x000e0000 __block_descriptor_tmp.123
[ 1982]   1982     Data            0x00000000000593d0 0x0000000102c813d0 0x0000000000000030 0x000e0000 __block_descriptor_tmp
[ 1983]   1983     Data            0x0000000000059400 0x0000000102c81400 0x0000000000000030 0x000e0000 __block_descriptor_tmp.6
[ 1984]   1984     Data            0x0000000000059430 0x0000000102c81430 0x0000000000000030 0x000e0000 __block_descriptor_tmp.13
[ 1985]   1985     Data            0x0000000000059460 0x0000000102c81460 0x0000000000000020 0x000e0000 __block_descriptor_tmp.22
[ 1986]   1986     Data            0x0000000000059480 0x0000000102c81480 0x0000000000000030 0x000e0000 __block_descriptor_tmp.24
[ 1987]   1987     Data            0x00000000000594b0 0x0000000102c814b0 0x0000000000000020 0x000e0000 __block_descriptor_tmp.27
[ 1988]   1988     Data            0x00000000000594d0 0x0000000102c814d0 0x0000000000000020 0x000e0000 __block_descriptor_tmp.28
[ 1989]   1989     Data            0x00000000000594f0 0x0000000102c814f0 0x0000000000000030 0x000e0000 __block_descriptor_tmp.35
[ 1990]   1990     Data            0x0000000000059520 0x0000000102c81520 0x0000000000000030 0x000e0000 __block_descriptor_tmp.40
[ 1991]   1991     Data            0x0000000000059550 0x0000000102c81550 0x0000000000000020 0x000e0000 __block_descriptor_tmp.46
[ 1992]   1992     Data            0x0000000000059570 0x0000000102c81570 0x0000000000000030 0x000e0000 __block_descriptor_tmp.53
[ 1993]   1993     Data            0x00000000000595a0 0x0000000102c815a0 0x0000000000000030 0x000e0000 __block_descriptor_tmp.58
[ 1994]   1994     Data            0x00000000000595d0 0x0000000102c815d0 0x0000000000000030 0x000e0000 __block_descriptor_tmp.64
[ 1995]   1995     Data            0x0000000000059600 0x0000000102c81600 0x0000000000000030 0x000e0000 __block_descriptor_tmp.69
[ 1996]   1996     Data            0x0000000000059630 0x0000000102c81630 0x0000000000000030 0x000e0000 __block_descriptor_tmp.80
[ 1997]   1997     Data            0x0000000000059660 0x0000000102c81660 0x0000000000000030 0x000e0000 __block_descriptor_tmp.84
[ 1998]   1998     Data            0x0000000000059690 0x0000000102c81690 0x0000000000000030 0x000e0000 __block_descriptor_tmp.87
[ 1999]   1999     Data            0x00000000000596c0 0x0000000102c816c0 0x0000000000000030 0x000e0000 __block_descriptor_tmp
[ 2000]   2000     Data            0x00000000000596f0 0x0000000102c816f0 0x0000000000000030 0x000e0000 __block_descriptor_tmp.30
[ 2001]   2001     Data            0x0000000000059720 0x0000000102c81720 0x0000000000000030 0x000e0000 __block_descriptor_tmp.36
[ 2002]   2002     Data            0x0000000000059750 0x0000000102c81750 0x0000000000000020 0x000e0000 __block_descriptor_tmp.40
[ 2003]   2003     Data            0x0000000000059770 0x0000000102c81770 0x0000000000000020 0x000e0000 __block_descriptor_tmp.41
[ 2004]   2004     Data            0x0000000000059790 0x0000000102c81790 0x0000000000000020 0x000e0000 __block_descriptor_tmp.43
[ 2005]   2005     Data            0x00000000000597b0 0x0000000102c817b0 0x0000000000000020 0x000e0000 __block_descriptor_tmp.44
[ 2006]   2006     Data            0x00000000000597d0 0x0000000102c817d0 0x0000000000000020 0x000e0000 __block_descriptor_tmp.65
[ 2007]   2007     Data            0x00000000000597f0 0x0000000102c817f0 0x0000000000000020 0x000e0000 __block_descriptor_tmp.74
[ 2008]   2008     Data            0x0000000000059810 0x0000000102c81810 0x0000000000000030 0x000e0000 __block_descriptor_tmp.77
[ 2009]   2009     Data            0x0000000000059840 0x0000000102c81840 0x0000000000000030 0x000e0000 __block_descriptor_tmp.137
[ 2010]   2010     Data            0x0000000000059870 0x0000000102c81870 0x0000000000000030 0x000e0000 __block_descriptor_tmp.143
[ 2011]   2011     Data            0x00000000000598a0 0x0000000102c818a0 0x0000000000000030 0x000e0000 __block_descriptor_tmp.149
[ 2012]   2012     Data            0x00000000000598d0 0x0000000102c818d0 0x0000000000000030 0x000e0000 __block_descriptor_tmp.210
[ 2013]   2013     Data            0x0000000000059900 0x0000000102c81900 0x0000000000000030 0x000e0000 __block_descriptor_tmp.214
[ 2014]   2014     Data            0x0000000000059930 0x0000000102c81930 0x0000000000000030 0x000e0000 __block_descriptor_tmp
[ 2015]   2015     Data            0x0000000000059960 0x0000000102c81960 0x0000000000000020 0x000e0000 __block_descriptor_tmp.13
[ 2016]   2016     Data            0x0000000000059980 0x0000000102c81980 0x0000000000000020 0x000e0000 __block_descriptor_tmp
[ 2017]   2017     Data            0x00000000000599a0 0x0000000102c819a0 0x0000000000000020 0x000e0000 __block_descriptor_tmp.4
[ 2018]   2018     Data            0x00000000000599c0 0x0000000102c819c0 0x0000000000000020 0x000e0000 __block_descriptor_tmp.34
[ 2019]   2019     Data            0x00000000000599e0 0x0000000102c819e0 0x0000000000000030 0x000e0000 __block_descriptor_tmp
[ 2020]   2020     Data            0x0000000000059a10 0x0000000102c81a10 0x0000000000000030 0x000e0000 __block_descriptor_tmp.6
[ 2021]   2021     Data            0x0000000000059a40 0x0000000102c81a40 0x0000000000000030 0x000e0000 __block_descriptor_tmp.10
[ 2022]   2022     Data            0x0000000000059a70 0x0000000102c81a70 0x0000000000000030 0x000e0000 __block_descriptor_tmp.15
[ 2023]   2023     Data            0x0000000000059aa0 0x0000000102c81aa0 0x0000000000000030 0x000e0000 __block_descriptor_tmp.19
[ 2024]   2024     Data            0x0000000000059ad0 0x0000000102c81ad0 0x0000000000000030 0x000e0000 __block_descriptor_tmp.22
[ 2025]   2025     Data            0x0000000000059b00 0x0000000102c81b00 0x0000000000000030 0x000e0000 __block_descriptor_tmp.26
[ 2026]   2026     Data            0x0000000000059b30 0x0000000102c81b30 0x0000000000000030 0x000e0000 __block_descriptor_tmp.30
[ 2027]   2027     Data            0x0000000000059b60 0x0000000102c81b60 0x0000000000000030 0x000e0000 __block_descriptor_tmp.34
[ 2028]   2028     Data            0x0000000000059b90 0x0000000102c81b90 0x0000000000000030 0x000e0000 __block_descriptor_tmp.38
[ 2029]   2029     Data            0x0000000000059bc0 0x0000000102c81bc0 0x0000000000000030 0x000e0000 __block_descriptor_tmp.43
[ 2030]   2030     Data            0x0000000000059bf0 0x0000000102c81bf0 0x0000000000000030 0x000e0000 __block_descriptor_tmp.50
[ 2031]   2031     Data            0x0000000000059c20 0x0000000102c81c20 0x0000000000000030 0x000e0000 __block_descriptor_tmp.54
[ 2032]   2032     Data            0x0000000000059c50 0x0000000102c81c50 0x0000000000000030 0x000e0000 __block_descriptor_tmp.58
[ 2033]   2033     Data            0x0000000000059c80 0x0000000102c81c80 0x0000000000000030 0x000e0000 __block_descriptor_tmp.61
[ 2034]   2034     Data            0x0000000000059cb0 0x0000000102c81cb0 0x0000000000000020 0x000e0000 __block_descriptor_tmp.67
[ 2035]   2035     Data            0x0000000000059cd0 0x0000000102c81cd0 0x0000000000000020 0x000e0000 __block_descriptor_tmp.68
[ 2036]   2036     Data            0x0000000000059cf0 0x0000000102c81cf0 0x0000000000000020 0x000e0000 __block_descriptor_tmp.70
[ 2037]   2037     Data            0x0000000000059d10 0x0000000102c81d10 0x0000000000000030 0x000e0000 __block_descriptor_tmp.75
[ 2038]   2038     Data            0x0000000000059d40 0x0000000102c81d40 0x0000000000000030 0x000e0000 __block_descriptor_tmp.80
[ 2039]   2039     Data            0x0000000000059d70 0x0000000102c81d70 0x0000000000000030 0x000e0000 __block_descriptor_tmp.84
[ 2040]   2040     Data            0x0000000000059da0 0x0000000102c81da0 0x0000000000000030 0x000e0000 __block_descriptor_tmp.90
[ 2041]   2041     Data            0x0000000000059dd0 0x0000000102c81dd0 0x0000000000000030 0x000e0000 __block_descriptor_tmp.94
[ 2042]   2042     Data            0x0000000000059e00 0x0000000102c81e00 0x0000000000000030 0x000e0000 __block_descriptor_tmp.101
[ 2043]   2043     Data            0x0000000000059e30 0x0000000102c81e30 0x0000000000000030 0x000e0000 __block_descriptor_tmp.109
[ 2044]   2044     Data            0x0000000000059e60 0x0000000102c81e60 0x0000000000000030 0x000e0000 __block_descriptor_tmp.112
[ 2045]   2045     Data            0x0000000000059e90 0x0000000102c81e90 0x0000000000000030 0x000e0000 __block_descriptor_tmp.123
[ 2046]   2046     Data            0x0000000000059ec0 0x0000000102c81ec0 0x0000000000000030 0x000e0000 __block_descriptor_tmp.129
[ 2047]   2047     Data            0x0000000000059ef0 0x0000000102c81ef0 0x0000000000000030 0x000e0000 __block_descriptor_tmp.137
[ 2048]   2048     Data            0x0000000000059f20 0x0000000102c81f20 0x0000000000000020 0x000e0000 __block_descriptor_tmp.154
[ 2049]   2049     Data            0x0000000000059f40 0x0000000102c81f40 0x0000000000000020 0x000e0000 __block_descriptor_tmp.155
[ 2050]   2050     Data            0x0000000000059f60 0x0000000102c81f60 0x0000000000000020 0x000e0000 __block_descriptor_tmp.158
[ 2051]   2051     Data            0x0000000000059f80 0x0000000102c81f80 0x0000000000000020 0x000e0000 __block_descriptor_tmp.159
[ 2052]   2052     Data            0x0000000000059fa0 0x0000000102c81fa0 0x0000000000000030 0x000e0000 __block_descriptor_tmp.172
[ 2053]   2053     Data            0x0000000000059fd0 0x0000000102c81fd0 0x0000000000000030 0x000e0000 __block_descriptor_tmp.177
[ 2054]   2054     Data            0x000000000005a000 0x0000000102c82000 0x0000000000000030 0x000e0000 __block_descriptor_tmp.179
[ 2055]   2055     Data            0x000000000005a030 0x0000000102c82030 0x0000000000000030 0x000e0000 __block_descriptor_tmp.182
[ 2056]   2056     Data            0x000000000005a060 0x0000000102c82060 0x0000000000000030 0x000e0000 __block_descriptor_tmp.186
[ 2057]   2057     Data            0x000000000005a090 0x0000000102c82090 0x0000000000000030 0x000e0000 __block_descriptor_tmp.191
[ 2058]   2058     Data            0x000000000005a0c0 0x0000000102c820c0 0x0000000000000388 0x001e0000 vtable for dyld4::APIs
[ 2059]   2059     Data            0x000000000005a448 0x0000000102c82448 0x0000000000000030 0x000e0000 __block_descriptor_tmp.217
[ 2060]   2060     Data            0x000000000005a478 0x0000000102c82478 0x0000000000000030 0x000e0000 __block_descriptor_tmp
[ 2061]   2061     Data            0x000000000005a4a8 0x0000000102c824a8 0x0000000000000030 0x000e0000 __block_descriptor_tmp.9
[ 2062]   2062     Data            0x000000000005a4d8 0x0000000102c824d8 0x0000000000000030 0x000e0000 __block_descriptor_tmp.14
[ 2063]   2063     Data            0x000000000005a508 0x0000000102c82508 0x0000000000000030 0x000e0000 __block_descriptor_tmp.19
[ 2064]   2064     Data            0x000000000005a538 0x0000000102c82538 0x0000000000000030 0x000e0000 __block_descriptor_tmp.24
[ 2065]   2065     Data            0x000000000005a568 0x0000000102c82568 0x0000000000000030 0x000e0000 __block_descriptor_tmp.29
[ 2066]   2066     Data            0x000000000005a598 0x0000000102c82598 0x0000000000000030 0x000e0000 __block_descriptor_tmp.34
[ 2067]   2067     Data            0x000000000005a5c8 0x0000000102c825c8 0x0000000000000020 0x000e0000 __block_descriptor_tmp.38
[ 2068]   2068     Data            0x000000000005a5e8 0x0000000102c825e8 0x0000000000000020 0x000e0000 __block_descriptor_tmp.47
[ 2069]   2069     Data            0x000000000005a608 0x0000000102c82608 0x0000000000000030 0x000e0000 __block_descriptor_tmp.50
[ 2070]   2070     Data            0x000000000005a638 0x0000000102c82638 0x0000000000000030 0x000e0000 __block_descriptor_tmp.54
[ 2071]   2071     Data            0x000000000005a668 0x0000000102c82668 0x0000000000000020 0x000e0000 __block_descriptor_tmp.66
[ 2072]   2072     Data            0x000000000005a688 0x0000000102c82688 0x0000000000000020 0x000e0000 __block_descriptor_tmp.68
[ 2073]   2073     Data            0x000000000005a6a8 0x0000000102c826a8 0x0000000000000030 0x000e0000 __block_descriptor_tmp.76
[ 2074]   2074     Data            0x000000000005a6d8 0x0000000102c826d8 0x0000000000000020 0x000e0000 __block_descriptor_tmp.83
[ 2075]   2075     Data            0x000000000005a6f8 0x0000000102c826f8 0x0000000000000030 0x000e0000 __block_descriptor_tmp.87
[ 2076]   2076     Data            0x000000000005a728 0x0000000102c82728 0x0000000000000030 0x000e0000 __block_descriptor_tmp.89
[ 2077]   2077     Data            0x000000000005a758 0x0000000102c82758 0x0000000000000030 0x000e0000 __block_descriptor_tmp.93
[ 2078]   2078     Data            0x000000000005a788 0x0000000102c82788 0x0000000000000030 0x000e0000 __block_descriptor_tmp.97
[ 2079]   2079     Data            0x000000000005a7b8 0x0000000102c827b8 0x0000000000000020 0x000e0000 __block_descriptor_tmp.100
[ 2080]   2080     Data            0x000000000005a7d8 0x0000000102c827d8 0x0000000000000030 0x000e0000 __block_descriptor_tmp
[ 2081]   2081     Data            0x000000000005a808 0x0000000102c82808 0x0000000000000030 0x000e0000 __block_descriptor_tmp.13
[ 2082]   2082     Data            0x000000000005a838 0x0000000102c82838 0x0000000000000030 0x000e0000 __block_descriptor_tmp.14
[ 2083]   2083     Data            0x000000000005a868 0x0000000102c82868 0x0000000000000030 0x000e0000 __block_descriptor_tmp.30
[ 2084]   2084     Data            0x000000000005a898 0x0000000102c82898 0x0000000000000030 0x000e0000 __block_descriptor_tmp.33
[ 2085]   2085     Data            0x000000000005a8c8 0x0000000102c828c8 0x0000000000000030 0x000e0000 __block_descriptor_tmp.41
[ 2086]   2086     Data            0x000000000005a8f8 0x0000000102c828f8 0x0000000000000030 0x000e0000 __block_descriptor_tmp.45
[ 2087]   2087     Data            0x000000000005a928 0x0000000102c82928 0x0000000000000030 0x000e0000 __block_descriptor_tmp
[ 2088]   2088     Data            0x000000000005a958 0x0000000102c82958 0x0000000000000030 0x000e0000 __block_descriptor_tmp.13
[ 2089]   2089     Data            0x000000000005a988 0x0000000102c82988 0x0000000000000090 0x001e0000 dyld3::MachOFile::_s_archInfos
[ 2090]   2090     Data            0x000000000005aa18 0x0000000102c82a18 0x00000000000000a0 0x001e0000 dyld3::MachOFile::_s_platformInfos
[ 2091]   2091     Data            0x000000000005aab8 0x0000000102c82ab8 0x0000000000000030 0x000e0000 __block_descriptor_tmp.37
[ 2092]   2092     Data            0x000000000005aae8 0x0000000102c82ae8 0x0000000000000030 0x000e0000 dyld3::MachOFile::loadableIntoProcess(dyld3::Platform, char const*) const::macOSHost
[ 2093]   2093     Data            0x000000000005ab18 0x0000000102c82b18 0x0000000000000030 0x000e0000 __block_descriptor_tmp.48
[ 2094]   2094     Data            0x000000000005ab48 0x0000000102c82b48 0x0000000000000020 0x000e0000 __block_descriptor_tmp.51
[ 2095]   2095     Data            0x000000000005ab68 0x0000000102c82b68 0x0000000000000020 0x000e0000 __block_literal_global
[ 2096]   2096     Data            0x000000000005ab88 0x0000000102c82b88 0x0000000000000030 0x000e0000 __block_descriptor_tmp.57
[ 2097]   2097     Data            0x000000000005abb8 0x0000000102c82bb8 0x0000000000000030 0x000e0000 __block_descriptor_tmp.60
[ 2098]   2098     Data            0x000000000005abe8 0x0000000102c82be8 0x0000000000000030 0x000e0000 __block_descriptor_tmp.61
[ 2099]   2099     Data            0x000000000005ac18 0x0000000102c82c18 0x0000000000000030 0x000e0000 __block_descriptor_tmp.68
[ 2100]   2100     Data            0x000000000005ac48 0x0000000102c82c48 0x0000000000000030 0x000e0000 __block_descriptor_tmp.78
[ 2101]   2101     Data            0x000000000005ac78 0x0000000102c82c78 0x0000000000000030 0x000e0000 __block_descriptor_tmp.83
[ 2102]   2102     Data            0x000000000005aca8 0x0000000102c82ca8 0x0000000000000030 0x000e0000 __block_descriptor_tmp.86
[ 2103]   2103     Data            0x000000000005acd8 0x0000000102c82cd8 0x0000000000000030 0x000e0000 __block_descriptor_tmp.96
[ 2104]   2104     Data            0x000000000005ad08 0x0000000102c82d08 0x0000000000000030 0x000e0000 __block_descriptor_tmp.101
[ 2105]   2105     Data            0x000000000005ad38 0x0000000102c82d38 0x0000000000000030 0x000e0000 __block_descriptor_tmp.160
[ 2106]   2106     Data            0x000000000005ad68 0x0000000102c82d68 0x0000000000000030 0x000e0000 __block_descriptor_tmp.163
[ 2107]   2107     Data            0x000000000005ad98 0x0000000102c82d98 0x0000000000000030 0x000e0000 __block_descriptor_tmp.167
[ 2108]   2108     Data            0x000000000005adc8 0x0000000102c82dc8 0x0000000000000030 0x000e0000 __block_descriptor_tmp.176
[ 2109]   2109     Data            0x000000000005adf8 0x0000000102c82df8 0x0000000000000030 0x000e0000 __block_descriptor_tmp
[ 2110]   2110     Data            0x000000000005ae28 0x0000000102c82e28 0x0000000000000020 0x000e0000 __block_descriptor_tmp.34
[ 2111]   2111     Data            0x000000000005ae48 0x0000000102c82e48 0x0000000000000020 0x000e0000 __block_descriptor_tmp.36
[ 2112]   2112     Data            0x000000000005ae68 0x0000000102c82e68 0x0000000000000030 0x000e0000 __block_descriptor_tmp.38
[ 2113]   2113     Data            0x000000000005ae98 0x0000000102c82e98 0x0000000000000020 0x000e0000 __block_descriptor_tmp.44
[ 2114]   2114     Data            0x000000000005aeb8 0x0000000102c82eb8 0x0000000000000030 0x000e0000 __block_descriptor_tmp.45
[ 2115]   2115     Data            0x000000000005aee8 0x0000000102c82ee8 0x0000000000000030 0x000e0000 __block_descriptor_tmp.46
[ 2116]   2116     Data            0x000000000005af18 0x0000000102c82f18 0x0000000000000030 0x000e0000 __block_descriptor_tmp.47
[ 2117]   2117     Data            0x000000000005af48 0x0000000102c82f48 0x0000000000000030 0x000e0000 __block_descriptor_tmp.53
[ 2118]   2118     Data            0x000000000005af78 0x0000000102c82f78 0x0000000000000030 0x000e0000 __block_descriptor_tmp.56
[ 2119]   2119     Data            0x000000000005afa8 0x0000000102c82fa8 0x0000000000000030 0x000e0000 __block_descriptor_tmp.59
[ 2120]   2120     Data            0x000000000005afd8 0x0000000102c82fd8 0x0000000000000030 0x000e0000 __block_descriptor_tmp.67
[ 2121]   2121     Data            0x000000000005b008 0x0000000102c83008 0x0000000000000020 0x000e0000 dyld3::MachOLoaded::ChainedFixupPointerOnDisk::Kernel64::keyName() const::names
[ 2122]   2122     Data            0x000000000005b028 0x0000000102c83028 0x0000000000000030 0x000e0000 __block_descriptor_tmp.86
[ 2123]   2123     Data            0x000000000005b058 0x0000000102c83058 0x0000000000000030 0x000e0000 __block_descriptor_tmp.91
[ 2124]   2124     Data            0x000000000005b088 0x0000000102c83088 0x0000000000000030 0x000e0000 __block_descriptor_tmp.23
[ 2125]   2125     Data            0x000000000005b0b8 0x0000000102c830b8 0x0000000000000020 0x000e0000 __block_descriptor_tmp.143
[ 2126]   2126     Data            0x000000000005b0d8 0x0000000102c830d8 0x0000000000000030 0x000e0000 __block_descriptor_tmp.151
[ 2127]   2127     Data            0x000000000005b108 0x0000000102c83108 0x0000000000000030 0x000e0000 __block_descriptor_tmp.153
[ 2128]   2128     Data            0x000000000005b138 0x0000000102c83138 0x0000000000000030 0x000e0000 __block_descriptor_tmp.155
[ 2129]   2129     Data            0x000000000005b168 0x0000000102c83168 0x0000000000000030 0x000e0000 __block_descriptor_tmp.168
[ 2130]   2130     Data            0x000000000005b198 0x0000000102c83198 0x0000000000000030 0x000e0000 __block_descriptor_tmp.176
[ 2131]   2131     Data            0x000000000005b1c8 0x0000000102c831c8 0x0000000000000030 0x000e0000 __block_descriptor_tmp.195
[ 2132]   2132     Data            0x000000000005b1f8 0x0000000102c831f8 0x0000000000000030 0x000e0000 __block_descriptor_tmp.199
[ 2133]   2133     Data            0x000000000005b228 0x0000000102c83228 0x0000000000000030 0x000e0000 __block_descriptor_tmp.220
[ 2134]   2134     Data            0x000000000005b258 0x0000000102c83258 0x0000000000000030 0x000e0000 __block_descriptor_tmp.269
[ 2135]   2135     Data            0x000000000005b288 0x0000000102c83288 0x0000000000000030 0x000e0000 __block_descriptor_tmp.275
[ 2136]   2136     Data            0x000000000005b2b8 0x0000000102c832b8 0x0000000000000020 0x000e0000 __block_descriptor_tmp.276
[ 2137]   2137     Data            0x000000000005b2d8 0x0000000102c832d8 0x0000000000000030 0x000e0000 __block_descriptor_tmp.279
[ 2138]   2138     Data            0x000000000005b308 0x0000000102c83308 0x0000000000000030 0x000e0000 __block_descriptor_tmp.285
[ 2139]   2139     Data            0x000000000005b338 0x0000000102c83338 0x0000000000000030 0x000e0000 __block_descriptor_tmp.290
[ 2140]   2140     Data            0x000000000005b368 0x0000000102c83368 0x0000000000000030 0x000e0000 __block_descriptor_tmp.294
[ 2141]   2141     Data            0x000000000005b398 0x0000000102c83398 0x0000000000000030 0x000e0000 __block_descriptor_tmp.300
[ 2142]   2142     Data            0x000000000005b3c8 0x0000000102c833c8 0x0000000000000030 0x000e0000 __block_descriptor_tmp.303
[ 2143]   2143     Data            0x000000000005b3f8 0x0000000102c833f8 0x0000000000000030 0x000e0000 __block_descriptor_tmp.309
[ 2144]   2144     Data            0x000000000005b428 0x0000000102c83428 0x0000000000000030 0x000e0000 __block_descriptor_tmp.315
[ 2145]   2145     Data            0x000000000005b458 0x0000000102c83458 0x0000000000000030 0x000e0000 __block_descriptor_tmp.324
[ 2146]   2146     Data            0x000000000005b488 0x0000000102c83488 0x0000000000000030 0x000e0000 __block_descriptor_tmp.328
[ 2147]   2147     Data            0x000000000005b4b8 0x0000000102c834b8 0x0000000000000030 0x000e0000 __block_descriptor_tmp.331
[ 2148]   2148     Data            0x000000000005b4e8 0x0000000102c834e8 0x0000000000000030 0x000e0000 __block_descriptor_tmp.340
[ 2149]   2149     Data            0x000000000005b518 0x0000000102c83518 0x0000000000000030 0x000e0000 __block_descriptor_tmp.343
[ 2150]   2150     Data            0x000000000005b548 0x0000000102c83548 0x0000000000000030 0x000e0000 __block_descriptor_tmp.349
[ 2151]   2151     Data            0x000000000005b578 0x0000000102c83578 0x0000000000000030 0x000e0000 __block_descriptor_tmp.357
[ 2152]   2152     Data            0x000000000005b5a8 0x0000000102c835a8 0x0000000000000030 0x000e0000 __block_descriptor_tmp.363
[ 2153]   2153     Data            0x000000000005b5d8 0x0000000102c835d8 0x0000000000000020 0x000e0000 __block_descriptor_tmp.371
[ 2154]   2154     Data            0x000000000005b5f8 0x0000000102c835f8 0x0000000000000030 0x000e0000 __block_descriptor_tmp.374
[ 2155]   2155     Data            0x000000000005b628 0x0000000102c83628 0x0000000000000030 0x000e0000 __block_descriptor_tmp.430
[ 2156]   2156     Data            0x000000000005b658 0x0000000102c83658 0x0000000000000030 0x000e0000 __block_descriptor_tmp.466
[ 2157]   2157     Data            0x000000000005b688 0x0000000102c83688 0x0000000000000030 0x000e0000 __block_descriptor_tmp.485
[ 2158]   2158     Data            0x000000000005b6b8 0x0000000102c836b8 0x0000000000000030 0x000e0000 __block_descriptor_tmp.488
[ 2159]   2159     Data            0x000000000005b6e8 0x0000000102c836e8 0x0000000000000030 0x000e0000 __block_descriptor_tmp.493
[ 2160]   2160     Data            0x000000000005b718 0x0000000102c83718 0x0000000000000030 0x000e0000 __block_descriptor_tmp.496
[ 2161]   2161     Data            0x000000000005b748 0x0000000102c83748 0x0000000000000030 0x000e0000 __block_descriptor_tmp.505
[ 2162]   2162     Data            0x000000000005b778 0x0000000102c83778 0x0000000000000030 0x000e0000 __block_descriptor_tmp.515
[ 2163]   2163     Data            0x000000000005b7a8 0x0000000102c837a8 0x0000000000000030 0x000e0000 __block_descriptor_tmp.518
[ 2164]   2164     Data            0x000000000005b7d8 0x0000000102c837d8 0x0000000000000030 0x000e0000 __block_descriptor_tmp.535
[ 2165]   2165     Data            0x000000000005b808 0x0000000102c83808 0x00000000000000a0 0x000e0000 dyld3::sTreatAsWeak
[ 2166]   2166     Data            0x000000000005b8a8 0x0000000102c838a8 0x0000000000000030 0x000e0000 __block_descriptor_tmp.540
[ 2167]   2167     Data            0x000000000005b8d8 0x0000000102c838d8 0x0000000000000030 0x000e0000 __block_descriptor_tmp.546
[ 2168]   2168     Data            0x000000000005b908 0x0000000102c83908 0x0000000000000030 0x000e0000 __block_descriptor_tmp.550
[ 2169]   2169     Data            0x000000000005b938 0x0000000102c83938 0x0000000000000020 0x000e0000 __block_descriptor_tmp.552
[ 2170]   2170     Data            0x000000000005b958 0x0000000102c83958 0x0000000000000020 0x000e0000 __block_literal_global.554
[ 2171]   2171     Data            0x000000000005b978 0x0000000102c83978 0x0000000000000030 0x000e0000 __block_descriptor_tmp.558
[ 2172]   2172     Data            0x000000000005b9a8 0x0000000102c839a8 0x0000000000000030 0x000e0000 __block_descriptor_tmp.562
[ 2173]   2173     Data            0x000000000005b9d8 0x0000000102c839d8 0x0000000000000030 0x000e0000 __block_descriptor_tmp.565
[ 2174]   2174     Data            0x000000000005ba08 0x0000000102c83a08 0x0000000000000030 0x000e0000 __block_descriptor_tmp.569
[ 2175]   2175     Data            0x000000000005ba38 0x0000000102c83a38 0x0000000000000030 0x000e0000 __block_descriptor_tmp.572
[ 2176]   2176     Data            0x000000000005ba68 0x0000000102c83a68 0x0000000000000030 0x000e0000 __block_descriptor_tmp.575
[ 2177]   2177     Data            0x000000000005ba98 0x0000000102c83a98 0x0000000000000030 0x000e0000 __block_descriptor_tmp.578
[ 2178]   2178     Data            0x000000000005bac8 0x0000000102c83ac8 0x0000000000000030 0x000e0000 __block_descriptor_tmp.581
[ 2179]   2179     Data            0x000000000005baf8 0x0000000102c83af8 0x0000000000000030 0x000e0000 __block_descriptor_tmp.585
[ 2180]   2180     Data            0x000000000005bb28 0x0000000102c83b28 0x0000000000000030 0x000e0000 __block_descriptor_tmp.588
[ 2181]   2181     Data            0x000000000005bb58 0x0000000102c83b58 0x0000000000000030 0x000e0000 __block_descriptor_tmp.592
[ 2182]   2182     Data            0x000000000005bb88 0x0000000102c83b88 0x0000000000000030 0x000e0000 __block_descriptor_tmp.595
[ 2183]   2183     Data            0x000000000005bbb8 0x0000000102c83bb8 0x0000000000000020 0x001e0000 _os_lock_type_unfair
[ 2184]   2184     Data            0x000000000005bbd8 0x0000000102c83bd8 0x0000000000000040 0x001e0000 ccsha384_vng_arm_di
[ 2185]   2185     Data            0x000000000005bc18 0x0000000102c83c18 0x0000000000000040 0x001e0000 ccsha1_vng_arm_di
[ 2186]   2186     Data            0x000000000005bc58 0x0000000102c83c58 0x0000000000000040 0x001e0000 ccsha256_vng_arm_di
[ 2187]   2187     Data            0x000000000005bc98 0x0000000102c83c98 0x0000000000010000 0x000e0000 dyld4::ProcessConfig::Process::roalloc(unsigned long) const::roBuffer
[ 2188]   2188     Data            0x000000000006c000 0x0000000102c94000 0x0000000000000008 0x000e0000 dyld4::ProcessConfig::Process::roalloc(unsigned long) const::next
[ 2189]   2189     Data            0x000000000006c008 0x0000000102c94008 0x0000000000000008 0x001e0000 gProcessInfo
[ 2190]   2190     Data            0x000000000006c010 0x0000000102c94010 0x0000000000000108 0x000e0000 rs
[ 2191]   2191     Data            0x000000000006c118 0x0000000102c94118 0x0000000000000010 0x001e0000 __pthread_head
[ 2192]   2192     Data            0x000000000006c128 0x0000000102c94128 0x0000000000000008 0x000e0000 _pthread_count
[ 2193]   2193     Data            0x000000000006c130 0x0000000102c94130 0x0000000000000008 0x001e0000 NDR_record
[ 2194]   2194     Data            0x000000000006c138 0x0000000102c94138 0x0000000000000004 0x001e0000 _current_pid
[ 2195]   2195     Data            0x000000000006c140 0x0000000102c94140 0x0000000000000170 0x001e0000 dyld_all_image_infos
[ 2196]   2196     Data            0x000000000006c2b0 0x0000000102c942b0 0x0000000000000040 0x001e0000 gCRAnnotations
[ 2197]   2197     Data            0x000000000006c300 0x0000000102c94300 0x0000000000000008 0x001e0000 dyld4::sSyscallDelegate
[ 2198]   2198     Data            0x000000000006c308 0x0000000102c94308 0x0000000000000008 0x001e0000 __stack_chk_guard
[ 2199]   2199     Data            0x000000000006c310 0x0000000102c94310 0x0000000000000100 0x001e0000 _NSConcreteStackBlock
[ 2200]   2200     Data            0x000000000006c410 0x0000000102c94410 0x0000000000000100 0x001e0000 _NSConcreteGlobalBlock
[ 2201]   2201     Data            0x000000000006c510 0x0000000102c94510 0x0000000000000034 0x001e0000 _os_alloc_heap
[ 2202]   2202     Data            0x000000000006c544 0x0000000102c94544 0x000000000000003c 0x001e0000 _pthread_list_lock
[ 2203]   2203     Data            0x000000000006c580 0x0000000102c94580 0x00000000000010e8 0x001e0000 _main_thread
[ 2204]   2204     Data            0x000000000006d668 0x0000000102c95668 0x000000000000000c 0x001e0000 _pthread_ptr_munge_token
[ 2205]   2205     Data            0x000000000006d674 0x0000000102c95674 0x0000000000000004 0x001e0000 mach_task_self_
[ 2206]   2206     Data            0x000000000006d678 0x0000000102c95678 0x0000000000000008 0x001e0000 vm_kernel_page_size
[ 2207]   2207     Data            0x000000000006d680 0x0000000102c95680 0x0000000000000008 0x001e0000 vm_kernel_page_mask
[ 2208]   2208     Data            0x000000000006d688 0x0000000102c95688 0x0000000000000008 0x001e0000 vm_kernel_page_shift
[ 2209]   2209     Data            0x000000000006d690 0x0000000102c95690 0x0000000000000008 0x001e0000 vm_page_size
[ 2210]   2210     Data            0x000000000006d698 0x0000000102c95698 0x0000000000000008 0x001e0000 vm_page_mask
[ 2211]   2211     Data            0x000000000006d6a0 0x0000000102c956a0 0x0000000000000004 0x001e0000 vm_page_shift
[ 2212]   2212     Data            0x000000000006d6a4 0x0000000102c956a4 0x0000000000000004 0x001e0000 _task_reply_port
[ 2213]   2213     Data            0x000000000006d6a8 0x0000000102c956a8 0x0000000000000008 0x001e0000 errno
[ 2214]   2214     Data            0x000000000006d6b0 0x0000000102c956b0 0x0000000000000008 0x001e0000 __syscall_logger
[ 2215]   2215     Data            0x000000000006d6b8 0x0000000102c956b8 0x0000000000000640 0x001e0000 _os_alloc_once_table
[ 2216]   2216     Data            0x000000000006dcf8 0x0000000102c95cf8 0x0000000000000400 0x000e0000 dyld4::error_string
[ 2217]   2217     Data            0x000000000006e0f8 0x0000000102c960f8 0x0000000000000008 0x000e0000 dyld4::sImageUUIDs
[ 2218]   2218     Data            0x000000000006e100 0x0000000102c96100 0x0000000000000008 0x000e0000 dyld4::sImageInfos
[ 2219]   2219     Data            0x000000000006e108 0x0000000102c96108 0x0000000000000008 0x000e0000 dyld3::trace_pair_id
[ 2220]   2220     Data            0x000000000006e110 0x0000000102c96110 0x0000000000000004 0x000e0000 arc4_lock
[ 2221]   2221     Data            0x000000000006e114 0x0000000102c96114 0x0000000000000004 0x000e0000 rs_stired
[ 2222]   2222     Data            0x000000000006e118 0x0000000102c96118 0x0000000000000004 0x000e0000 rs_data_available
[ 2223]   2223     Data            0x000000000006e11c 0x0000000102c9611c 0x0000000000000004 0x000e0000 arc4_count
[ 2224]   2224     Data            0x000000000006e120 0x0000000102c96120 0x0000000000000098 0x000e0000 rdat
[ 2225]   2225     Data            0x000000000006e1b8 0x0000000102c961b8 0x0000000000000008 0x000e0000 subsystem_root_path
[ 2226]   2226     Data            0x000000000006e1c0 0x0000000102c961c0 0x0000000000000008 0x000e0000 _pthread_introspection_hook
[ 2227]   2227     Data            0x000000000006e1c8 0x0000000102c961c8 0x0000000000000008 0x000e0000 mach_init.mach_init_inited
[ 2228]   2228     Data            0x000000000006e1d0 0x0000000102c961d0 0x0000000000000008 0x000e0000 kdebug_typefilter.typefilter
[ 2229]   2229     Data            0x000000000006e1d8 0x0000000102c961d8 0x0000000000000004 0x000e0000 __remove_counter
[ 2230]   2230   X Code            0x000000000001aae0 0x0000000102c42ae0 0x0000000000000014 0x000f0000 _dyld_start
[ 2231]   2231  S  Code            0x0000000000001000 0x0000000102c29000 0x0000000000000020 0x00000000 ___lldb_unnamed_symbol1$$dyld
[ 2232]   2232  S  Code            0x0000000000002220 0x0000000102c2a220 0x0000000000000010 0x00000000 ___lldb_unnamed_symbol2$$dyld
[ 2233]   2233  S  Code            0x0000000000002500 0x0000000102c2a500 0x0000000000000010 0x00000000 ___lldb_unnamed_symbol3$$dyld
[ 2234]   2234  S  Code            0x0000000000005580 0x0000000102c2d580 0x0000000000000010 0x00000000 ___lldb_unnamed_symbol4$$dyld
[ 2235]   2235  S  Code            0x0000000000006120 0x0000000102c2e120 0x0000000000000020 0x00000000 ___lldb_unnamed_symbol5$$dyld
[ 2236]   2236  S  Code            0x000000000001c848 0x0000000102c44848 0x0000000000000014 0x00000000 ___lldb_unnamed_symbol6$$dyld
[ 2237]   2237  S  Code            0x000000000002515c 0x0000000102c4d15c 0x0000000000000010 0x00000000 ___lldb_unnamed_symbol7$$dyld
[ 2238]   2238  S  Code            0x0000000000025254 0x0000000102c4d254 0x0000000000000010 0x00000000 ___lldb_unnamed_symbol8$$dyld
[ 2239]   2239  S  Code            0x000000000002d7d8 0x0000000102c557d8 0x000000000000004c 0x00000000 ___lldb_unnamed_symbol9$$dyld
[ 2240]   2240  S  Code            0x000000000002ec48 0x0000000102c56c48 0x0000000000000018 0x00000000 ___lldb_unnamed_symbol10$$dyld
[ 2241]   2241  S  Code            0x0000000000037a94 0x0000000102c5fa94 0x0000000000000018 0x00000000 ___lldb_unnamed_symbol11$$dyld
[ 2242]   2242  S  Code            0x0000000000038b38 0x0000000102c60b38 0x0000000000000060 0x00000000 ___lldb_unnamed_symbol12$$dyld
[ 2243]   2243  S  Code            0x0000000000039cbc 0x0000000102c61cbc 0x0000000000000010 0x00000000 ___lldb_unnamed_symbol13$$dyld
[ 2244]   2244  S  Code            0x0000000000039dfc 0x0000000102c61dfc 0x0000000000000030 0x00000000 ___lldb_unnamed_symbol14$$dyld
[ 2245]   2245  S  Code            0x0000000000039ef4 0x0000000102c61ef4 0x0000000000000030 0x00000000 ___lldb_unnamed_symbol15$$dyld
[ 2246]   2246  S  Code            0x000000000003a198 0x0000000102c62198 0x0000000000000030 0x00000000 ___lldb_unnamed_symbol16$$dyld
[ 2247]   2247  S  Code            0x000000000003b038 0x0000000102c63038 0x0000000000000024 0x00000000 ___lldb_unnamed_symbol17$$dyld
[ 2248]   2248  S  Code            0x000000000003bc80 0x0000000102c63c80 0x0000000000000034 0x00000000 ___lldb_unnamed_symbol18$$dyld
[ 2249]   2249  S  Code            0x000000000003bcb4 0x0000000102c63cb4 0x0000000000000028 0x00000000 ___lldb_unnamed_symbol19$$dyld
[ 2250]   2250  S  Code            0x000000000003bcdc 0x0000000102c63cdc 0x0000000000000034 0x00000000 ___lldb_unnamed_symbol20$$dyld
[ 2251]   2251  S  Code            0x000000000003c03c 0x0000000102c6403c 0x0000000000000038 0x00000000 ___lldb_unnamed_symbol21$$dyld
[ 2252]   2252  S  Code            0x000000000003d6f0 0x0000000102c656f0 0x0000000000000014 0x00000000 ___lldb_unnamed_symbol22$$dyld
[ 2253]   2253  S  Code            0x000000000003d704 0x0000000102c65704 0x0000000000000014 0x00000000 ___lldb_unnamed_symbol23$$dyld
[ 2254]   2254  S  Code            0x000000000003f430 0x0000000102c67430 0x0000000000000034 0x00000000 ___lldb_unnamed_symbol24$$dyld
[ 2255]   2255  S  Code            0x000000000003f6d8 0x0000000102c676d8 0x0000000000000028 0x00000000 ___lldb_unnamed_symbol25$$dyld
[ 2256]   2256  S  Code            0x000000000003fc78 0x0000000102c67c78 0x0000000000000034 0x00000000 ___lldb_unnamed_symbol26$$dyld
[ 2257]   2257  S  Code            0x0000000000040c6c 0x0000000102c68c6c 0x0000000000000024 0x00000000 ___lldb_unnamed_symbol27$$dyld
[ 2258]   2258  S  Code            0x000000000004140c 0x0000000102c6940c 0x000000000000005c 0x00000000 ___lldb_unnamed_symbol28$$dyld
[ 2259]   2259  S  Code            0x000000000004344c 0x0000000102c6b44c 0x000000000000005c 0x00000000 ___lldb_unnamed_symbol29$$dyld
[ 2260]   2260  S  Code            0x0000000000046500 0x0000000102c6e500 0x0000000000000044 0x00000000 ___lldb_unnamed_symbol30$$dyld
[ 2261]   2261  S  Code            0x0000000000046a90 0x0000000102c6ea90 0x0000000000000014 0x00000000 ___lldb_unnamed_symbol31$$dyld
[ 2262]   2262  S  Code            0x0000000000046bc0 0x0000000102c6ebc0 0x0000000000000018 0x00000000 ___lldb_unnamed_symbol32$$dyld
(lldb) quit
